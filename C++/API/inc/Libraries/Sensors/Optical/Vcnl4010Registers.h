/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
#pragma once
#include "SMBusDevice.h"
#include "Treehopper.Libraries.h"
#include "RegisterManager.h"
#include "Register.h"

using namespace Treehopper::Libraries;

namespace Treehopper { namespace Libraries { namespace Sensors { namespace Optical { 

    enum class Rates
    {
        Hz_1_95 = 0,
        Hz_3_90625 = 1,
        Hz_7_8125 = 2,
        Hz_16_625 = 3,
        Hz_31_25 = 4,
        Hz_62_5 = 5,
        Hz_125 = 6,
        Hz_250 = 7
	};

    enum class AlsRates
    {
        Hz_1 = 0,
        Hz_2 = 1,
        Hz_3 = 2,
        Hz_4 = 3,
        Hz_5 = 4,
        Hz_6 = 5,
        Hz_8 = 6,
        Hz_10 = 7
	};

    enum class IntCountExceeds
    {
        count_1 = 0,
        count_2 = 1,
        count_4 = 2,
        count_8 = 3,
        count_16 = 4,
        count_32 = 5,
        count_64 = 6,
        count_128 = 7
	};


    class Vcnl4010Registers : public RegisterManager
    {
    public:
        class CommandRegister : public Register
        {
        public:
			CommandRegister(RegisterManager& regManager) : Register(regManager,0x80, 1, false) { }
            int selfTimedEnable;
            int proxPeriodicEnable;
            int alsPeriodicEnable;
            int proxOnDemandStart;
            int alsOnDemandStart;
            int proxDataReady;
            int alsDataReady;
            int configLock;

            long getValue() { return ((selfTimedEnable & 0x1) << 0) | ((proxPeriodicEnable & 0x1) << 1) | ((alsPeriodicEnable & 0x1) << 2) | ((proxOnDemandStart & 0x1) << 3) | ((alsOnDemandStart & 0x1) << 4) | ((proxDataReady & 0x1) << 5) | ((alsDataReady & 0x1) << 6) | ((configLock & 0x1) << 7); }
            void setValue(long val)
            {
                selfTimedEnable = (int)((val >> 0) & 0x1);
                proxPeriodicEnable = (int)((val >> 1) & 0x1);
                alsPeriodicEnable = (int)((val >> 2) & 0x1);
                proxOnDemandStart = (int)((val >> 3) & 0x1);
                alsOnDemandStart = (int)((val >> 4) & 0x1);
                proxDataReady = (int)((val >> 5) & 0x1);
                alsDataReady = (int)((val >> 6) & 0x1);
                configLock = (int)((val >> 7) & 0x1);
            }
        };

        class ProductIdRegister : public Register
        {
        public:
			ProductIdRegister(RegisterManager& regManager) : Register(regManager,0x82, 1, false) { }
            int revisionId;
            int productId;

            long getValue() { return ((revisionId & 0xF) << 0) | ((productId & 0xF) << 4); }
            void setValue(long val)
            {
                revisionId = (int)((val >> 0) & 0xF);
                productId = (int)((val >> 4) & 0xF);
            }
        };

        class ProximityRateRegister : public Register
        {
        public:
			ProximityRateRegister(RegisterManager& regManager) : Register(regManager,0x82, 1, false) { }
            int rate;
            Rates getRate() { return (Rates)rate; }
            void setRate(Rates enumVal) { rate = (int)enumVal; }

            long getValue() { return ((rate & 0xF) << 0); }
            void setValue(long val)
            {
                rate = (int)((val >> 0) & 0xF);
            }
        };

        class LedCurrentRegister : public Register
        {
        public:
			LedCurrentRegister(RegisterManager& regManager) : Register(regManager,0x83, 1, false) { }
            int irLedCurrentValue;
            int fuseProgId;

            long getValue() { return ((irLedCurrentValue & 0x3F) << 0) | ((fuseProgId & 0x3) << 6); }
            void setValue(long val)
            {
                irLedCurrentValue = (int)((val >> 0) & 0x3F);
                fuseProgId = (int)((val >> 6) & 0x3);
            }
        };

        class AmbientLightParametersRegister : public Register
        {
        public:
			AmbientLightParametersRegister(RegisterManager& regManager) : Register(regManager,0x84, 1, false) { }
            int averagingSamples;
            int autoOffsetCompensation;
            int alsRate;
            int continuousConversionMode;
            AlsRates getAlsRate() { return (AlsRates)alsRate; }
            void setAlsRate(AlsRates enumVal) { alsRate = (int)enumVal; }

            long getValue() { return ((averagingSamples & 0x7) << 0) | ((autoOffsetCompensation & 0x1) << 3) | ((alsRate & 0x7) << 4) | ((continuousConversionMode & 0x1) << 7); }
            void setValue(long val)
            {
                averagingSamples = (int)((val >> 0) & 0x7);
                autoOffsetCompensation = (int)((val >> 3) & 0x1);
                alsRate = (int)((val >> 4) & 0x7);
                continuousConversionMode = (int)((val >> 7) & 0x1);
            }
        };

        class AmbientLightResultRegister : public Register
        {
        public:
			AmbientLightResultRegister(RegisterManager& regManager) : Register(regManager,0x85, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class ProximityResultRegister : public Register
        {
        public:
			ProximityResultRegister(RegisterManager& regManager) : Register(regManager,0x87, 2, true) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class InterruptControlRegister : public Register
        {
        public:
			InterruptControlRegister(RegisterManager& regManager) : Register(regManager,0x89, 1, false) { }
            int interruptThresholdSelect;
            int interruptThresholdEnable;
            int interruptAlsReadyEnable;
            int intCountExceed;
            IntCountExceeds getIntCountExceed() { return (IntCountExceeds)intCountExceed; }
            void setIntCountExceed(IntCountExceeds enumVal) { intCountExceed = (int)enumVal; }

            long getValue() { return ((interruptThresholdSelect & 0x1) << 0) | ((interruptThresholdEnable & 0x1) << 1) | ((interruptAlsReadyEnable & 0x1) << 2) | ((intCountExceed & 0x7) << 5); }
            void setValue(long val)
            {
                interruptThresholdSelect = (int)((val >> 0) & 0x1);
                interruptThresholdEnable = (int)((val >> 1) & 0x1);
                interruptAlsReadyEnable = (int)((val >> 2) & 0x1);
                intCountExceed = (int)((val >> 5) & 0x7);
            }
        };

        class LowThresholdRegister : public Register
        {
        public:
			LowThresholdRegister(RegisterManager& regManager) : Register(regManager,0x8A, 2, true) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class HighThresholdRegister : public Register
        {
        public:
			HighThresholdRegister(RegisterManager& regManager) : Register(regManager,0x8C, 2, true) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class InterruptStatusRegister : public Register
        {
        public:
			InterruptStatusRegister(RegisterManager& regManager) : Register(regManager,0x8E, 1, false) { }
            int intThresholdHighExceeded;
            int intThresholdLowExceeded;
            int intAlsReady;
            int intProxReady;

            long getValue() { return ((intThresholdHighExceeded & 0x1) << 0) | ((intThresholdLowExceeded & 0x1) << 1) | ((intAlsReady & 0x1) << 2) | ((intProxReady & 0x1) << 3); }
            void setValue(long val)
            {
                intThresholdHighExceeded = (int)((val >> 0) & 0x1);
                intThresholdLowExceeded = (int)((val >> 1) & 0x1);
                intAlsReady = (int)((val >> 2) & 0x1);
                intProxReady = (int)((val >> 3) & 0x1);
            }
        };

        class ProxModulatorTimingAdustmentRegister : public Register
        {
        public:
			ProxModulatorTimingAdustmentRegister(RegisterManager& regManager) : Register(regManager,0x8F, 1, false) { }
            int modulationDeadTime;
            int proximityFrequency;
            int modulationDelayTime;

            long getValue() { return ((modulationDeadTime & 0x7) << 0) | ((proximityFrequency & 0x3) << 3) | ((modulationDelayTime & 0x7) << 5); }
            void setValue(long val)
            {
                modulationDeadTime = (int)((val >> 0) & 0x7);
                proximityFrequency = (int)((val >> 3) & 0x3);
                modulationDelayTime = (int)((val >> 5) & 0x7);
            }
        };

            CommandRegister command;
            ProductIdRegister productId;
            ProximityRateRegister proximityRate;
            LedCurrentRegister ledCurrent;
            AmbientLightParametersRegister ambientLightParameters;
            AmbientLightResultRegister ambientLightResult;
            ProximityResultRegister proximityResult;
            InterruptControlRegister interruptControl;
            LowThresholdRegister lowThreshold;
            HighThresholdRegister highThreshold;
            InterruptStatusRegister interruptStatus;
            ProxModulatorTimingAdustmentRegister proxModulatorTimingAdustment;

		Vcnl4010Registers(SMBusDevice& device) : RegisterManager(device, true), command(*this), productId(*this), proximityRate(*this), ledCurrent(*this), ambientLightParameters(*this), ambientLightResult(*this), proximityResult(*this), interruptControl(*this), lowThreshold(*this), highThreshold(*this), interruptStatus(*this), proxModulatorTimingAdustment(*this)
		{ 
			registers.push_back(&command);
			registers.push_back(&productId);
			registers.push_back(&proximityRate);
			registers.push_back(&ledCurrent);
			registers.push_back(&ambientLightParameters);
			registers.push_back(&ambientLightResult);
			registers.push_back(&proximityResult);
			registers.push_back(&interruptControl);
			registers.push_back(&lowThreshold);
			registers.push_back(&highThreshold);
			registers.push_back(&interruptStatus);
			registers.push_back(&proxModulatorTimingAdustment);
		}
    };
 }  }  } }