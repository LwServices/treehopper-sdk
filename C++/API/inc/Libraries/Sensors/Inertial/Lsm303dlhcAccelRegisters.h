/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
#pragma once
#include "SMBusDevice.h"
#include "Libraries/Treehopper.Libraries.h"
#include "Libraries/RegisterManager.h"
#include "Libraries/Register.h"

using namespace Treehopper::Libraries;

namespace Treehopper { namespace Libraries { namespace Sensors { namespace Inertial { 

    enum class OutputDataRates
    {
        powerDown = 0,
        Hz_1 = 1,
        Hz_10 = 2,
        Hz_25 = 3,
        Hz_50 = 4,
        Hz_100 = 5,
        Hz_200 = 6,
        Hz_400 = 7,
        Lp_1620Hz = 8,
        Hz_1344_LP_5376Hz = 9
	};

    enum class AccelhighPassModes
    {
        Reset = 0,
        ReferenceSignal = 1,
        Normal = 2,
        AutoResetOnInterrupt = 3
	};

    enum class FullScaleSelections
    {
        Fs_2g = 0,
        Fs_4g = 1,
        Fs_6g = 2,
        Fs_8g = 3,
        Fs_16g = 4
	};

    enum class FifoModes
    {
        Bypass = 0,
        Fifo = 1,
        Stream = 2,
        StreamToFifo = 3,
        BypassToStream = 4
	};


    class Lsm303dlhcAccelRegisters : public RegisterManager
    {
    public:
        class Ctrl1Register : public Register
        {
        public:
			Ctrl1Register(RegisterManager& regManager) : Register(regManager,0x20, 1, false) { }
            int xEnable;
            int yEnable;
            int zEnable;
            int lowPowerEnable;
            int outputDataRate;
            OutputDataRates getOutputDataRate() { return (OutputDataRates)outputDataRate; }
            void setOutputDataRate(OutputDataRates enumVal) { outputDataRate = (int)enumVal; }

            long getValue() { return ((xEnable & 0x1) << 0) | ((yEnable & 0x1) << 1) | ((zEnable & 0x1) << 2) | ((lowPowerEnable & 0x1) << 3) | ((outputDataRate & 0xF) << 4); }
            void setValue(long val)
            {
                xEnable = (int)((val >> 0) & 0x1);
                yEnable = (int)((val >> 1) & 0x1);
                zEnable = (int)((val >> 2) & 0x1);
                lowPowerEnable = (int)((val >> 3) & 0x1);
                outputDataRate = (int)((val >> 4) & 0xF);
            }
        };

        class Ctrl2Register : public Register
        {
        public:
			Ctrl2Register(RegisterManager& regManager) : Register(regManager,0x21, 1, false) { }
            int hpis;
            int hpClick;
            int filterDataSelection;
            int hpcf;
            int accelhighPassMode;
            AccelhighPassModes getAccelhighPassMode() { return (AccelhighPassModes)accelhighPassMode; }
            void setAccelhighPassMode(AccelhighPassModes enumVal) { accelhighPassMode = (int)enumVal; }

            long getValue() { return ((hpis & 0x3) << 0) | ((hpClick & 0x1) << 2) | ((filterDataSelection & 0x1) << 3) | ((hpcf & 0x3) << 4) | ((accelhighPassMode & 0x3) << 6); }
            void setValue(long val)
            {
                hpis = (int)((val >> 0) & 0x3);
                hpClick = (int)((val >> 2) & 0x1);
                filterDataSelection = (int)((val >> 3) & 0x1);
                hpcf = (int)((val >> 4) & 0x3);
                accelhighPassMode = (int)((val >> 6) & 0x3);
            }
        };

        class Ctrl3Register : public Register
        {
        public:
			Ctrl3Register(RegisterManager& regManager) : Register(regManager,0x22, 1, false) { }
            int fifoOverrunOnInt1;
            int fifoWatermarkOnInt1;
            int drdy2OnInt1;
            int drdy1OnInt1;
            int aoi2OnInt1;
            int aoi1OnInt1;
            int clickOnInt2;

            long getValue() { return ((fifoOverrunOnInt1 & 0x1) << 1) | ((fifoWatermarkOnInt1 & 0x1) << 2) | ((drdy2OnInt1 & 0x1) << 3) | ((drdy1OnInt1 & 0x1) << 4) | ((aoi2OnInt1 & 0x1) << 5) | ((aoi1OnInt1 & 0x1) << 6) | ((clickOnInt2 & 0x1) << 7); }
            void setValue(long val)
            {
                fifoOverrunOnInt1 = (int)((val >> 1) & 0x1);
                fifoWatermarkOnInt1 = (int)((val >> 2) & 0x1);
                drdy2OnInt1 = (int)((val >> 3) & 0x1);
                drdy1OnInt1 = (int)((val >> 4) & 0x1);
                aoi2OnInt1 = (int)((val >> 5) & 0x1);
                aoi1OnInt1 = (int)((val >> 6) & 0x1);
                clickOnInt2 = (int)((val >> 7) & 0x1);
            }
        };

        class Ctrl4Register : public Register
        {
        public:
			Ctrl4Register(RegisterManager& regManager) : Register(regManager,0x23, 1, false) { }
            int spiModeSelection;
            int highResolution;
            int fullScaleSelection;
            int ble;
            int bdu;
            FullScaleSelections getFullScaleSelection() { return (FullScaleSelections)fullScaleSelection; }
            void setFullScaleSelection(FullScaleSelections enumVal) { fullScaleSelection = (int)enumVal; }

            long getValue() { return ((spiModeSelection & 0x1) << 0) | ((highResolution & 0x1) << 3) | ((fullScaleSelection & 0x7) << 3) | ((ble & 0x1) << 6) | ((bdu & 0x1) << 7); }
            void setValue(long val)
            {
                spiModeSelection = (int)((val >> 0) & 0x1);
                highResolution = (int)((val >> 3) & 0x1);
                fullScaleSelection = (int)((val >> 3) & 0x7);
                ble = (int)((val >> 6) & 0x1);
                bdu = (int)((val >> 7) & 0x1);
            }
        };

        class Ctrl5Register : public Register
        {
        public:
			Ctrl5Register(RegisterManager& regManager) : Register(regManager,0x24, 1, false) { }
            int d4dInt2;
            int lirInt2;
            int d4dInt1;
            int lirInt1;
            int fifoEnable;
            int boot;

            long getValue() { return ((d4dInt2 & 0x1) << 0) | ((lirInt2 & 0x1) << 1) | ((d4dInt1 & 0x1) << 2) | ((lirInt1 & 0x1) << 3) | ((fifoEnable & 0x1) << 6) | ((boot & 0x1) << 7); }
            void setValue(long val)
            {
                d4dInt2 = (int)((val >> 0) & 0x1);
                lirInt2 = (int)((val >> 1) & 0x1);
                d4dInt1 = (int)((val >> 2) & 0x1);
                lirInt1 = (int)((val >> 3) & 0x1);
                fifoEnable = (int)((val >> 6) & 0x1);
                boot = (int)((val >> 7) & 0x1);
            }
        };

        class Ctrl6Register : public Register
        {
        public:
			Ctrl6Register(RegisterManager& regManager) : Register(regManager,0x25, 1, false) { }
            int interruptActiveHigh;
            int p2Act;
            int bootI1;
            int i2Int2;
            int i2Int1;
            int i2ClickEnable;

            long getValue() { return ((interruptActiveHigh & 0x1) << 1) | ((p2Act & 0x1) << 3) | ((bootI1 & 0x1) << 4) | ((i2Int2 & 0x1) << 5) | ((i2Int1 & 0x1) << 6) | ((i2ClickEnable & 0x1) << 7); }
            void setValue(long val)
            {
                interruptActiveHigh = (int)((val >> 1) & 0x1);
                p2Act = (int)((val >> 3) & 0x1);
                bootI1 = (int)((val >> 4) & 0x1);
                i2Int2 = (int)((val >> 5) & 0x1);
                i2Int1 = (int)((val >> 6) & 0x1);
                i2ClickEnable = (int)((val >> 7) & 0x1);
            }
        };

        class ReferenceRegister : public Register
        {
        public:
			ReferenceRegister(RegisterManager& regManager) : Register(regManager,0x26, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class StatusRegister : public Register
        {
        public:
			StatusRegister(RegisterManager& regManager) : Register(regManager,0x27, 1, false) { }
            int xDataAvailable;
            int yDataAvailable;
            int zDataAvailable;
            int zyxDataAvailable;
            int xDataOverrun;
            int yDataOverrun;
            int zDataOverrun;
            int zyxDataOverrun;

            long getValue() { return ((xDataAvailable & 0x1) << 0) | ((yDataAvailable & 0x1) << 1) | ((zDataAvailable & 0x1) << 2) | ((zyxDataAvailable & 0x1) << 3) | ((xDataOverrun & 0x1) << 4) | ((yDataOverrun & 0x1) << 5) | ((zDataOverrun & 0x1) << 6) | ((zyxDataOverrun & 0x1) << 7); }
            void setValue(long val)
            {
                xDataAvailable = (int)((val >> 0) & 0x1);
                yDataAvailable = (int)((val >> 1) & 0x1);
                zDataAvailable = (int)((val >> 2) & 0x1);
                zyxDataAvailable = (int)((val >> 3) & 0x1);
                xDataOverrun = (int)((val >> 4) & 0x1);
                yDataOverrun = (int)((val >> 5) & 0x1);
                zDataOverrun = (int)((val >> 6) & 0x1);
                zyxDataOverrun = (int)((val >> 7) & 0x1);
            }
        };

        class FifoControlRegister : public Register
        {
        public:
			FifoControlRegister(RegisterManager& regManager) : Register(regManager,0x2E, 1, false) { }
            int fifoThreshold;
            int fifoMode;
            FifoModes getFifoMode() { return (FifoModes)fifoMode; }
            void setFifoMode(FifoModes enumVal) { fifoMode = (int)enumVal; }

            long getValue() { return ((fifoThreshold & 0x1F) << 0) | ((fifoMode & 0x7) << 5); }
            void setValue(long val)
            {
                fifoThreshold = (int)((val >> 0) & 0x1F);
                fifoMode = (int)((val >> 5) & 0x7);
            }
        };

        class FifoSourceRegister : public Register
        {
        public:
			FifoSourceRegister(RegisterManager& regManager) : Register(regManager,0x2f, 1, false) { }
            int fifoStoredLevel;
            int empty;
            int overrun;
            int fifoThreshold;

            long getValue() { return ((fifoStoredLevel & 0x1F) << 0) | ((empty & 0x1) << 5) | ((overrun & 0x1) << 6) | ((fifoThreshold & 0x1) << 7); }
            void setValue(long val)
            {
                fifoStoredLevel = (int)((val >> 0) & 0x1F);
                empty = (int)((val >> 5) & 0x1);
                overrun = (int)((val >> 6) & 0x1);
                fifoThreshold = (int)((val >> 7) & 0x1);
            }
        };

        class InertialIntGen1ConfigRegister : public Register
        {
        public:
			InertialIntGen1ConfigRegister(RegisterManager& regManager) : Register(regManager,0x30, 1, false) { }
            int xLowInterruptEnable;
            int xHighInterruptEnable;
            int yLowInterruptEnable;
            int yHighInterruptEnable;
            int zLowInterruptEvent;
            int zHighInterruptEnable;
            int detect6D;
            int andOrInterruptEvents;

            long getValue() { return ((xLowInterruptEnable & 0x1) << 0) | ((xHighInterruptEnable & 0x1) << 1) | ((yLowInterruptEnable & 0x1) << 2) | ((yHighInterruptEnable & 0x1) << 3) | ((zLowInterruptEvent & 0x1) << 4) | ((zHighInterruptEnable & 0x1) << 5) | ((detect6D & 0x1) << 6) | ((andOrInterruptEvents & 0x1) << 7); }
            void setValue(long val)
            {
                xLowInterruptEnable = (int)((val >> 0) & 0x1);
                xHighInterruptEnable = (int)((val >> 1) & 0x1);
                yLowInterruptEnable = (int)((val >> 2) & 0x1);
                yHighInterruptEnable = (int)((val >> 3) & 0x1);
                zLowInterruptEvent = (int)((val >> 4) & 0x1);
                zHighInterruptEnable = (int)((val >> 5) & 0x1);
                detect6D = (int)((val >> 6) & 0x1);
                andOrInterruptEvents = (int)((val >> 7) & 0x1);
            }
        };

        class InertialIntGen1StatusRegister : public Register
        {
        public:
			InertialIntGen1StatusRegister(RegisterManager& regManager) : Register(regManager,0x31, 1, false) { }
            int xLow;
            int xHigh;
            int yLow;
            int yHigh;
            int zLow;
            int zHigh;
            int intStatus;

            long getValue() { return ((xLow & 0x1) << 0) | ((xHigh & 0x1) << 1) | ((yLow & 0x1) << 2) | ((yHigh & 0x1) << 3) | ((zLow & 0x1) << 4) | ((zHigh & 0x1) << 5) | ((intStatus & 0x1) << 6); }
            void setValue(long val)
            {
                xLow = (int)((val >> 0) & 0x1);
                xHigh = (int)((val >> 1) & 0x1);
                yLow = (int)((val >> 2) & 0x1);
                yHigh = (int)((val >> 3) & 0x1);
                zLow = (int)((val >> 4) & 0x1);
                zHigh = (int)((val >> 5) & 0x1);
                intStatus = (int)((val >> 6) & 0x1);
            }
        };

        class InertialIntGen1ThresholdRegister : public Register
        {
        public:
			InertialIntGen1ThresholdRegister(RegisterManager& regManager) : Register(regManager,0x32, 1, false) { }
            int value;

            long getValue() { return ((value & 0x7F) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0x7F);
            }
        };

        class InertialIntGen1DurationRegister : public Register
        {
        public:
			InertialIntGen1DurationRegister(RegisterManager& regManager) : Register(regManager,0x33, 1, false) { }
            int value;

            long getValue() { return ((value & 0x7F) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0x7F);
            }
        };

        class InertialIntGen2ConfigRegister : public Register
        {
        public:
			InertialIntGen2ConfigRegister(RegisterManager& regManager) : Register(regManager,0x34, 1, false) { }
            int xLowInterruptEnable;
            int xHighInterruptEnable;
            int yLowInterruptEnable;
            int yHighInterruptEnable;
            int zLowInterruptEvent;
            int zHighInterruptEnable;
            int detect6D;
            int andOrInterruptEvents;

            long getValue() { return ((xLowInterruptEnable & 0x1) << 0) | ((xHighInterruptEnable & 0x1) << 1) | ((yLowInterruptEnable & 0x1) << 2) | ((yHighInterruptEnable & 0x1) << 3) | ((zLowInterruptEvent & 0x1) << 4) | ((zHighInterruptEnable & 0x1) << 5) | ((detect6D & 0x1) << 6) | ((andOrInterruptEvents & 0x1) << 7); }
            void setValue(long val)
            {
                xLowInterruptEnable = (int)((val >> 0) & 0x1);
                xHighInterruptEnable = (int)((val >> 1) & 0x1);
                yLowInterruptEnable = (int)((val >> 2) & 0x1);
                yHighInterruptEnable = (int)((val >> 3) & 0x1);
                zLowInterruptEvent = (int)((val >> 4) & 0x1);
                zHighInterruptEnable = (int)((val >> 5) & 0x1);
                detect6D = (int)((val >> 6) & 0x1);
                andOrInterruptEvents = (int)((val >> 7) & 0x1);
            }
        };

        class InertialIntGen2StatusRegister : public Register
        {
        public:
			InertialIntGen2StatusRegister(RegisterManager& regManager) : Register(regManager,0x35, 1, false) { }
            int xLow;
            int xHigh;
            int yLow;
            int yHigh;
            int zLow;
            int zHigh;
            int intStatus;

            long getValue() { return ((xLow & 0x1) << 0) | ((xHigh & 0x1) << 1) | ((yLow & 0x1) << 2) | ((yHigh & 0x1) << 3) | ((zLow & 0x1) << 4) | ((zHigh & 0x1) << 5) | ((intStatus & 0x1) << 6); }
            void setValue(long val)
            {
                xLow = (int)((val >> 0) & 0x1);
                xHigh = (int)((val >> 1) & 0x1);
                yLow = (int)((val >> 2) & 0x1);
                yHigh = (int)((val >> 3) & 0x1);
                zLow = (int)((val >> 4) & 0x1);
                zHigh = (int)((val >> 5) & 0x1);
                intStatus = (int)((val >> 6) & 0x1);
            }
        };

        class InertialIntGen2ThresholdRegister : public Register
        {
        public:
			InertialIntGen2ThresholdRegister(RegisterManager& regManager) : Register(regManager,0x36, 1, false) { }
            int value;

            long getValue() { return ((value & 0x7F) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0x7F);
            }
        };

        class InertialIntGen2DurationRegister : public Register
        {
        public:
			InertialIntGen2DurationRegister(RegisterManager& regManager) : Register(regManager,0x37, 1, false) { }
            int value;

            long getValue() { return ((value & 0x7F) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0x7F);
            }
        };

        class ClickConfigRegister : public Register
        {
        public:
			ClickConfigRegister(RegisterManager& regManager) : Register(regManager,0x38, 1, false) { }
            int xSingleClick;
            int xDoubleClick;
            int ySingleClick;
            int yDoubleClick;
            int zSingleClick;
            int zDoubleClick;

            long getValue() { return ((xSingleClick & 0x1) << 0) | ((xDoubleClick & 0x1) << 1) | ((ySingleClick & 0x1) << 2) | ((yDoubleClick & 0x1) << 3) | ((zSingleClick & 0x1) << 4) | ((zDoubleClick & 0x1) << 5); }
            void setValue(long val)
            {
                xSingleClick = (int)((val >> 0) & 0x1);
                xDoubleClick = (int)((val >> 1) & 0x1);
                ySingleClick = (int)((val >> 2) & 0x1);
                yDoubleClick = (int)((val >> 3) & 0x1);
                zSingleClick = (int)((val >> 4) & 0x1);
                zDoubleClick = (int)((val >> 5) & 0x1);
            }
        };

        class ClickSourceRegister : public Register
        {
        public:
			ClickSourceRegister(RegisterManager& regManager) : Register(regManager,0x39, 1, false) { }
            int x;
            int y;
            int z;
            int sign;
            int singleClickEn;
            int doubleClickEn;
            int interruptActive;

            long getValue() { return ((x & 0x1) << 0) | ((y & 0x1) << 1) | ((z & 0x1) << 2) | ((sign & 0x1) << 3) | ((singleClickEn & 0x1) << 4) | ((doubleClickEn & 0x1) << 5) | ((interruptActive & 0x1) << 6); }
            void setValue(long val)
            {
                x = (int)((val >> 0) & 0x1);
                y = (int)((val >> 1) & 0x1);
                z = (int)((val >> 2) & 0x1);
                sign = (int)((val >> 3) & 0x1);
                singleClickEn = (int)((val >> 4) & 0x1);
                doubleClickEn = (int)((val >> 5) & 0x1);
                interruptActive = (int)((val >> 6) & 0x1);
            }
        };

        class ClickThresholdRegister : public Register
        {
        public:
			ClickThresholdRegister(RegisterManager& regManager) : Register(regManager,0x3A, 1, false) { }
            int value;

            long getValue() { return ((value & 0x7F) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0x7F);
            }
        };

        class TimeLimitRegister : public Register
        {
        public:
			TimeLimitRegister(RegisterManager& regManager) : Register(regManager,0x3b, 1, false) { }
            int value;

            long getValue() { return ((value & 0x7F) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0x7F);
            }
        };

        class TimeLatencyRegister : public Register
        {
        public:
			TimeLatencyRegister(RegisterManager& regManager) : Register(regManager,0x3c, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class TimeWindowRegister : public Register
        {
        public:
			TimeWindowRegister(RegisterManager& regManager) : Register(regManager,0x3d, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class OutAccelXRegister : public Register
        {
        public:
			OutAccelXRegister(RegisterManager& regManager) : Register(regManager,0xa8, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class OutAccelYRegister : public Register
        {
        public:
			OutAccelYRegister(RegisterManager& regManager) : Register(regManager,0xaA, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class OutAccelZRegister : public Register
        {
        public:
			OutAccelZRegister(RegisterManager& regManager) : Register(regManager,0xaC, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

            Ctrl1Register ctrl1;
            Ctrl2Register ctrl2;
            Ctrl3Register ctrl3;
            Ctrl4Register ctrl4;
            Ctrl5Register ctrl5;
            Ctrl6Register ctrl6;
            ReferenceRegister reference;
            StatusRegister status;
            FifoControlRegister fifoControl;
            FifoSourceRegister fifoSource;
            InertialIntGen1ConfigRegister inertialIntGen1Config;
            InertialIntGen1StatusRegister inertialIntGen1Status;
            InertialIntGen1ThresholdRegister inertialIntGen1Threshold;
            InertialIntGen1DurationRegister inertialIntGen1Duration;
            InertialIntGen2ConfigRegister inertialIntGen2Config;
            InertialIntGen2StatusRegister inertialIntGen2Status;
            InertialIntGen2ThresholdRegister inertialIntGen2Threshold;
            InertialIntGen2DurationRegister inertialIntGen2Duration;
            ClickConfigRegister clickConfig;
            ClickSourceRegister clickSource;
            ClickThresholdRegister clickThreshold;
            TimeLimitRegister timeLimit;
            TimeLatencyRegister timeLatency;
            TimeWindowRegister timeWindow;
            OutAccelXRegister outAccelX;
            OutAccelYRegister outAccelY;
            OutAccelZRegister outAccelZ;

		Lsm303dlhcAccelRegisters(SMBusDevice& device) : RegisterManager(device, true), ctrl1(*this), ctrl2(*this), ctrl3(*this), ctrl4(*this), ctrl5(*this), ctrl6(*this), reference(*this), status(*this), fifoControl(*this), fifoSource(*this), inertialIntGen1Config(*this), inertialIntGen1Status(*this), inertialIntGen1Threshold(*this), inertialIntGen1Duration(*this), inertialIntGen2Config(*this), inertialIntGen2Status(*this), inertialIntGen2Threshold(*this), inertialIntGen2Duration(*this), clickConfig(*this), clickSource(*this), clickThreshold(*this), timeLimit(*this), timeLatency(*this), timeWindow(*this), outAccelX(*this), outAccelY(*this), outAccelZ(*this)
		{ 
			registers.push_back(&ctrl1);
			registers.push_back(&ctrl2);
			registers.push_back(&ctrl3);
			registers.push_back(&ctrl4);
			registers.push_back(&ctrl5);
			registers.push_back(&ctrl6);
			registers.push_back(&reference);
			registers.push_back(&status);
			registers.push_back(&fifoControl);
			registers.push_back(&fifoSource);
			registers.push_back(&inertialIntGen1Config);
			registers.push_back(&inertialIntGen1Status);
			registers.push_back(&inertialIntGen1Threshold);
			registers.push_back(&inertialIntGen1Duration);
			registers.push_back(&inertialIntGen2Config);
			registers.push_back(&inertialIntGen2Status);
			registers.push_back(&inertialIntGen2Threshold);
			registers.push_back(&inertialIntGen2Duration);
			registers.push_back(&clickConfig);
			registers.push_back(&clickSource);
			registers.push_back(&clickThreshold);
			registers.push_back(&timeLimit);
			registers.push_back(&timeLatency);
			registers.push_back(&timeWindow);
			registers.push_back(&outAccelX);
			registers.push_back(&outAccelY);
			registers.push_back(&outAccelZ);
		}
    };
 }  }  } }