/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
#pragma once
#include "SMBusDevice.h"
#include "Libraries/Treehopper.Libraries.h"
#include "Libraries/RegisterManager.h"
#include "Libraries/Register.h"

using namespace Treehopper::Libraries;

namespace Treehopper { namespace Libraries { namespace Sensors { namespace Inertial { 


    class Adxl345Registers : public RegisterManager
    {
    public:
        class PowerCtlRegister : public Register
        {
        public:
			PowerCtlRegister(RegisterManager& regManager) : Register(regManager,0x2D, 1, false) { }
            int sleep;
            int measure;

            long getValue() { return ((sleep & 0x1) << 2) | ((measure & 0x1) << 3); }
            void setValue(long val)
            {
                sleep = (int)((val >> 2) & 0x1);
                measure = (int)((val >> 3) & 0x1);
            }
        };

        class DataFormatRegister : public Register
        {
        public:
			DataFormatRegister(RegisterManager& regManager) : Register(regManager,0x31, 1, false) { }
            int range;
            int justify;
            int fullRes;

            long getValue() { return ((range & 0x3) << 0) | ((justify & 0x1) << 2) | ((fullRes & 0x1) << 3); }
            void setValue(long val)
            {
                range = (int)((val >> 0) & 0x3);
                justify = (int)((val >> 2) & 0x1);
                fullRes = (int)((val >> 3) & 0x1);
            }
        };

        class DataXRegister : public Register
        {
        public:
			DataXRegister(RegisterManager& regManager) : Register(regManager,0x32, 2, false) { }
            int value;

            long getValue() { return ((value & 0x1FFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0x1FFF) << (32 - 13)) >> (32 - 13);
            }
        };

        class DataYRegister : public Register
        {
        public:
			DataYRegister(RegisterManager& regManager) : Register(regManager,0x34, 2, false) { }
            int value;

            long getValue() { return ((value & 0x1FFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0x1FFF) << (32 - 13)) >> (32 - 13);
            }
        };

        class DataZRegister : public Register
        {
        public:
			DataZRegister(RegisterManager& regManager) : Register(regManager,0x36, 2, false) { }
            int value;

            long getValue() { return ((value & 0x1FFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0x1FFF) << (32 - 13)) >> (32 - 13);
            }
        };

            PowerCtlRegister powerCtl;
            DataFormatRegister dataFormat;
            DataXRegister dataX;
            DataYRegister dataY;
            DataZRegister dataZ;

		Adxl345Registers(SMBusDevice& device) : RegisterManager(device, true), powerCtl(*this), dataFormat(*this), dataX(*this), dataY(*this), dataZ(*this)
		{ 
			registers.push_back(&powerCtl);
			registers.push_back(&dataFormat);
			registers.push_back(&dataX);
			registers.push_back(&dataY);
			registers.push_back(&dataZ);
		}
    };
 }  }  } }