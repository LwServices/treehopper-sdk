/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
#pragma once
#include "SMBusDevice.h"
#include "Libraries/Treehopper.Libraries.h"
#include "Libraries/RegisterManager.h"
#include "Libraries/Register.h"

using namespace Treehopper::Libraries;

namespace Treehopper { namespace Libraries { namespace Sensors { namespace Inertial { 

    enum class DataRates
    {
        Hz_95 = 0,
        Hz_190 = 1,
        Hz_380 = 2,
        Hz_760 = 3
	};

    enum class FifoModes
    {
        Bypass = 0,
        Fifo = 1,
        Stream = 2,
        StreamToFifo = 3,
        BypassToStream = 4
	};


    class L3gd20Registers : public RegisterManager
    {
    public:
        class WhoAmIRegister : public Register
        {
        public:
			WhoAmIRegister(RegisterManager& regManager) : Register(regManager,0x0f, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class CtrlReg1Register : public Register
        {
        public:
			CtrlReg1Register(RegisterManager& regManager) : Register(regManager,0x20, 1, false) { }
            int yEn;
            int xEn;
            int zEn;
            int pd;
            int bandwidth;
            int dataRate;
            DataRates getDataRate() { return (DataRates)dataRate; }
            void setDataRate(DataRates enumVal) { dataRate = (int)enumVal; }

            long getValue() { return ((yEn & 0x1) << 0) | ((xEn & 0x1) << 1) | ((zEn & 0x1) << 2) | ((pd & 0x1) << 3) | ((bandwidth & 0x3) << 4) | ((dataRate & 0x3) << 6); }
            void setValue(long val)
            {
                yEn = (int)((val >> 0) & 0x1);
                xEn = (int)((val >> 1) & 0x1);
                zEn = (int)((val >> 2) & 0x1);
                pd = (int)((val >> 3) & 0x1);
                bandwidth = (int)((val >> 4) & 0x3);
                dataRate = (int)((val >> 6) & 0x3);
            }
        };

        class CtrlReg2Register : public Register
        {
        public:
			CtrlReg2Register(RegisterManager& regManager) : Register(regManager,0x21, 1, false) { }
            int hpFilterCutoff;
            int hpFilterMode;

            long getValue() { return ((hpFilterCutoff & 0xF) << 0) | ((hpFilterMode & 0x3) << 4); }
            void setValue(long val)
            {
                hpFilterCutoff = (int)((val >> 0) & 0xF);
                hpFilterMode = (int)((val >> 4) & 0x3);
            }
        };

        class CtrlReg3Register : public Register
        {
        public:
			CtrlReg3Register(RegisterManager& regManager) : Register(regManager,0x22, 1, false) { }
            int i2Empty;
            int i2ORun;
            int i2Wtm;
            int i2Drdy;
            int ppOd;
            int hLactive;
            int i1boot;
            int i1Int1;

            long getValue() { return ((i2Empty & 0x1) << 0) | ((i2ORun & 0x1) << 1) | ((i2Wtm & 0x1) << 2) | ((i2Drdy & 0x1) << 3) | ((ppOd & 0x1) << 4) | ((hLactive & 0x1) << 5) | ((i1boot & 0x1) << 6) | ((i1Int1 & 0x1) << 7); }
            void setValue(long val)
            {
                i2Empty = (int)((val >> 0) & 0x1);
                i2ORun = (int)((val >> 1) & 0x1);
                i2Wtm = (int)((val >> 2) & 0x1);
                i2Drdy = (int)((val >> 3) & 0x1);
                ppOd = (int)((val >> 4) & 0x1);
                hLactive = (int)((val >> 5) & 0x1);
                i1boot = (int)((val >> 6) & 0x1);
                i1Int1 = (int)((val >> 7) & 0x1);
            }
        };

        class CtrlReg4Register : public Register
        {
        public:
			CtrlReg4Register(RegisterManager& regManager) : Register(regManager,0x23, 1, false) { }
            int sim;
            int fullScale;
            int bigLittleEndian;
            int blockDataUpdate;

            long getValue() { return ((sim & 0x1) << 0) | ((fullScale & 0x3) << 4) | ((bigLittleEndian & 0x1) << 6) | ((blockDataUpdate & 0x1) << 7); }
            void setValue(long val)
            {
                sim = (int)((val >> 0) & 0x1);
                fullScale = (int)((val >> 4) & 0x3);
                bigLittleEndian = (int)((val >> 6) & 0x1);
                blockDataUpdate = (int)((val >> 7) & 0x1);
            }
        };

        class CtrlReg5Register : public Register
        {
        public:
			CtrlReg5Register(RegisterManager& regManager) : Register(regManager,0x24, 1, false) { }
            int outSel;
            int int1Sel;
            int hPen;
            int fifoEn;
            int boot;

            long getValue() { return ((outSel & 0x3) << 0) | ((int1Sel & 0x3) << 2) | ((hPen & 0x1) << 4) | ((fifoEn & 0x1) << 6) | ((boot & 0x1) << 7); }
            void setValue(long val)
            {
                outSel = (int)((val >> 0) & 0x3);
                int1Sel = (int)((val >> 2) & 0x3);
                hPen = (int)((val >> 4) & 0x1);
                fifoEn = (int)((val >> 6) & 0x1);
                boot = (int)((val >> 7) & 0x1);
            }
        };

        class ReferenceDataCaptureRegister : public Register
        {
        public:
			ReferenceDataCaptureRegister(RegisterManager& regManager) : Register(regManager,0x25, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class OutTempRegister : public Register
        {
        public:
			OutTempRegister(RegisterManager& regManager) : Register(regManager,0x26, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class StatusRegister : public Register
        {
        public:
			StatusRegister(RegisterManager& regManager) : Register(regManager,0x27, 1, false) { }
            int xDataAvailable;
            int yDataAvailable;
            int zDataAvailable;
            int zyxDataAvailable;
            int xDataOverrun;
            int yDataOverrun;
            int zDataOverrun;
            int zyxDataOverrun;

            long getValue() { return ((xDataAvailable & 0x1) << 0) | ((yDataAvailable & 0x1) << 1) | ((zDataAvailable & 0x1) << 2) | ((zyxDataAvailable & 0x1) << 3) | ((xDataOverrun & 0x1) << 4) | ((yDataOverrun & 0x1) << 5) | ((zDataOverrun & 0x1) << 6) | ((zyxDataOverrun & 0x1) << 7); }
            void setValue(long val)
            {
                xDataAvailable = (int)((val >> 0) & 0x1);
                yDataAvailable = (int)((val >> 1) & 0x1);
                zDataAvailable = (int)((val >> 2) & 0x1);
                zyxDataAvailable = (int)((val >> 3) & 0x1);
                xDataOverrun = (int)((val >> 4) & 0x1);
                yDataOverrun = (int)((val >> 5) & 0x1);
                zDataOverrun = (int)((val >> 6) & 0x1);
                zyxDataOverrun = (int)((val >> 7) & 0x1);
            }
        };

        class FifoCtrlRegister : public Register
        {
        public:
			FifoCtrlRegister(RegisterManager& regManager) : Register(regManager,0x2e, 1, false) { }
            int watermarkLevelSetting;
            int fifoMode;
            FifoModes getFifoMode() { return (FifoModes)fifoMode; }
            void setFifoMode(FifoModes enumVal) { fifoMode = (int)enumVal; }

            long getValue() { return ((watermarkLevelSetting & 0x1F) << 0) | ((fifoMode & 0x7) << 5); }
            void setValue(long val)
            {
                watermarkLevelSetting = (int)((val >> 0) & 0x1F);
                fifoMode = (int)((val >> 5) & 0x7);
            }
        };

        class FifoSrcRegister : public Register
        {
        public:
			FifoSrcRegister(RegisterManager& regManager) : Register(regManager,0x2f, 1, false) { }
            int fifoStoredDataLevel;
            int empty;
            int overrun;
            int watermarkStatus;

            long getValue() { return ((fifoStoredDataLevel & 0x1F) << 0) | ((empty & 0x1) << 5) | ((overrun & 0x1) << 6) | ((watermarkStatus & 0x1) << 7); }
            void setValue(long val)
            {
                fifoStoredDataLevel = (int)((val >> 0) & 0x1F);
                empty = (int)((val >> 5) & 0x1);
                overrun = (int)((val >> 6) & 0x1);
                watermarkStatus = (int)((val >> 7) & 0x1);
            }
        };

        class IntConfigRegister : public Register
        {
        public:
			IntConfigRegister(RegisterManager& regManager) : Register(regManager,0x30, 1, false) { }
            int xLowInterruptEnable;
            int xHighInterruptEnable;
            int yLowInterruptEnable;
            int yHighInterruptEnable;
            int zLowInterruptEvent;
            int zHighInterruptEnable;
            int latchInterruptRequest;
            int andOr;

            long getValue() { return ((xLowInterruptEnable & 0x1) << 0) | ((xHighInterruptEnable & 0x1) << 1) | ((yLowInterruptEnable & 0x1) << 2) | ((yHighInterruptEnable & 0x1) << 3) | ((zLowInterruptEvent & 0x1) << 4) | ((zHighInterruptEnable & 0x1) << 5) | ((latchInterruptRequest & 0x1) << 6) | ((andOr & 0x1) << 7); }
            void setValue(long val)
            {
                xLowInterruptEnable = (int)((val >> 0) & 0x1);
                xHighInterruptEnable = (int)((val >> 1) & 0x1);
                yLowInterruptEnable = (int)((val >> 2) & 0x1);
                yHighInterruptEnable = (int)((val >> 3) & 0x1);
                zLowInterruptEvent = (int)((val >> 4) & 0x1);
                zHighInterruptEnable = (int)((val >> 5) & 0x1);
                latchInterruptRequest = (int)((val >> 6) & 0x1);
                andOr = (int)((val >> 7) & 0x1);
            }
        };

        class Int1SrcRegister : public Register
        {
        public:
			Int1SrcRegister(RegisterManager& regManager) : Register(regManager,0x31, 1, false) { }
            int xLow;
            int xHigh;
            int yLow;
            int yHigh;
            int zLow;
            int zHigh;
            int interruptActive;

            long getValue() { return ((xLow & 0x1) << 0) | ((xHigh & 0x1) << 1) | ((yLow & 0x1) << 2) | ((yHigh & 0x1) << 3) | ((zLow & 0x1) << 4) | ((zHigh & 0x1) << 5) | ((interruptActive & 0x1) << 6); }
            void setValue(long val)
            {
                xLow = (int)((val >> 0) & 0x1);
                xHigh = (int)((val >> 1) & 0x1);
                yLow = (int)((val >> 2) & 0x1);
                yHigh = (int)((val >> 3) & 0x1);
                zLow = (int)((val >> 4) & 0x1);
                zHigh = (int)((val >> 5) & 0x1);
                interruptActive = (int)((val >> 6) & 0x1);
            }
        };

        class Int1ThresholdXRegister : public Register
        {
        public:
			Int1ThresholdXRegister(RegisterManager& regManager) : Register(regManager,0x32, 2, true) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class Int1ThresholdYRegister : public Register
        {
        public:
			Int1ThresholdYRegister(RegisterManager& regManager) : Register(regManager,0x34, 2, true) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class Int1ThresholdZRegister : public Register
        {
        public:
			Int1ThresholdZRegister(RegisterManager& regManager) : Register(regManager,0x36, 2, true) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class Int1DurationRegister : public Register
        {
        public:
			Int1DurationRegister(RegisterManager& regManager) : Register(regManager,0x38, 1, false) { }
            int duration;
            int wait;

            long getValue() { return ((duration & 0x7F) << 0) | ((wait & 0x1) << 7); }
            void setValue(long val)
            {
                duration = (int)((val >> 0) & 0x7F);
                wait = (int)((val >> 7) & 0x1);
            }
        };

        class OutXRegister : public Register
        {
        public:
			OutXRegister(RegisterManager& regManager) : Register(regManager,0xA8, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class OutYRegister : public Register
        {
        public:
			OutYRegister(RegisterManager& regManager) : Register(regManager,0xAA, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class OutZRegister : public Register
        {
        public:
			OutZRegister(RegisterManager& regManager) : Register(regManager,0xAC, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

            WhoAmIRegister whoAmI;
            CtrlReg1Register ctrlReg1;
            CtrlReg2Register ctrlReg2;
            CtrlReg3Register ctrlReg3;
            CtrlReg4Register ctrlReg4;
            CtrlReg5Register ctrlReg5;
            ReferenceDataCaptureRegister referenceDataCapture;
            OutTempRegister outTemp;
            StatusRegister status;
            FifoCtrlRegister fifoCtrl;
            FifoSrcRegister fifoSrc;
            IntConfigRegister intConfig;
            Int1SrcRegister int1Src;
            Int1ThresholdXRegister int1ThresholdX;
            Int1ThresholdYRegister int1ThresholdY;
            Int1ThresholdZRegister int1ThresholdZ;
            Int1DurationRegister int1Duration;
            OutXRegister outX;
            OutYRegister outY;
            OutZRegister outZ;

		L3gd20Registers(SMBusDevice& device) : RegisterManager(device, true), whoAmI(*this), ctrlReg1(*this), ctrlReg2(*this), ctrlReg3(*this), ctrlReg4(*this), ctrlReg5(*this), referenceDataCapture(*this), outTemp(*this), status(*this), fifoCtrl(*this), fifoSrc(*this), intConfig(*this), int1Src(*this), int1ThresholdX(*this), int1ThresholdY(*this), int1ThresholdZ(*this), int1Duration(*this), outX(*this), outY(*this), outZ(*this)
		{ 
			registers.push_back(&whoAmI);
			registers.push_back(&ctrlReg1);
			registers.push_back(&ctrlReg2);
			registers.push_back(&ctrlReg3);
			registers.push_back(&ctrlReg4);
			registers.push_back(&ctrlReg5);
			registers.push_back(&referenceDataCapture);
			registers.push_back(&outTemp);
			registers.push_back(&status);
			registers.push_back(&fifoCtrl);
			registers.push_back(&fifoSrc);
			registers.push_back(&intConfig);
			registers.push_back(&int1Src);
			registers.push_back(&int1ThresholdX);
			registers.push_back(&int1ThresholdY);
			registers.push_back(&int1ThresholdZ);
			registers.push_back(&int1Duration);
			registers.push_back(&outX);
			registers.push_back(&outY);
			registers.push_back(&outZ);
		}
    };
 }  }  } }