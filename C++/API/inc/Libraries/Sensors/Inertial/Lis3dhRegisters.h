/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
#pragma once
#include "SMBusDevice.h"
#include "Libraries/Treehopper.Libraries.h"
#include "Libraries/RegisterManager.h"
#include "Libraries/Register.h"

using namespace Treehopper::Libraries;

namespace Treehopper { namespace Libraries { namespace Sensors { namespace Inertial { 

    enum class SdoPuDiscs
    {
        SdoPullUpDisconnected = 144,
        SdoPullUpConnected = 16
	};

    enum class HighPassFilterModeSelections
    {
        NormalMode = 0,
        ReferenceSignal = 1,
        Normal = 2,
        AutoresetOnInterrupt = 3
	};

    enum class FullScaleSelections
    {
        Scale_2G = 0,
        Scale_4G = 1,
        Scale_8G = 2,
        Scale_16G = 3
	};

    enum class FifoModes
    {
        Bypass = 0,
        Fifo = 1,
        Stream = 2,
        StreamToFifo = 3
	};

    enum class OutputDataRates
    {
        PowerDown = 0,
        Hz_1 = 1,
        Hz_10 = 2,
        Hz_25 = 3,
        Hz_50 = 4,
        Hz_100 = 5,
        Hz_200 = 6,
        Hz_400 = 7,
        Hz_1600 = 8,
        Hz_1344_5376 = 9
	};


    class Lis3dhRegisters : public RegisterManager
    {
    public:
        class StatusRegAuxRegister : public Register
        {
        public:
			StatusRegAuxRegister(RegisterManager& regManager) : Register(regManager,0x07, 1, false) { }
            int oneAxisDataAvailable;
            int twoAxisDataAvailable;
            int threeAxisDataAvailable;
            int dataAvailable;
            int oneAxisDataOverrun;
            int twoAxisDataOverrun;
            int dataOverrun;

            long getValue() { return ((oneAxisDataAvailable & 0x1) << 0) | ((twoAxisDataAvailable & 0x1) << 1) | ((threeAxisDataAvailable & 0x1) << 2) | ((dataAvailable & 0x1) << 3) | ((oneAxisDataOverrun & 0x1) << 4) | ((twoAxisDataOverrun & 0x1) << 5) | ((dataOverrun & 0x1) << 6); }
            void setValue(long val)
            {
                oneAxisDataAvailable = (int)((val >> 0) & 0x1);
                twoAxisDataAvailable = (int)((val >> 1) & 0x1);
                threeAxisDataAvailable = (int)((val >> 2) & 0x1);
                dataAvailable = (int)((val >> 3) & 0x1);
                oneAxisDataOverrun = (int)((val >> 4) & 0x1);
                twoAxisDataOverrun = (int)((val >> 5) & 0x1);
                dataOverrun = (int)((val >> 6) & 0x1);
            }
        };

        class OutAdc1Register : public Register
        {
        public:
			OutAdc1Register(RegisterManager& regManager) : Register(regManager,0x08, 2, false) { }
            int value;

            long getValue() { return ((value & 0x3FF) << 6); }
            void setValue(long val)
            {
                value = (int)((val >> 6) & 0x3FF);
            }
        };

        class OutAdc2Register : public Register
        {
        public:
			OutAdc2Register(RegisterManager& regManager) : Register(regManager,0x0A, 2, false) { }
            int value;

            long getValue() { return ((value & 0x3FF) << 6); }
            void setValue(long val)
            {
                value = (int)((val >> 6) & 0x3FF);
            }
        };

        class OutAdc3Register : public Register
        {
        public:
			OutAdc3Register(RegisterManager& regManager) : Register(regManager,0x0C, 2, false) { }
            int value;

            long getValue() { return ((value & 0x3FF) << 6); }
            void setValue(long val)
            {
                value = (int)((val >> 6) & 0x3FF);
            }
        };

        class WhoAmIRegister : public Register
        {
        public:
			WhoAmIRegister(RegisterManager& regManager) : Register(regManager,0x0f, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class Ctrl0Register : public Register
        {
        public:
			Ctrl0Register(RegisterManager& regManager) : Register(regManager,0x1E, 1, false) { }
            int sdoPuDisc;
            SdoPuDiscs getSdoPuDisc() { return (SdoPuDiscs)sdoPuDisc; }
            void setSdoPuDisc(SdoPuDiscs enumVal) { sdoPuDisc = (int)enumVal; }

            long getValue() { return ((sdoPuDisc & 0xFF) << 0); }
            void setValue(long val)
            {
                sdoPuDisc = (int)((val >> 0) & 0xFF);
            }
        };

        class TempCfgRegRegister : public Register
        {
        public:
			TempCfgRegRegister(RegisterManager& regManager) : Register(regManager,0x1F, 1, false) { }
            int adcEn;
            int tempEn;

            long getValue() { return ((adcEn & 0x1) << 7) | ((tempEn & 0x1) << 6); }
            void setValue(long val)
            {
                adcEn = (int)((val >> 7) & 0x1);
                tempEn = (int)((val >> 6) & 0x1);
            }
        };

        class Ctrl2Register : public Register
        {
        public:
			Ctrl2Register(RegisterManager& regManager) : Register(regManager,0x21, 1, false) { }
            int highPassAoiInt1Enable;
            int highPassAoiInt2Enable;
            int highPassClickEnable;
            int filterDataPassThru;
            int highPassFilterCutoffFrequency;
            int highPassFilterModeSelection;
            HighPassFilterModeSelections getHighPassFilterModeSelection() { return (HighPassFilterModeSelections)highPassFilterModeSelection; }
            void setHighPassFilterModeSelection(HighPassFilterModeSelections enumVal) { highPassFilterModeSelection = (int)enumVal; }

            long getValue() { return ((highPassAoiInt1Enable & 0x1) << 0) | ((highPassAoiInt2Enable & 0x1) << 1) | ((highPassClickEnable & 0x1) << 2) | ((filterDataPassThru & 0x1) << 3) | ((highPassFilterCutoffFrequency & 0x3) << 4) | ((highPassFilterModeSelection & 0x3) << 6); }
            void setValue(long val)
            {
                highPassAoiInt1Enable = (int)((val >> 0) & 0x1);
                highPassAoiInt2Enable = (int)((val >> 1) & 0x1);
                highPassClickEnable = (int)((val >> 2) & 0x1);
                filterDataPassThru = (int)((val >> 3) & 0x1);
                highPassFilterCutoffFrequency = (int)((val >> 4) & 0x3);
                highPassFilterModeSelection = (int)((val >> 6) & 0x3);
            }
        };

        class Ctrl3Register : public Register
        {
        public:
			Ctrl3Register(RegisterManager& regManager) : Register(regManager,0x22, 1, false) { }
            int overrun;
            int fifoWatermark;
            int da321;
            int zyxda;
            int ia2;
            int ia1;
            int click;

            long getValue() { return ((overrun & 0x1) << 1) | ((fifoWatermark & 0x1) << 2) | ((da321 & 0x1) << 3) | ((zyxda & 0x1) << 4) | ((ia2 & 0x1) << 5) | ((ia1 & 0x1) << 6) | ((click & 0x1) << 7); }
            void setValue(long val)
            {
                overrun = (int)((val >> 1) & 0x1);
                fifoWatermark = (int)((val >> 2) & 0x1);
                da321 = (int)((val >> 3) & 0x1);
                zyxda = (int)((val >> 4) & 0x1);
                ia2 = (int)((val >> 5) & 0x1);
                ia1 = (int)((val >> 6) & 0x1);
                click = (int)((val >> 7) & 0x1);
            }
        };

        class Ctrl4Register : public Register
        {
        public:
			Ctrl4Register(RegisterManager& regManager) : Register(regManager,0x23, 1, false) { }
            int spiInterfaceMode;
            int selfTestEnable;
            int highResolutionOutput;
            int fullScaleSelection;
            int bigEndian;
            int blockDataUpdate;
            FullScaleSelections getFullScaleSelection() { return (FullScaleSelections)fullScaleSelection; }
            void setFullScaleSelection(FullScaleSelections enumVal) { fullScaleSelection = (int)enumVal; }

            long getValue() { return ((spiInterfaceMode & 0x1) << 0) | ((selfTestEnable & 0x3) << 1) | ((highResolutionOutput & 0x1) << 3) | ((fullScaleSelection & 0x3) << 4) | ((bigEndian & 0x1) << 6) | ((blockDataUpdate & 0x1) << 7); }
            void setValue(long val)
            {
                spiInterfaceMode = (int)((val >> 0) & 0x1);
                selfTestEnable = (int)((val >> 1) & 0x3);
                highResolutionOutput = (int)((val >> 3) & 0x1);
                fullScaleSelection = (int)((val >> 4) & 0x3);
                bigEndian = (int)((val >> 6) & 0x1);
                blockDataUpdate = (int)((val >> 7) & 0x1);
            }
        };

        class Ctrl5Register : public Register
        {
        public:
			Ctrl5Register(RegisterManager& regManager) : Register(regManager,0x24, 1, false) { }
            int enable4DInt2;
            int latchInt2;
            int enable4DInt1;
            int latchInt1;
            int fifoEnable;
            int rebootMemoryContent;

            long getValue() { return ((enable4DInt2 & 0x1) << 0) | ((latchInt2 & 0x1) << 1) | ((enable4DInt1 & 0x1) << 2) | ((latchInt1 & 0x1) << 3) | ((fifoEnable & 0x1) << 4) | ((rebootMemoryContent & 0x1) << 5); }
            void setValue(long val)
            {
                enable4DInt2 = (int)((val >> 0) & 0x1);
                latchInt2 = (int)((val >> 1) & 0x1);
                enable4DInt1 = (int)((val >> 2) & 0x1);
                latchInt1 = (int)((val >> 3) & 0x1);
                fifoEnable = (int)((val >> 4) & 0x1);
                rebootMemoryContent = (int)((val >> 5) & 0x1);
            }
        };

        class Ctrl6Register : public Register
        {
        public:
			Ctrl6Register(RegisterManager& regManager) : Register(regManager,0x25, 1, false) { }
            int intPolarity;
            int act;
            int boot;
            int ia2;
            int ia1;
            int click;

            long getValue() { return ((intPolarity & 0x1) << 1) | ((act & 0x1) << 3) | ((boot & 0x1) << 4) | ((ia2 & 0x1) << 5) | ((ia1 & 0x1) << 6) | ((click & 0x1) << 7); }
            void setValue(long val)
            {
                intPolarity = (int)((val >> 1) & 0x1);
                act = (int)((val >> 3) & 0x1);
                boot = (int)((val >> 4) & 0x1);
                ia2 = (int)((val >> 5) & 0x1);
                ia1 = (int)((val >> 6) & 0x1);
                click = (int)((val >> 7) & 0x1);
            }
        };

        class ReferenceRegister : public Register
        {
        public:
			ReferenceRegister(RegisterManager& regManager) : Register(regManager,0x26, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class StatusRegister : public Register
        {
        public:
			StatusRegister(RegisterManager& regManager) : Register(regManager,0x27, 1, false) { }
            int xda;
            int yda;
            int zda;
            int zyxda;
            int x_or;
            int y_or;
            int z_or;
            int zyx_or;

            long getValue() { return ((xda & 0x1) << 0) | ((yda & 0x1) << 1) | ((zda & 0x1) << 2) | ((zyxda & 0x1) << 3) | ((x_or & 0x1) << 4) | ((y_or & 0x1) << 5) | ((z_or & 0x1) << 6) | ((zyx_or & 0x1) << 7); }
            void setValue(long val)
            {
                xda = (int)((val >> 0) & 0x1);
                yda = (int)((val >> 1) & 0x1);
                zda = (int)((val >> 2) & 0x1);
                zyxda = (int)((val >> 3) & 0x1);
                x_or = (int)((val >> 4) & 0x1);
                y_or = (int)((val >> 5) & 0x1);
                z_or = (int)((val >> 6) & 0x1);
                zyx_or = (int)((val >> 7) & 0x1);
            }
        };

        class FifoCtrlRegister : public Register
        {
        public:
			FifoCtrlRegister(RegisterManager& regManager) : Register(regManager,0x2E, 1, false) { }
            int fifoThreshold;
            int triggerSelection;
            int fifoMode;
            FifoModes getFifoMode() { return (FifoModes)fifoMode; }
            void setFifoMode(FifoModes enumVal) { fifoMode = (int)enumVal; }

            long getValue() { return ((fifoThreshold & 0x1F) << 0) | ((triggerSelection & 0x1) << 5) | ((fifoMode & 0x3) << 6); }
            void setValue(long val)
            {
                fifoThreshold = (int)((val >> 0) & 0x1F);
                triggerSelection = (int)((val >> 5) & 0x1);
                fifoMode = (int)((val >> 6) & 0x3);
            }
        };

        class FifoSrcRegister : public Register
        {
        public:
			FifoSrcRegister(RegisterManager& regManager) : Register(regManager,0x2F, 1, false) { }
            int fss;
            int emtpy;
            int overrunFifo;
            int watermark;

            long getValue() { return ((fss & 0x1F) << 0) | ((emtpy & 0x1) << 5) | ((overrunFifo & 0x1) << 6) | ((watermark & 0x1) << 7); }
            void setValue(long val)
            {
                fss = (int)((val >> 0) & 0x1F);
                emtpy = (int)((val >> 5) & 0x1);
                overrunFifo = (int)((val >> 6) & 0x1);
                watermark = (int)((val >> 7) & 0x1);
            }
        };

        class Int1CfgRegister : public Register
        {
        public:
			Int1CfgRegister(RegisterManager& regManager) : Register(regManager,0x30, 1, false) { }
            int enableXLowEvent;
            int enableXHighEvent;
            int enableYLowEvent;
            int enableYHighEvent;
            int enableZLowEvent;
            int enableZHighEvent;
            int enable6D;
            int andOrInterruptEvents;

            long getValue() { return ((enableXLowEvent & 0x1) << 0) | ((enableXHighEvent & 0x1) << 1) | ((enableYLowEvent & 0x1) << 2) | ((enableYHighEvent & 0x1) << 3) | ((enableZLowEvent & 0x1) << 4) | ((enableZHighEvent & 0x1) << 5) | ((enable6D & 0x1) << 6) | ((andOrInterruptEvents & 0x1) << 7); }
            void setValue(long val)
            {
                enableXLowEvent = (int)((val >> 0) & 0x1);
                enableXHighEvent = (int)((val >> 1) & 0x1);
                enableYLowEvent = (int)((val >> 2) & 0x1);
                enableYHighEvent = (int)((val >> 3) & 0x1);
                enableZLowEvent = (int)((val >> 4) & 0x1);
                enableZHighEvent = (int)((val >> 5) & 0x1);
                enable6D = (int)((val >> 6) & 0x1);
                andOrInterruptEvents = (int)((val >> 7) & 0x1);
            }
        };

        class Int1SrcRegister : public Register
        {
        public:
			Int1SrcRegister(RegisterManager& regManager) : Register(regManager,0x31, 1, false) { }
            int xLow;
            int xHigh;
            int yLow;
            int yHigh;
            int zLow;
            int zHigh;
            int interruptActive;

            long getValue() { return ((xLow & 0x1) << 0) | ((xHigh & 0x1) << 1) | ((yLow & 0x1) << 2) | ((yHigh & 0x1) << 3) | ((zLow & 0x1) << 4) | ((zHigh & 0x1) << 5) | ((interruptActive & 0x1) << 6); }
            void setValue(long val)
            {
                xLow = (int)((val >> 0) & 0x1);
                xHigh = (int)((val >> 1) & 0x1);
                yLow = (int)((val >> 2) & 0x1);
                yHigh = (int)((val >> 3) & 0x1);
                zLow = (int)((val >> 4) & 0x1);
                zHigh = (int)((val >> 5) & 0x1);
                interruptActive = (int)((val >> 6) & 0x1);
            }
        };

        class Int1ThresholdRegister : public Register
        {
        public:
			Int1ThresholdRegister(RegisterManager& regManager) : Register(regManager,0x32, 1, false) { }
            int value;

            long getValue() { return ((value & 0x7F) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0x7F);
            }
        };

        class Int1DurationRegister : public Register
        {
        public:
			Int1DurationRegister(RegisterManager& regManager) : Register(regManager,0x33, 1, false) { }
            int value;

            long getValue() { return ((value & 0x7F) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0x7F);
            }
        };

        class Int2CfgRegister : public Register
        {
        public:
			Int2CfgRegister(RegisterManager& regManager) : Register(regManager,0x34, 1, false) { }
            int enableXLowEvent;
            int enableXHighEvent;
            int enableYLowEvent;
            int enableYHighEvent;
            int enableZLowEvent;
            int enableZHighEvent;
            int enable6D;
            int andOrInterruptEvents;

            long getValue() { return ((enableXLowEvent & 0x1) << 0) | ((enableXHighEvent & 0x1) << 1) | ((enableYLowEvent & 0x1) << 2) | ((enableYHighEvent & 0x1) << 3) | ((enableZLowEvent & 0x1) << 4) | ((enableZHighEvent & 0x1) << 5) | ((enable6D & 0x1) << 6) | ((andOrInterruptEvents & 0x1) << 7); }
            void setValue(long val)
            {
                enableXLowEvent = (int)((val >> 0) & 0x1);
                enableXHighEvent = (int)((val >> 1) & 0x1);
                enableYLowEvent = (int)((val >> 2) & 0x1);
                enableYHighEvent = (int)((val >> 3) & 0x1);
                enableZLowEvent = (int)((val >> 4) & 0x1);
                enableZHighEvent = (int)((val >> 5) & 0x1);
                enable6D = (int)((val >> 6) & 0x1);
                andOrInterruptEvents = (int)((val >> 7) & 0x1);
            }
        };

        class Int2SrcRegister : public Register
        {
        public:
			Int2SrcRegister(RegisterManager& regManager) : Register(regManager,0x35, 1, false) { }
            int xLow;
            int xHigh;
            int yLow;
            int yHigh;
            int zLow;
            int zHigh;
            int interruptActive;

            long getValue() { return ((xLow & 0x1) << 0) | ((xHigh & 0x1) << 1) | ((yLow & 0x1) << 2) | ((yHigh & 0x1) << 3) | ((zLow & 0x1) << 4) | ((zHigh & 0x1) << 5) | ((interruptActive & 0x1) << 6); }
            void setValue(long val)
            {
                xLow = (int)((val >> 0) & 0x1);
                xHigh = (int)((val >> 1) & 0x1);
                yLow = (int)((val >> 2) & 0x1);
                yHigh = (int)((val >> 3) & 0x1);
                zLow = (int)((val >> 4) & 0x1);
                zHigh = (int)((val >> 5) & 0x1);
                interruptActive = (int)((val >> 6) & 0x1);
            }
        };

        class Int2ThresholdRegister : public Register
        {
        public:
			Int2ThresholdRegister(RegisterManager& regManager) : Register(regManager,0x36, 1, false) { }
            int value;

            long getValue() { return ((value & 0x7F) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0x7F);
            }
        };

        class Int2DurationRegister : public Register
        {
        public:
			Int2DurationRegister(RegisterManager& regManager) : Register(regManager,0x37, 1, false) { }
            int value;

            long getValue() { return ((value & 0x7F) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0x7F);
            }
        };

        class ClickSourceRegister : public Register
        {
        public:
			ClickSourceRegister(RegisterManager& regManager) : Register(regManager,0x39, 1, false) { }
            int x;
            int y;
            int z;
            int sign;
            int singleClickEnable;
            int doubleClickEnable;
            int interruptActive;

            long getValue() { return ((x & 0x1) << 0) | ((y & 0x1) << 1) | ((z & 0x1) << 2) | ((sign & 0x1) << 3) | ((singleClickEnable & 0x1) << 4) | ((doubleClickEnable & 0x1) << 5) | ((interruptActive & 0x1) << 6); }
            void setValue(long val)
            {
                x = (int)((val >> 0) & 0x1);
                y = (int)((val >> 1) & 0x1);
                z = (int)((val >> 2) & 0x1);
                sign = (int)((val >> 3) & 0x1);
                singleClickEnable = (int)((val >> 4) & 0x1);
                doubleClickEnable = (int)((val >> 5) & 0x1);
                interruptActive = (int)((val >> 6) & 0x1);
            }
        };

        class ClickThresholdRegister : public Register
        {
        public:
			ClickThresholdRegister(RegisterManager& regManager) : Register(regManager,0x3A, 1, false) { }
            int threshold;
            int lirClick;

            long getValue() { return ((threshold & 0x7F) << 0) | ((lirClick & 0x1) << 7); }
            void setValue(long val)
            {
                threshold = (int)((val >> 0) & 0x7F);
                lirClick = (int)((val >> 7) & 0x1);
            }
        };

        class TimeLimitRegister : public Register
        {
        public:
			TimeLimitRegister(RegisterManager& regManager) : Register(regManager,0x3B, 1, false) { }
            int value;

            long getValue() { return ((value & 0x7F) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0x7F);
            }
        };

        class TimeLatencyRegister : public Register
        {
        public:
			TimeLatencyRegister(RegisterManager& regManager) : Register(regManager,0x3C, 10, false) { }
            int value;

            long getValue() { return ((value & 0x7FFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0x7FFF);
            }
        };

        class TimeWindowRegister : public Register
        {
        public:
			TimeWindowRegister(RegisterManager& regManager) : Register(regManager,0x3D, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class ActivationThresholdRegister : public Register
        {
        public:
			ActivationThresholdRegister(RegisterManager& regManager) : Register(regManager,0x3E, 1, false) { }
            int value;

            long getValue() { return ((value & 0x7F) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0x7F);
            }
        };

        class ActivationDurationRegister : public Register
        {
        public:
			ActivationDurationRegister(RegisterManager& regManager) : Register(regManager,0x3F, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class Ctrl1Register : public Register
        {
        public:
			Ctrl1Register(RegisterManager& regManager) : Register(regManager,0xA0, 1, false) { }
            int xAxisEnable;
            int yAxisEnable;
            int zAxisEnable;
            int lowPowerEnable;
            int outputDataRate;
            OutputDataRates getOutputDataRate() { return (OutputDataRates)outputDataRate; }
            void setOutputDataRate(OutputDataRates enumVal) { outputDataRate = (int)enumVal; }

            long getValue() { return ((xAxisEnable & 0x1) << 0) | ((yAxisEnable & 0x1) << 1) | ((zAxisEnable & 0x1) << 2) | ((lowPowerEnable & 0x1) << 3) | ((outputDataRate & 0xF) << 4); }
            void setValue(long val)
            {
                xAxisEnable = (int)((val >> 0) & 0x1);
                yAxisEnable = (int)((val >> 1) & 0x1);
                zAxisEnable = (int)((val >> 2) & 0x1);
                lowPowerEnable = (int)((val >> 3) & 0x1);
                outputDataRate = (int)((val >> 4) & 0xF);
            }
        };

        class OutXRegister : public Register
        {
        public:
			OutXRegister(RegisterManager& regManager) : Register(regManager,0xA8, 2, false) { }
            int value;

            long getValue() { return ((value & 0x3FF) << 6); }
            void setValue(long val)
            {
                value = (int)(((val >> 6) & 0x3FF) << (32 - 10)) >> (32 - 10);
            }
        };

        class OutYRegister : public Register
        {
        public:
			OutYRegister(RegisterManager& regManager) : Register(regManager,0xAA, 2, false) { }
            int value;

            long getValue() { return ((value & 0x3FF) << 6); }
            void setValue(long val)
            {
                value = (int)(((val >> 6) & 0x3FF) << (32 - 10)) >> (32 - 10);
            }
        };

        class OutZRegister : public Register
        {
        public:
			OutZRegister(RegisterManager& regManager) : Register(regManager,0xAC, 2, false) { }
            int value;

            long getValue() { return ((value & 0x3FF) << 6); }
            void setValue(long val)
            {
                value = (int)(((val >> 6) & 0x3FF) << (32 - 10)) >> (32 - 10);
            }
        };

            StatusRegAuxRegister statusRegAux;
            OutAdc1Register outAdc1;
            OutAdc2Register outAdc2;
            OutAdc3Register outAdc3;
            WhoAmIRegister whoAmI;
            Ctrl0Register ctrl0;
            TempCfgRegRegister tempCfgReg;
            Ctrl2Register ctrl2;
            Ctrl3Register ctrl3;
            Ctrl4Register ctrl4;
            Ctrl5Register ctrl5;
            Ctrl6Register ctrl6;
            ReferenceRegister reference;
            StatusRegister status;
            FifoCtrlRegister fifoCtrl;
            FifoSrcRegister fifoSrc;
            Int1CfgRegister int1Cfg;
            Int1SrcRegister int1Src;
            Int1ThresholdRegister int1Threshold;
            Int1DurationRegister int1Duration;
            Int2CfgRegister int2Cfg;
            Int2SrcRegister int2Src;
            Int2ThresholdRegister int2Threshold;
            Int2DurationRegister int2Duration;
            ClickSourceRegister clickSource;
            ClickThresholdRegister clickThreshold;
            TimeLimitRegister timeLimit;
            TimeLatencyRegister timeLatency;
            TimeWindowRegister timeWindow;
            ActivationThresholdRegister activationThreshold;
            ActivationDurationRegister activationDuration;
            Ctrl1Register ctrl1;
            OutXRegister outX;
            OutYRegister outY;
            OutZRegister outZ;

		Lis3dhRegisters(SMBusDevice& device) : RegisterManager(device, true), statusRegAux(*this), outAdc1(*this), outAdc2(*this), outAdc3(*this), whoAmI(*this), ctrl0(*this), tempCfgReg(*this), ctrl2(*this), ctrl3(*this), ctrl4(*this), ctrl5(*this), ctrl6(*this), reference(*this), status(*this), fifoCtrl(*this), fifoSrc(*this), int1Cfg(*this), int1Src(*this), int1Threshold(*this), int1Duration(*this), int2Cfg(*this), int2Src(*this), int2Threshold(*this), int2Duration(*this), clickSource(*this), clickThreshold(*this), timeLimit(*this), timeLatency(*this), timeWindow(*this), activationThreshold(*this), activationDuration(*this), ctrl1(*this), outX(*this), outY(*this), outZ(*this)
		{ 
			registers.push_back(&statusRegAux);
			registers.push_back(&outAdc1);
			registers.push_back(&outAdc2);
			registers.push_back(&outAdc3);
			registers.push_back(&whoAmI);
			registers.push_back(&ctrl0);
			registers.push_back(&tempCfgReg);
			registers.push_back(&ctrl2);
			registers.push_back(&ctrl3);
			registers.push_back(&ctrl4);
			registers.push_back(&ctrl5);
			registers.push_back(&ctrl6);
			registers.push_back(&reference);
			registers.push_back(&status);
			registers.push_back(&fifoCtrl);
			registers.push_back(&fifoSrc);
			registers.push_back(&int1Cfg);
			registers.push_back(&int1Src);
			registers.push_back(&int1Threshold);
			registers.push_back(&int1Duration);
			registers.push_back(&int2Cfg);
			registers.push_back(&int2Src);
			registers.push_back(&int2Threshold);
			registers.push_back(&int2Duration);
			registers.push_back(&clickSource);
			registers.push_back(&clickThreshold);
			registers.push_back(&timeLimit);
			registers.push_back(&timeLatency);
			registers.push_back(&timeWindow);
			registers.push_back(&activationThreshold);
			registers.push_back(&activationDuration);
			registers.push_back(&ctrl1);
			registers.push_back(&outX);
			registers.push_back(&outY);
			registers.push_back(&outZ);
		}
    };
 }  }  } }