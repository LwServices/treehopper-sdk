/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
#pragma once
#include "SMBusDevice.h"
#include "Treehopper.Libraries.h"
#include "RegisterManager.h"
#include "Register.h"

using namespace Treehopper::Libraries;

namespace Treehopper { namespace Libraries { namespace Sensors { namespace Inertial { 


    class Itg3205Registers : public RegisterManager
    {
    public:
        class WhoAmIRegister : public Register
        {
        public:
			WhoAmIRegister(RegisterManager& regManager) : Register(regManager,0x00, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class SmplrtDivRegister : public Register
        {
        public:
			SmplrtDivRegister(RegisterManager& regManager) : Register(regManager,0x15, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class DlpfFsRegister : public Register
        {
        public:
			DlpfFsRegister(RegisterManager& regManager) : Register(regManager,0x16, 1, false) { }
            int dlpfCfg;
            int fsSel;

            long getValue() { return ((dlpfCfg & 0x7) << 0) | ((fsSel & 0x3) << 3); }
            void setValue(long val)
            {
                dlpfCfg = (int)((val >> 0) & 0x7);
                fsSel = (int)((val >> 3) & 0x3);
            }
        };

        class IntCfgRegister : public Register
        {
        public:
			IntCfgRegister(RegisterManager& regManager) : Register(regManager,0x17, 1, false) { }
            int rawRdyEn;
            int itgRdyEn;
            int intAnyrd2Clear;
            int latchIntEn;
            int open;
            int actl;

            long getValue() { return ((rawRdyEn & 0x1) << 0) | ((itgRdyEn & 0x1) << 2) | ((intAnyrd2Clear & 0x1) << 4) | ((latchIntEn & 0x1) << 5) | ((open & 0x1) << 6) | ((actl & 0x1) << 7); }
            void setValue(long val)
            {
                rawRdyEn = (int)((val >> 0) & 0x1);
                itgRdyEn = (int)((val >> 2) & 0x1);
                intAnyrd2Clear = (int)((val >> 4) & 0x1);
                latchIntEn = (int)((val >> 5) & 0x1);
                open = (int)((val >> 6) & 0x1);
                actl = (int)((val >> 7) & 0x1);
            }
        };

        class IntStatusRegister : public Register
        {
        public:
			IntStatusRegister(RegisterManager& regManager) : Register(regManager,0x1a, 1, false) { }
            int rawDataReady;
            int itgReady;

            long getValue() { return ((rawDataReady & 0x1) << 0) | ((itgReady & 0x1) << 2); }
            void setValue(long val)
            {
                rawDataReady = (int)((val >> 0) & 0x1);
                itgReady = (int)((val >> 2) & 0x1);
            }
        };

        class TempRegister : public Register
        {
        public:
			TempRegister(RegisterManager& regManager) : Register(regManager,0x1b, 2, true) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class GyroXRegister : public Register
        {
        public:
			GyroXRegister(RegisterManager& regManager) : Register(regManager,0x1d, 2, true) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class GyroYRegister : public Register
        {
        public:
			GyroYRegister(RegisterManager& regManager) : Register(regManager,0x1f, 2, true) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class GyroZRegister : public Register
        {
        public:
			GyroZRegister(RegisterManager& regManager) : Register(regManager,0x21, 2, true) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class PwrMgmRegister : public Register
        {
        public:
			PwrMgmRegister(RegisterManager& regManager) : Register(regManager,0x3e, 1, false) { }
            int clkSel;
            int stbyZg;
            int stbyYg;
            int stbyXg;
            int sleep;
            int hReset;

            long getValue() { return ((clkSel & 0x7) << 0) | ((stbyZg & 0x1) << 3) | ((stbyYg & 0x1) << 4) | ((stbyXg & 0x1) << 5) | ((sleep & 0x1) << 6) | ((hReset & 0x1) << 7); }
            void setValue(long val)
            {
                clkSel = (int)((val >> 0) & 0x7);
                stbyZg = (int)((val >> 3) & 0x1);
                stbyYg = (int)((val >> 4) & 0x1);
                stbyXg = (int)((val >> 5) & 0x1);
                sleep = (int)((val >> 6) & 0x1);
                hReset = (int)((val >> 7) & 0x1);
            }
        };

            WhoAmIRegister whoAmI;
            SmplrtDivRegister smplrtDiv;
            DlpfFsRegister dlpfFs;
            IntCfgRegister intCfg;
            IntStatusRegister intStatus;
            TempRegister temp;
            GyroXRegister gyroX;
            GyroYRegister gyroY;
            GyroZRegister gyroZ;
            PwrMgmRegister pwrMgm;

		Itg3205Registers(SMBusDevice& device) : RegisterManager(device, true), whoAmI(*this), smplrtDiv(*this), dlpfFs(*this), intCfg(*this), intStatus(*this), temp(*this), gyroX(*this), gyroY(*this), gyroZ(*this), pwrMgm(*this)
		{ 
			registers.push_back(&whoAmI);
			registers.push_back(&smplrtDiv);
			registers.push_back(&dlpfFs);
			registers.push_back(&intCfg);
			registers.push_back(&intStatus);
			registers.push_back(&temp);
			registers.push_back(&gyroX);
			registers.push_back(&gyroY);
			registers.push_back(&gyroZ);
			registers.push_back(&pwrMgm);
		}
    };
 }  }  } }