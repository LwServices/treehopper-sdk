/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
#pragma once
#include "SMBusDevice.h"
#include "Treehopper.Libraries.h"
#include "RegisterManager.h"
#include "Register.h"

using namespace Treehopper::Libraries;

namespace Treehopper { namespace Libraries { namespace Sensors { namespace Pressure { 

    enum class Oversamplings
    {
        Skipped = 0,
        Oversampling_x1 = 1,
        Oversampling_x2 = 2,
        Oversampling_x4 = 3,
        Oversampling_x8 = 4,
        Oversampling_x16 = 5
	};

    enum class Modes
    {
        Sleep = 0,
        Forced = 1,
        Normal = 3
	};

    enum class OversamplingPressures
    {
        Skipped = 0,
        Oversampling_x1 = 1,
        Oversampling_x2 = 2,
        Oversampling_x4 = 3,
        Oversampling_x8 = 4,
        Oversampling_x16 = 5
	};

    enum class OversamplingTemperatures
    {
        Skipped = 0,
        Oversampling_x1 = 1,
        Oversampling_x2 = 2,
        Oversampling_x4 = 3,
        Oversampling_x8 = 4,
        Oversampling_x16 = 5
	};

    enum class Filters
    {
        FilterOff = 0,
        Filter2 = 1,
        Filter4 = 2,
        Filter8 = 3,
        Filter16 = 4
	};

    enum class TStandbies
    {
        Ms_0_5 = 0,
        Ms_62_5 = 1,
        Ms_125 = 2,
        Ms_250 = 3,
        Ms_500 = 4,
        Ms_1000 = 5,
        Ms_10 = 6,
        Ms_20 = 7
	};


    class Bmp280Registers : public RegisterManager
    {
    public:
        class T1Register : public Register
        {
        public:
			T1Register(RegisterManager& regManager) : Register(regManager,0x88, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class T2Register : public Register
        {
        public:
			T2Register(RegisterManager& regManager) : Register(regManager,0x8a, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class T3Register : public Register
        {
        public:
			T3Register(RegisterManager& regManager) : Register(regManager,0x8c, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class P1Register : public Register
        {
        public:
			P1Register(RegisterManager& regManager) : Register(regManager,0x8e, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class P2Register : public Register
        {
        public:
			P2Register(RegisterManager& regManager) : Register(regManager,0x90, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class P3Register : public Register
        {
        public:
			P3Register(RegisterManager& regManager) : Register(regManager,0x92, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class P4Register : public Register
        {
        public:
			P4Register(RegisterManager& regManager) : Register(regManager,0x94, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class P5Register : public Register
        {
        public:
			P5Register(RegisterManager& regManager) : Register(regManager,0x96, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class P6Register : public Register
        {
        public:
			P6Register(RegisterManager& regManager) : Register(regManager,0x98, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class P7Register : public Register
        {
        public:
			P7Register(RegisterManager& regManager) : Register(regManager,0x9a, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class P8Register : public Register
        {
        public:
			P8Register(RegisterManager& regManager) : Register(regManager,0x9c, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class P9Register : public Register
        {
        public:
			P9Register(RegisterManager& regManager) : Register(regManager,0x9e, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class H1Register : public Register
        {
        public:
			H1Register(RegisterManager& regManager) : Register(regManager,0xa1, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class IdRegister : public Register
        {
        public:
			IdRegister(RegisterManager& regManager) : Register(regManager,0xd0, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class ResetRegister : public Register
        {
        public:
			ResetRegister(RegisterManager& regManager) : Register(regManager,0xe0, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class H2Register : public Register
        {
        public:
			H2Register(RegisterManager& regManager) : Register(regManager,0xe1, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class H3Register : public Register
        {
        public:
			H3Register(RegisterManager& regManager) : Register(regManager,0xe3, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class H4Register : public Register
        {
        public:
			H4Register(RegisterManager& regManager) : Register(regManager,0xe4, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class H4h5Register : public Register
        {
        public:
			H4h5Register(RegisterManager& regManager) : Register(regManager,0xe5, 1, false) { }
            int h4Low;
            int h5Low;

            long getValue() { return ((h4Low & 0xF) << 0) | ((h5Low & 0xF) << 4); }
            void setValue(long val)
            {
                h4Low = (int)((val >> 0) & 0xF);
                h5Low = (int)((val >> 4) & 0xF);
            }
        };

        class H5Register : public Register
        {
        public:
			H5Register(RegisterManager& regManager) : Register(regManager,0xe6, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class H6Register : public Register
        {
        public:
			H6Register(RegisterManager& regManager) : Register(regManager,0xe7, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFF) << (32 - 8)) >> (32 - 8);
            }
        };

        class CtrlHumidityRegister : public Register
        {
        public:
			CtrlHumidityRegister(RegisterManager& regManager) : Register(regManager,0xf2, 1, false) { }
            int oversampling;
            Oversamplings getOversampling() { return (Oversamplings)oversampling; }
            void setOversampling(Oversamplings enumVal) { oversampling = (int)enumVal; }

            long getValue() { return ((oversampling & 0x7) << 0); }
            void setValue(long val)
            {
                oversampling = (int)((val >> 0) & 0x7);
            }
        };

        class StatusRegister : public Register
        {
        public:
			StatusRegister(RegisterManager& regManager) : Register(regManager,0xf3, 1, false) { }
            int imUpdate;
            int measuring;

            long getValue() { return ((imUpdate & 0x1) << 0) | ((measuring & 0x1) << 3); }
            void setValue(long val)
            {
                imUpdate = (int)((val >> 0) & 0x1);
                measuring = (int)((val >> 3) & 0x1);
            }
        };

        class CtrlMeasureRegister : public Register
        {
        public:
			CtrlMeasureRegister(RegisterManager& regManager) : Register(regManager,0xf4, 1, false) { }
            int mode;
            int oversamplingPressure;
            int oversamplingTemperature;
            Modes getMode() { return (Modes)mode; }
            void setMode(Modes enumVal) { mode = (int)enumVal; }
            OversamplingPressures getOversamplingPressure() { return (OversamplingPressures)oversamplingPressure; }
            void setOversamplingPressure(OversamplingPressures enumVal) { oversamplingPressure = (int)enumVal; }
            OversamplingTemperatures getOversamplingTemperature() { return (OversamplingTemperatures)oversamplingTemperature; }
            void setOversamplingTemperature(OversamplingTemperatures enumVal) { oversamplingTemperature = (int)enumVal; }

            long getValue() { return ((mode & 0x3) << 0) | ((oversamplingPressure & 0x7) << 2) | ((oversamplingTemperature & 0x7) << 5); }
            void setValue(long val)
            {
                mode = (int)((val >> 0) & 0x3);
                oversamplingPressure = (int)((val >> 2) & 0x7);
                oversamplingTemperature = (int)((val >> 5) & 0x7);
            }
        };

        class ConfigRegister : public Register
        {
        public:
			ConfigRegister(RegisterManager& regManager) : Register(regManager,0xf5, 1, false) { }
            int enable3Wire;
            int filter;
            int tStandby;
            Filters getFilter() { return (Filters)filter; }
            void setFilter(Filters enumVal) { filter = (int)enumVal; }
            TStandbies getTStandby() { return (TStandbies)tStandby; }
            void setTStandby(TStandbies enumVal) { tStandby = (int)enumVal; }

            long getValue() { return ((enable3Wire & 0x1) << 0) | ((filter & 0x7) << 1) | ((tStandby & 0x7) << 4); }
            void setValue(long val)
            {
                enable3Wire = (int)((val >> 0) & 0x1);
                filter = (int)((val >> 1) & 0x7);
                tStandby = (int)((val >> 4) & 0x7);
            }
        };

        class PressureRegister : public Register
        {
        public:
			PressureRegister(RegisterManager& regManager) : Register(regManager,0xf7, 3, true) { }
            int value;

            long getValue() { return ((value & 0xFFFFF) << 4); }
            void setValue(long val)
            {
                value = (int)((val >> 4) & 0xFFFFF);
            }
        };

        class TemperatureRegister : public Register
        {
        public:
			TemperatureRegister(RegisterManager& regManager) : Register(regManager,0xfa, 3, true) { }
            int value;

            long getValue() { return ((value & 0xFFFFF) << 4); }
            void setValue(long val)
            {
                value = (int)((val >> 4) & 0xFFFFF);
            }
        };

        class HumidityRegister : public Register
        {
        public:
			HumidityRegister(RegisterManager& regManager) : Register(regManager,0xfd, 2, true) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

            T1Register t1;
            T2Register t2;
            T3Register t3;
            P1Register p1;
            P2Register p2;
            P3Register p3;
            P4Register p4;
            P5Register p5;
            P6Register p6;
            P7Register p7;
            P8Register p8;
            P9Register p9;
            H1Register h1;
            IdRegister id;
            ResetRegister reset;
            H2Register h2;
            H3Register h3;
            H4Register h4;
            H4h5Register h4h5;
            H5Register h5;
            H6Register h6;
            CtrlHumidityRegister ctrlHumidity;
            StatusRegister status;
            CtrlMeasureRegister ctrlMeasure;
            ConfigRegister config;
            PressureRegister pressure;
            TemperatureRegister temperature;
            HumidityRegister humidity;

		Bmp280Registers(SMBusDevice& device) : RegisterManager(device, true), t1(*this), t2(*this), t3(*this), p1(*this), p2(*this), p3(*this), p4(*this), p5(*this), p6(*this), p7(*this), p8(*this), p9(*this), h1(*this), id(*this), reset(*this), h2(*this), h3(*this), h4(*this), h4h5(*this), h5(*this), h6(*this), ctrlHumidity(*this), status(*this), ctrlMeasure(*this), config(*this), pressure(*this), temperature(*this), humidity(*this)
		{ 
			registers.push_back(&t1);
			registers.push_back(&t2);
			registers.push_back(&t3);
			registers.push_back(&p1);
			registers.push_back(&p2);
			registers.push_back(&p3);
			registers.push_back(&p4);
			registers.push_back(&p5);
			registers.push_back(&p6);
			registers.push_back(&p7);
			registers.push_back(&p8);
			registers.push_back(&p9);
			registers.push_back(&h1);
			registers.push_back(&id);
			registers.push_back(&reset);
			registers.push_back(&h2);
			registers.push_back(&h3);
			registers.push_back(&h4);
			registers.push_back(&h4h5);
			registers.push_back(&h5);
			registers.push_back(&h6);
			registers.push_back(&ctrlHumidity);
			registers.push_back(&status);
			registers.push_back(&ctrlMeasure);
			registers.push_back(&config);
			registers.push_back(&pressure);
			registers.push_back(&temperature);
			registers.push_back(&humidity);
		}
    };
 }  }  } }