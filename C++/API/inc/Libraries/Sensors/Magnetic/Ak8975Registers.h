/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
#pragma once
#include "SMBusDevice.h"
#include "Libraries/Treehopper.Libraries.h"
#include "Libraries/RegisterManager.h"
#include "Libraries/Register.h"

using namespace Treehopper::Libraries;

namespace Treehopper { namespace Libraries { namespace Sensors { namespace Magnetic { 


    class Ak8975Registers : public RegisterManager
    {
    public:
        class WiaRegister : public Register
        {
        public:
			WiaRegister(RegisterManager& regManager) : Register(regManager,0x00, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class InfoRegister : public Register
        {
        public:
			InfoRegister(RegisterManager& regManager) : Register(regManager,0x01, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class Status1Register : public Register
        {
        public:
			Status1Register(RegisterManager& regManager) : Register(regManager,0x02, 1, false) { }
            int drdy;

            long getValue() { return ((drdy & 0x1) << 0); }
            void setValue(long val)
            {
                drdy = (int)((val >> 0) & 0x1);
            }
        };

        class HxRegister : public Register
        {
        public:
			HxRegister(RegisterManager& regManager) : Register(regManager,0x03, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class HyRegister : public Register
        {
        public:
			HyRegister(RegisterManager& regManager) : Register(regManager,0x05, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class HzRegister : public Register
        {
        public:
			HzRegister(RegisterManager& regManager) : Register(regManager,0x07, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class Status2Register : public Register
        {
        public:
			Status2Register(RegisterManager& regManager) : Register(regManager,0x09, 1, false) { }
            int derr;
            int hofl;

            long getValue() { return ((derr & 0x1) << 2) | ((hofl & 0x1) << 3); }
            void setValue(long val)
            {
                derr = (int)((val >> 2) & 0x1);
                hofl = (int)((val >> 3) & 0x1);
            }
        };

        class ControlRegister : public Register
        {
        public:
			ControlRegister(RegisterManager& regManager) : Register(regManager,0x0a, 1, false) { }
            int mode;

            long getValue() { return ((mode & 0xF) << 0); }
            void setValue(long val)
            {
                mode = (int)((val >> 0) & 0xF);
            }
        };

        class SensitivityXRegister : public Register
        {
        public:
			SensitivityXRegister(RegisterManager& regManager) : Register(regManager,0x10, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class SensitivityYRegister : public Register
        {
        public:
			SensitivityYRegister(RegisterManager& regManager) : Register(regManager,0x11, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class SensitivityZRegister : public Register
        {
        public:
			SensitivityZRegister(RegisterManager& regManager) : Register(regManager,0x12, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

            WiaRegister wia;
            InfoRegister info;
            Status1Register status1;
            HxRegister hx;
            HyRegister hy;
            HzRegister hz;
            Status2Register status2;
            ControlRegister control;
            SensitivityXRegister sensitivityX;
            SensitivityYRegister sensitivityY;
            SensitivityZRegister sensitivityZ;

		Ak8975Registers(SMBusDevice& device) : RegisterManager(device, true), wia(*this), info(*this), status1(*this), hx(*this), hy(*this), hz(*this), status2(*this), control(*this), sensitivityX(*this), sensitivityY(*this), sensitivityZ(*this)
		{ 
			registers.push_back(&wia);
			registers.push_back(&info);
			registers.push_back(&status1);
			registers.push_back(&hx);
			registers.push_back(&hy);
			registers.push_back(&hz);
			registers.push_back(&status2);
			registers.push_back(&control);
			registers.push_back(&sensitivityX);
			registers.push_back(&sensitivityY);
			registers.push_back(&sensitivityZ);
		}
    };
 }  }  } }