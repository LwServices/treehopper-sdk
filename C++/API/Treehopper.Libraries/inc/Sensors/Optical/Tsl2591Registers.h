/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
#pragma once
#include "SMBusDevice.h"
#include "Treehopper.Libraries.h"
#include "RegisterManager.h"
#include "Register.h"

using namespace Treehopper::Libraries;

namespace Treehopper { namespace Libraries { namespace Sensors { namespace Optical { 

    enum class AlsTimes
    {
        Time_100ms = 0,
        Time_200ms = 1,
        Time_300ms = 2,
        Time_400ms = 3,
        Time_500ms = 4,
        Time_600ms = 5
	};

    enum class AlsGains
    {
        Low = 0,
        Medium = 1,
        High = 2,
        Max = 3
	};

    enum class InterruptPersistanceFilters
    {
        EveryAlsCycle = 0,
        AnyValueOutsideThreshold = 1,
        Consecutive_2 = 2,
        Consecutive_3 = 3,
        Consecutive_5 = 4,
        Consecutive_10 = 5,
        Consecutive_15 = 6,
        Consecutive_20 = 7,
        Consecutive_25 = 8,
        Consecutive_30 = 9,
        Consecutive_35 = 10,
        Consecutive_40 = 11,
        Consecutive_45 = 12,
        Consecutive_50 = 13,
        Consecutive_55 = 14,
        Consecutive_60 = 15
	};


    class Tsl2591Registers : public RegisterManager
    {
    public:
        class EnableRegister : public Register
        {
        public:
			EnableRegister(RegisterManager& regManager) : Register(regManager,0xA0, 1, false) { }
            int powerOn;
            int alsEnable;
            int alsInterruptEnable;
            int sleepAfterInterrupt;
            int noPersistInterruptEnable;

            long getValue() { return ((powerOn & 0x1) << 0) | ((alsEnable & 0x1) << 1) | ((alsInterruptEnable & 0x1) << 4) | ((sleepAfterInterrupt & 0x1) << 6) | ((noPersistInterruptEnable & 0x1) << 7); }
            void setValue(long val)
            {
                powerOn = (int)((val >> 0) & 0x1);
                alsEnable = (int)((val >> 1) & 0x1);
                alsInterruptEnable = (int)((val >> 4) & 0x1);
                sleepAfterInterrupt = (int)((val >> 6) & 0x1);
                noPersistInterruptEnable = (int)((val >> 7) & 0x1);
            }
        };

        class ConfigRegister : public Register
        {
        public:
			ConfigRegister(RegisterManager& regManager) : Register(regManager,0xA1, 1, false) { }
            int alsTime;
            int alsGain;
            int systemReset;
            AlsTimes getAlsTime() { return (AlsTimes)alsTime; }
            void setAlsTime(AlsTimes enumVal) { alsTime = (int)enumVal; }
            AlsGains getAlsGain() { return (AlsGains)alsGain; }
            void setAlsGain(AlsGains enumVal) { alsGain = (int)enumVal; }

            long getValue() { return ((alsTime & 0x7) << 0) | ((alsGain & 0x3) << 3) | ((systemReset & 0x1) << 7); }
            void setValue(long val)
            {
                alsTime = (int)((val >> 0) & 0x7);
                alsGain = (int)((val >> 3) & 0x3);
                systemReset = (int)((val >> 7) & 0x1);
            }
        };

        class InterruptLowThresholdRegister : public Register
        {
        public:
			InterruptLowThresholdRegister(RegisterManager& regManager) : Register(regManager,0xA4, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class InterruptHighThresholdRegister : public Register
        {
        public:
			InterruptHighThresholdRegister(RegisterManager& regManager) : Register(regManager,0xA6, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class NoPersistLowThresholdRegister : public Register
        {
        public:
			NoPersistLowThresholdRegister(RegisterManager& regManager) : Register(regManager,0xA8, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class NoPersistHighThresholdRegister : public Register
        {
        public:
			NoPersistHighThresholdRegister(RegisterManager& regManager) : Register(regManager,0xAa, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class PersistRegister : public Register
        {
        public:
			PersistRegister(RegisterManager& regManager) : Register(regManager,0xAc, 1, false) { }
            int interruptPersistanceFilter;
            InterruptPersistanceFilters getInterruptPersistanceFilter() { return (InterruptPersistanceFilters)interruptPersistanceFilter; }
            void setInterruptPersistanceFilter(InterruptPersistanceFilters enumVal) { interruptPersistanceFilter = (int)enumVal; }

            long getValue() { return ((interruptPersistanceFilter & 0xF) << 0); }
            void setValue(long val)
            {
                interruptPersistanceFilter = (int)((val >> 0) & 0xF);
            }
        };

        class PackageIdRegister : public Register
        {
        public:
			PackageIdRegister(RegisterManager& regManager) : Register(regManager,0xB1, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class DeviceIdRegister : public Register
        {
        public:
			DeviceIdRegister(RegisterManager& regManager) : Register(regManager,0xB2, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class StatusRegister : public Register
        {
        public:
			StatusRegister(RegisterManager& regManager) : Register(regManager,0xB3, 1, false) { }
            int alsValud;
            int alsInterrupt;
            int noPersistInterrupt;

            long getValue() { return ((alsValud & 0x1) << 0) | ((alsInterrupt & 0x1) << 4) | ((noPersistInterrupt & 0x1) << 5); }
            void setValue(long val)
            {
                alsValud = (int)((val >> 0) & 0x1);
                alsInterrupt = (int)((val >> 4) & 0x1);
                noPersistInterrupt = (int)((val >> 5) & 0x1);
            }
        };

        class Ch0Register : public Register
        {
        public:
			Ch0Register(RegisterManager& regManager) : Register(regManager,0xB4, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class Ch1Register : public Register
        {
        public:
			Ch1Register(RegisterManager& regManager) : Register(regManager,0xB6, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

            EnableRegister enable;
            ConfigRegister config;
            InterruptLowThresholdRegister interruptLowThreshold;
            InterruptHighThresholdRegister interruptHighThreshold;
            NoPersistLowThresholdRegister noPersistLowThreshold;
            NoPersistHighThresholdRegister noPersistHighThreshold;
            PersistRegister persist;
            PackageIdRegister packageId;
            DeviceIdRegister deviceId;
            StatusRegister status;
            Ch0Register ch0;
            Ch1Register ch1;

		Tsl2591Registers(SMBusDevice& device) : RegisterManager(device, true), enable(*this), config(*this), interruptLowThreshold(*this), interruptHighThreshold(*this), noPersistLowThreshold(*this), noPersistHighThreshold(*this), persist(*this), packageId(*this), deviceId(*this), status(*this), ch0(*this), ch1(*this)
		{ 
			registers.push_back(&enable);
			registers.push_back(&config);
			registers.push_back(&interruptLowThreshold);
			registers.push_back(&interruptHighThreshold);
			registers.push_back(&noPersistLowThreshold);
			registers.push_back(&noPersistHighThreshold);
			registers.push_back(&persist);
			registers.push_back(&packageId);
			registers.push_back(&deviceId);
			registers.push_back(&status);
			registers.push_back(&ch0);
			registers.push_back(&ch1);
		}
    };
 }  }  } }