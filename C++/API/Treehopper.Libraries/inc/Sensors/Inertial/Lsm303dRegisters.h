/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
#pragma once
#include "SMBusDevice.h"
#include "Treehopper.Libraries.h"
#include "RegisterManager.h"
#include "Register.h"

using namespace Treehopper::Libraries;

namespace Treehopper { namespace Libraries { namespace Sensors { namespace Inertial { 

    enum class OutputDataRates
    {
        powerDown = 0,
        Hz_3_125 = 1,
        Hz_6_25 = 2,
        Hz_12_5 = 3,
        Hz_25 = 4,
        Hz_50 = 5,
        Hz_100 = 6,
        Hz_200 = 7,
        Hz_400 = 8,
        Hz_800 = 9,
        Hz_1600 = 10
	};

    enum class FullScaleSelections
    {
        Fs_2g = 0,
        Fs_4g = 1,
        Fs_6g = 2,
        Fs_8g = 3,
        Fs_16g = 4
	};

    enum class AntiAliasFilterBandwidths
    {
        Hz_773 = 0,
        Hz_194 = 1,
        Hz_362 = 2,
        Hz_50 = 3
	};

    enum class MagDataRates
    {
        Hz_3_125 = 0,
        Hz_6_25 = 1,
        Hz_12_5 = 2,
        Hz_25 = 3,
        Hz_50 = 4,
        Hz_100 = 5
	};

    enum class MagResolutions
    {
        lowResolution = 0,
        highResolution = 3
	};

    enum class MagFullScaleSelections
    {
        gauss_2 = 0,
        gauss_4 = 1,
        gauss_8 = 2,
        gauss_12 = 3
	};

    enum class MagSensorModes
    {
        ContinuousConversion = 0,
        SingleConversion = 1,
        PowerDown = 2
	};

    enum class AccelhighPassModes
    {
        Reset = 0,
        ReferenceSignal = 1,
        Normal = 2,
        AutoResetOnInterrupt = 3
	};

    enum class FifoModes
    {
        Bypass = 0,
        Fifo = 1,
        Stream = 2,
        StreamToFifo = 3,
        BypassToStream = 4
	};


    class Lsm303dRegisters : public RegisterManager
    {
    public:
        class TempOutRegister : public Register
        {
        public:
			TempOutRegister(RegisterManager& regManager) : Register(regManager,0x05, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFF) << (32 - 12)) >> (32 - 12);
            }
        };

        class StatusRegister : public Register
        {
        public:
			StatusRegister(RegisterManager& regManager) : Register(regManager,0x07, 1, false) { }
            int xDataAvailable;
            int yDataAvailable;
            int zDataAvailable;
            int zyxDataAvailable;
            int xDataOverrun;
            int yDataOverrun;
            int zDataOverrun;
            int zyxDataOverrun;

            long getValue() { return ((xDataAvailable & 0x1) << 0) | ((yDataAvailable & 0x1) << 1) | ((zDataAvailable & 0x1) << 2) | ((zyxDataAvailable & 0x1) << 3) | ((xDataOverrun & 0x1) << 4) | ((yDataOverrun & 0x1) << 5) | ((zDataOverrun & 0x1) << 6) | ((zyxDataOverrun & 0x1) << 7); }
            void setValue(long val)
            {
                xDataAvailable = (int)((val >> 0) & 0x1);
                yDataAvailable = (int)((val >> 1) & 0x1);
                zDataAvailable = (int)((val >> 2) & 0x1);
                zyxDataAvailable = (int)((val >> 3) & 0x1);
                xDataOverrun = (int)((val >> 4) & 0x1);
                yDataOverrun = (int)((val >> 5) & 0x1);
                zDataOverrun = (int)((val >> 6) & 0x1);
                zyxDataOverrun = (int)((val >> 7) & 0x1);
            }
        };

        class OutXRegister : public Register
        {
        public:
			OutXRegister(RegisterManager& regManager) : Register(regManager,0x08, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class OutYRegister : public Register
        {
        public:
			OutYRegister(RegisterManager& regManager) : Register(regManager,0x0A, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class OutZRegister : public Register
        {
        public:
			OutZRegister(RegisterManager& regManager) : Register(regManager,0x0C, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class WhoAmIRegister : public Register
        {
        public:
			WhoAmIRegister(RegisterManager& regManager) : Register(regManager,0x0f, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class IntCtrlRegister : public Register
        {
        public:
			IntCtrlRegister(RegisterManager& regManager) : Register(regManager,0x12, 1, false) { }
            int magInterruptEnable;
            int enable4D;
            int latchInterruptRequest;
            int interruptPolarity;
            int interruptPinPushPull;
            int zInterruptEnable;
            int yInterruptEnable;
            int xInterruptEnable;

            long getValue() { return ((magInterruptEnable & 0x1) << 0) | ((enable4D & 0x1) << 1) | ((latchInterruptRequest & 0x1) << 2) | ((interruptPolarity & 0x1) << 3) | ((interruptPinPushPull & 0x1) << 4) | ((zInterruptEnable & 0x1) << 5) | ((yInterruptEnable & 0x1) << 6) | ((xInterruptEnable & 0x1) << 7); }
            void setValue(long val)
            {
                magInterruptEnable = (int)((val >> 0) & 0x1);
                enable4D = (int)((val >> 1) & 0x1);
                latchInterruptRequest = (int)((val >> 2) & 0x1);
                interruptPolarity = (int)((val >> 3) & 0x1);
                interruptPinPushPull = (int)((val >> 4) & 0x1);
                zInterruptEnable = (int)((val >> 5) & 0x1);
                yInterruptEnable = (int)((val >> 6) & 0x1);
                xInterruptEnable = (int)((val >> 7) & 0x1);
            }
        };

        class IntSourceRegister : public Register
        {
        public:
			IntSourceRegister(RegisterManager& regManager) : Register(regManager,0x13, 1, false) { }
            int mint;
            int measurementRangeOverflow;
            int negativeThresholdZ;
            int negativeThresholdY;
            int negativeThresholdX;
            int positiveThresholdZ;
            int positiveThresholdY;
            int positiveThresholdX;

            long getValue() { return ((mint & 0x1) << 0) | ((measurementRangeOverflow & 0x1) << 1) | ((negativeThresholdZ & 0x1) << 2) | ((negativeThresholdY & 0x1) << 3) | ((negativeThresholdX & 0x1) << 4) | ((positiveThresholdZ & 0x1) << 5) | ((positiveThresholdY & 0x1) << 6) | ((positiveThresholdX & 0x1) << 7); }
            void setValue(long val)
            {
                mint = (int)((val >> 0) & 0x1);
                measurementRangeOverflow = (int)((val >> 1) & 0x1);
                negativeThresholdZ = (int)((val >> 2) & 0x1);
                negativeThresholdY = (int)((val >> 3) & 0x1);
                negativeThresholdX = (int)((val >> 4) & 0x1);
                positiveThresholdZ = (int)((val >> 5) & 0x1);
                positiveThresholdY = (int)((val >> 6) & 0x1);
                positiveThresholdX = (int)((val >> 7) & 0x1);
            }
        };

        class IntThresholdRegister : public Register
        {
        public:
			IntThresholdRegister(RegisterManager& regManager) : Register(regManager,0x14, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class OffsetXRegister : public Register
        {
        public:
			OffsetXRegister(RegisterManager& regManager) : Register(regManager,0x16, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class OffsetYRegister : public Register
        {
        public:
			OffsetYRegister(RegisterManager& regManager) : Register(regManager,0x18, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class OffsetZRegister : public Register
        {
        public:
			OffsetZRegister(RegisterManager& regManager) : Register(regManager,0x1A, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class ReferenceXRegister : public Register
        {
        public:
			ReferenceXRegister(RegisterManager& regManager) : Register(regManager,0x1c, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class ReferenceYRegister : public Register
        {
        public:
			ReferenceYRegister(RegisterManager& regManager) : Register(regManager,0x1d, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class ReferenceZRegister : public Register
        {
        public:
			ReferenceZRegister(RegisterManager& regManager) : Register(regManager,0x1E, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class Ctrl0Register : public Register
        {
        public:
			Ctrl0Register(RegisterManager& regManager) : Register(regManager,0x1f, 1, false) { }
            int hpis2;
            int hpis1;
            int hpClick;
            int fifoThresholdEnable;
            int fifoEnable;
            int boot;

            long getValue() { return ((hpis2 & 0x1) << 0) | ((hpis1 & 0x1) << 1) | ((hpClick & 0x1) << 2) | ((fifoThresholdEnable & 0x1) << 5) | ((fifoEnable & 0x1) << 6) | ((boot & 0x1) << 7); }
            void setValue(long val)
            {
                hpis2 = (int)((val >> 0) & 0x1);
                hpis1 = (int)((val >> 1) & 0x1);
                hpClick = (int)((val >> 2) & 0x1);
                fifoThresholdEnable = (int)((val >> 5) & 0x1);
                fifoEnable = (int)((val >> 6) & 0x1);
                boot = (int)((val >> 7) & 0x1);
            }
        };

        class Ctrl1Register : public Register
        {
        public:
			Ctrl1Register(RegisterManager& regManager) : Register(regManager,0x20, 1, false) { }
            int xEnable;
            int yEnable;
            int zEnable;
            int blockDataUpdate;
            int outputDataRate;
            OutputDataRates getOutputDataRate() { return (OutputDataRates)outputDataRate; }
            void setOutputDataRate(OutputDataRates enumVal) { outputDataRate = (int)enumVal; }

            long getValue() { return ((xEnable & 0x1) << 0) | ((yEnable & 0x1) << 1) | ((zEnable & 0x1) << 2) | ((blockDataUpdate & 0x1) << 3) | ((outputDataRate & 0xF) << 4); }
            void setValue(long val)
            {
                xEnable = (int)((val >> 0) & 0x1);
                yEnable = (int)((val >> 1) & 0x1);
                zEnable = (int)((val >> 2) & 0x1);
                blockDataUpdate = (int)((val >> 3) & 0x1);
                outputDataRate = (int)((val >> 4) & 0xF);
            }
        };

        class Ctrl2Register : public Register
        {
        public:
			Ctrl2Register(RegisterManager& regManager) : Register(regManager,0x21, 1, false) { }
            int spiModeSelection;
            int accelerationSelfTest;
            int fullScaleSelection;
            int antiAliasFilterBandwidth;
            FullScaleSelections getFullScaleSelection() { return (FullScaleSelections)fullScaleSelection; }
            void setFullScaleSelection(FullScaleSelections enumVal) { fullScaleSelection = (int)enumVal; }
            AntiAliasFilterBandwidths getAntiAliasFilterBandwidth() { return (AntiAliasFilterBandwidths)antiAliasFilterBandwidth; }
            void setAntiAliasFilterBandwidth(AntiAliasFilterBandwidths enumVal) { antiAliasFilterBandwidth = (int)enumVal; }

            long getValue() { return ((spiModeSelection & 0x1) << 0) | ((accelerationSelfTest & 0x1) << 1) | ((fullScaleSelection & 0x7) << 3) | ((antiAliasFilterBandwidth & 0x3) << 6); }
            void setValue(long val)
            {
                spiModeSelection = (int)((val >> 0) & 0x1);
                accelerationSelfTest = (int)((val >> 1) & 0x1);
                fullScaleSelection = (int)((val >> 3) & 0x7);
                antiAliasFilterBandwidth = (int)((val >> 6) & 0x3);
            }
        };

        class Ctrl3Register : public Register
        {
        public:
			Ctrl3Register(RegisterManager& regManager) : Register(regManager,0x22, 1, false) { }
            int fifoEmptyOnInt1;
            int magReadyOnInt1;
            int accelReadyOnInt1;
            int magGenOnInt1;
            int inertialGen2OnInt1;
            int inertialGen1OnInt1;
            int clickGenOnInt1;
            int bootOnInt1;

            long getValue() { return ((fifoEmptyOnInt1 & 0x1) << 0) | ((magReadyOnInt1 & 0x1) << 1) | ((accelReadyOnInt1 & 0x1) << 2) | ((magGenOnInt1 & 0x1) << 3) | ((inertialGen2OnInt1 & 0x1) << 4) | ((inertialGen1OnInt1 & 0x1) << 5) | ((clickGenOnInt1 & 0x1) << 6) | ((bootOnInt1 & 0x1) << 7); }
            void setValue(long val)
            {
                fifoEmptyOnInt1 = (int)((val >> 0) & 0x1);
                magReadyOnInt1 = (int)((val >> 1) & 0x1);
                accelReadyOnInt1 = (int)((val >> 2) & 0x1);
                magGenOnInt1 = (int)((val >> 3) & 0x1);
                inertialGen2OnInt1 = (int)((val >> 4) & 0x1);
                inertialGen1OnInt1 = (int)((val >> 5) & 0x1);
                clickGenOnInt1 = (int)((val >> 6) & 0x1);
                bootOnInt1 = (int)((val >> 7) & 0x1);
            }
        };

        class Ctrl4Register : public Register
        {
        public:
			Ctrl4Register(RegisterManager& regManager) : Register(regManager,0x23, 1, false) { }
            int fifoThresholdOnInt2;
            int fifoOverrunOnInt2;
            int magDataReadyOnInt2;
            int accelDataReadyOnInt2;
            int magIntOnInt2;
            int inertialGen2OnInt2;
            int inertialGen1OnInt2;
            int clickGenOnInt2;

            long getValue() { return ((fifoThresholdOnInt2 & 0x1) << 0) | ((fifoOverrunOnInt2 & 0x1) << 1) | ((magDataReadyOnInt2 & 0x1) << 2) | ((accelDataReadyOnInt2 & 0x1) << 3) | ((magIntOnInt2 & 0x1) << 4) | ((inertialGen2OnInt2 & 0x1) << 5) | ((inertialGen1OnInt2 & 0x1) << 6) | ((clickGenOnInt2 & 0x1) << 7); }
            void setValue(long val)
            {
                fifoThresholdOnInt2 = (int)((val >> 0) & 0x1);
                fifoOverrunOnInt2 = (int)((val >> 1) & 0x1);
                magDataReadyOnInt2 = (int)((val >> 2) & 0x1);
                accelDataReadyOnInt2 = (int)((val >> 3) & 0x1);
                magIntOnInt2 = (int)((val >> 4) & 0x1);
                inertialGen2OnInt2 = (int)((val >> 5) & 0x1);
                inertialGen1OnInt2 = (int)((val >> 6) & 0x1);
                clickGenOnInt2 = (int)((val >> 7) & 0x1);
            }
        };

        class Ctrl5Register : public Register
        {
        public:
			Ctrl5Register(RegisterManager& regManager) : Register(regManager,0x24, 1, false) { }
            int latchIntOnInt1;
            int latchIntOnInt2;
            int magDataRate;
            int magResolution;
            int tempEnable;
            MagDataRates getMagDataRate() { return (MagDataRates)magDataRate; }
            void setMagDataRate(MagDataRates enumVal) { magDataRate = (int)enumVal; }
            MagResolutions getMagResolution() { return (MagResolutions)magResolution; }
            void setMagResolution(MagResolutions enumVal) { magResolution = (int)enumVal; }

            long getValue() { return ((latchIntOnInt1 & 0x1) << 0) | ((latchIntOnInt2 & 0x1) << 1) | ((magDataRate & 0x7) << 2) | ((magResolution & 0x3) << 5) | ((tempEnable & 0x1) << 7); }
            void setValue(long val)
            {
                latchIntOnInt1 = (int)((val >> 0) & 0x1);
                latchIntOnInt2 = (int)((val >> 1) & 0x1);
                magDataRate = (int)((val >> 2) & 0x7);
                magResolution = (int)((val >> 5) & 0x3);
                tempEnable = (int)((val >> 7) & 0x1);
            }
        };

        class Ctrl6Register : public Register
        {
        public:
			Ctrl6Register(RegisterManager& regManager) : Register(regManager,0x25, 1, false) { }
            int magFullScaleSelection;
            MagFullScaleSelections getMagFullScaleSelection() { return (MagFullScaleSelections)magFullScaleSelection; }
            void setMagFullScaleSelection(MagFullScaleSelections enumVal) { magFullScaleSelection = (int)enumVal; }

            long getValue() { return ((magFullScaleSelection & 0x3) << 5); }
            void setValue(long val)
            {
                magFullScaleSelection = (int)((val >> 5) & 0x3);
            }
        };

        class Ctrl7Register : public Register
        {
        public:
			Ctrl7Register(RegisterManager& regManager) : Register(regManager,0x26, 1, false) { }
            int magSensorMode;
            int magLowPowerMode;
            int tempOnly;
            int filteredAccelData;
            int accelhighPassMode;
            MagSensorModes getMagSensorMode() { return (MagSensorModes)magSensorMode; }
            void setMagSensorMode(MagSensorModes enumVal) { magSensorMode = (int)enumVal; }
            AccelhighPassModes getAccelhighPassMode() { return (AccelhighPassModes)accelhighPassMode; }
            void setAccelhighPassMode(AccelhighPassModes enumVal) { accelhighPassMode = (int)enumVal; }

            long getValue() { return ((magSensorMode & 0x3) << 0) | ((magLowPowerMode & 0x1) << 2) | ((tempOnly & 0x1) << 4) | ((filteredAccelData & 0x1) << 5) | ((accelhighPassMode & 0x3) << 6); }
            void setValue(long val)
            {
                magSensorMode = (int)((val >> 0) & 0x3);
                magLowPowerMode = (int)((val >> 2) & 0x1);
                tempOnly = (int)((val >> 4) & 0x1);
                filteredAccelData = (int)((val >> 5) & 0x1);
                accelhighPassMode = (int)((val >> 6) & 0x3);
            }
        };

        class StatusARegister : public Register
        {
        public:
			StatusARegister(RegisterManager& regManager) : Register(regManager,0x27, 1, false) { }
            int accelXAvailable;
            int accelYAvailable;
            int accelZAvailable;
            int accelXYZAvailable;
            int accelXOverrun;
            int accelYOverrun;
            int accelZOverrun;
            int accelXYZOverrun;

            long getValue() { return ((accelXAvailable & 0x1) << 0) | ((accelYAvailable & 0x1) << 1) | ((accelZAvailable & 0x1) << 2) | ((accelXYZAvailable & 0x1) << 3) | ((accelXOverrun & 0x1) << 4) | ((accelYOverrun & 0x1) << 5) | ((accelZOverrun & 0x1) << 6) | ((accelXYZOverrun & 0x1) << 7); }
            void setValue(long val)
            {
                accelXAvailable = (int)((val >> 0) & 0x1);
                accelYAvailable = (int)((val >> 1) & 0x1);
                accelZAvailable = (int)((val >> 2) & 0x1);
                accelXYZAvailable = (int)((val >> 3) & 0x1);
                accelXOverrun = (int)((val >> 4) & 0x1);
                accelYOverrun = (int)((val >> 5) & 0x1);
                accelZOverrun = (int)((val >> 6) & 0x1);
                accelXYZOverrun = (int)((val >> 7) & 0x1);
            }
        };

        class OutAccelXRegister : public Register
        {
        public:
			OutAccelXRegister(RegisterManager& regManager) : Register(regManager,0x28, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class OutAccelYRegister : public Register
        {
        public:
			OutAccelYRegister(RegisterManager& regManager) : Register(regManager,0x2A, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class OutAccelZRegister : public Register
        {
        public:
			OutAccelZRegister(RegisterManager& regManager) : Register(regManager,0x2C, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class FifoControlRegister : public Register
        {
        public:
			FifoControlRegister(RegisterManager& regManager) : Register(regManager,0x2E, 1, false) { }
            int fifoThreshold;
            int fifoMode;
            FifoModes getFifoMode() { return (FifoModes)fifoMode; }
            void setFifoMode(FifoModes enumVal) { fifoMode = (int)enumVal; }

            long getValue() { return ((fifoThreshold & 0x1F) << 0) | ((fifoMode & 0x7) << 5); }
            void setValue(long val)
            {
                fifoThreshold = (int)((val >> 0) & 0x1F);
                fifoMode = (int)((val >> 5) & 0x7);
            }
        };

        class FifoSourceRegister : public Register
        {
        public:
			FifoSourceRegister(RegisterManager& regManager) : Register(regManager,0x2f, 1, false) { }
            int fifoStoredLevel;
            int empty;
            int overrun;
            int fifoThreshold;

            long getValue() { return ((fifoStoredLevel & 0x1F) << 0) | ((empty & 0x1) << 5) | ((overrun & 0x1) << 6) | ((fifoThreshold & 0x1) << 7); }
            void setValue(long val)
            {
                fifoStoredLevel = (int)((val >> 0) & 0x1F);
                empty = (int)((val >> 5) & 0x1);
                overrun = (int)((val >> 6) & 0x1);
                fifoThreshold = (int)((val >> 7) & 0x1);
            }
        };

        class InertialIntGen1ConfigRegister : public Register
        {
        public:
			InertialIntGen1ConfigRegister(RegisterManager& regManager) : Register(regManager,0x30, 1, false) { }
            int xLowInterruptEnable;
            int xHighInterruptEnable;
            int yLowInterruptEnable;
            int yHighInterruptEnable;
            int zLowInterruptEvent;
            int zHighInterruptEnable;
            int detect6D;
            int andOrInterruptEvents;

            long getValue() { return ((xLowInterruptEnable & 0x1) << 0) | ((xHighInterruptEnable & 0x1) << 1) | ((yLowInterruptEnable & 0x1) << 2) | ((yHighInterruptEnable & 0x1) << 3) | ((zLowInterruptEvent & 0x1) << 4) | ((zHighInterruptEnable & 0x1) << 5) | ((detect6D & 0x1) << 6) | ((andOrInterruptEvents & 0x1) << 7); }
            void setValue(long val)
            {
                xLowInterruptEnable = (int)((val >> 0) & 0x1);
                xHighInterruptEnable = (int)((val >> 1) & 0x1);
                yLowInterruptEnable = (int)((val >> 2) & 0x1);
                yHighInterruptEnable = (int)((val >> 3) & 0x1);
                zLowInterruptEvent = (int)((val >> 4) & 0x1);
                zHighInterruptEnable = (int)((val >> 5) & 0x1);
                detect6D = (int)((val >> 6) & 0x1);
                andOrInterruptEvents = (int)((val >> 7) & 0x1);
            }
        };

        class InertialIntGen1StatusRegister : public Register
        {
        public:
			InertialIntGen1StatusRegister(RegisterManager& regManager) : Register(regManager,0x30, 1, false) { }
            int xLow;
            int xHigh;
            int yLow;
            int yHigh;
            int zLow;
            int zHigh;
            int intStatus;

            long getValue() { return ((xLow & 0x1) << 0) | ((xHigh & 0x1) << 1) | ((yLow & 0x1) << 2) | ((yHigh & 0x1) << 3) | ((zLow & 0x1) << 4) | ((zHigh & 0x1) << 5) | ((intStatus & 0x1) << 6); }
            void setValue(long val)
            {
                xLow = (int)((val >> 0) & 0x1);
                xHigh = (int)((val >> 1) & 0x1);
                yLow = (int)((val >> 2) & 0x1);
                yHigh = (int)((val >> 3) & 0x1);
                zLow = (int)((val >> 4) & 0x1);
                zHigh = (int)((val >> 5) & 0x1);
                intStatus = (int)((val >> 6) & 0x1);
            }
        };

        class InertialIntGen1ThresholdRegister : public Register
        {
        public:
			InertialIntGen1ThresholdRegister(RegisterManager& regManager) : Register(regManager,0x32, 1, false) { }
            int value;

            long getValue() { return ((value & 0x7F) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0x7F);
            }
        };

        class InertialIntGen1DurationRegister : public Register
        {
        public:
			InertialIntGen1DurationRegister(RegisterManager& regManager) : Register(regManager,0x33, 1, false) { }
            int value;

            long getValue() { return ((value & 0x7F) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0x7F);
            }
        };

        class InertialIntGen2ConfigRegister : public Register
        {
        public:
			InertialIntGen2ConfigRegister(RegisterManager& regManager) : Register(regManager,0x34, 1, false) { }
            int xLowInterruptEnable;
            int xHighInterruptEnable;
            int yLowInterruptEnable;
            int yHighInterruptEnable;
            int zLowInterruptEvent;
            int zHighInterruptEnable;
            int detect6D;
            int andOrInterruptEvents;

            long getValue() { return ((xLowInterruptEnable & 0x1) << 0) | ((xHighInterruptEnable & 0x1) << 1) | ((yLowInterruptEnable & 0x1) << 2) | ((yHighInterruptEnable & 0x1) << 3) | ((zLowInterruptEvent & 0x1) << 4) | ((zHighInterruptEnable & 0x1) << 5) | ((detect6D & 0x1) << 6) | ((andOrInterruptEvents & 0x1) << 7); }
            void setValue(long val)
            {
                xLowInterruptEnable = (int)((val >> 0) & 0x1);
                xHighInterruptEnable = (int)((val >> 1) & 0x1);
                yLowInterruptEnable = (int)((val >> 2) & 0x1);
                yHighInterruptEnable = (int)((val >> 3) & 0x1);
                zLowInterruptEvent = (int)((val >> 4) & 0x1);
                zHighInterruptEnable = (int)((val >> 5) & 0x1);
                detect6D = (int)((val >> 6) & 0x1);
                andOrInterruptEvents = (int)((val >> 7) & 0x1);
            }
        };

        class InertialIntGen2StatusRegister : public Register
        {
        public:
			InertialIntGen2StatusRegister(RegisterManager& regManager) : Register(regManager,0x35, 1, false) { }
            int xLow;
            int xHigh;
            int yLow;
            int yHigh;
            int zLow;
            int zHigh;
            int intStatus;

            long getValue() { return ((xLow & 0x1) << 0) | ((xHigh & 0x1) << 1) | ((yLow & 0x1) << 2) | ((yHigh & 0x1) << 3) | ((zLow & 0x1) << 4) | ((zHigh & 0x1) << 5) | ((intStatus & 0x1) << 6); }
            void setValue(long val)
            {
                xLow = (int)((val >> 0) & 0x1);
                xHigh = (int)((val >> 1) & 0x1);
                yLow = (int)((val >> 2) & 0x1);
                yHigh = (int)((val >> 3) & 0x1);
                zLow = (int)((val >> 4) & 0x1);
                zHigh = (int)((val >> 5) & 0x1);
                intStatus = (int)((val >> 6) & 0x1);
            }
        };

        class InertialIntGen2ThresholdRegister : public Register
        {
        public:
			InertialIntGen2ThresholdRegister(RegisterManager& regManager) : Register(regManager,0x36, 1, false) { }
            int value;

            long getValue() { return ((value & 0x7F) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0x7F);
            }
        };

        class InertialIntGen2DurationRegister : public Register
        {
        public:
			InertialIntGen2DurationRegister(RegisterManager& regManager) : Register(regManager,0x37, 1, false) { }
            int value;

            long getValue() { return ((value & 0x7F) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0x7F);
            }
        };

        class ClickConfigRegister : public Register
        {
        public:
			ClickConfigRegister(RegisterManager& regManager) : Register(regManager,0x38, 1, false) { }
            int xSingleClick;
            int xDoubleClick;
            int ySingleClick;
            int yDoubleClick;
            int zSingleClick;
            int zDoubleClick;

            long getValue() { return ((xSingleClick & 0x1) << 0) | ((xDoubleClick & 0x1) << 1) | ((ySingleClick & 0x1) << 2) | ((yDoubleClick & 0x1) << 3) | ((zSingleClick & 0x1) << 4) | ((zDoubleClick & 0x1) << 5); }
            void setValue(long val)
            {
                xSingleClick = (int)((val >> 0) & 0x1);
                xDoubleClick = (int)((val >> 1) & 0x1);
                ySingleClick = (int)((val >> 2) & 0x1);
                yDoubleClick = (int)((val >> 3) & 0x1);
                zSingleClick = (int)((val >> 4) & 0x1);
                zDoubleClick = (int)((val >> 5) & 0x1);
            }
        };

        class ClickSourceRegister : public Register
        {
        public:
			ClickSourceRegister(RegisterManager& regManager) : Register(regManager,0x39, 1, false) { }
            int x;
            int y;
            int z;
            int sign;
            int singleClickEn;
            int doubleClickEn;
            int interruptActive;

            long getValue() { return ((x & 0x1) << 0) | ((y & 0x1) << 1) | ((z & 0x1) << 2) | ((sign & 0x1) << 3) | ((singleClickEn & 0x1) << 4) | ((doubleClickEn & 0x1) << 5) | ((interruptActive & 0x1) << 6); }
            void setValue(long val)
            {
                x = (int)((val >> 0) & 0x1);
                y = (int)((val >> 1) & 0x1);
                z = (int)((val >> 2) & 0x1);
                sign = (int)((val >> 3) & 0x1);
                singleClickEn = (int)((val >> 4) & 0x1);
                doubleClickEn = (int)((val >> 5) & 0x1);
                interruptActive = (int)((val >> 6) & 0x1);
            }
        };

        class ClickThresholdRegister : public Register
        {
        public:
			ClickThresholdRegister(RegisterManager& regManager) : Register(regManager,0x3A, 1, false) { }
            int value;

            long getValue() { return ((value & 0x7F) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0x7F);
            }
        };

        class TimeLimitRegister : public Register
        {
        public:
			TimeLimitRegister(RegisterManager& regManager) : Register(regManager,0x3b, 1, false) { }
            int value;

            long getValue() { return ((value & 0x7F) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0x7F);
            }
        };

        class TimeLatencyRegister : public Register
        {
        public:
			TimeLatencyRegister(RegisterManager& regManager) : Register(regManager,0x3c, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class TimeWindowRegister : public Register
        {
        public:
			TimeWindowRegister(RegisterManager& regManager) : Register(regManager,0x3d, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class ActivationThresholdRegister : public Register
        {
        public:
			ActivationThresholdRegister(RegisterManager& regManager) : Register(regManager,0x3e, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class ActivationDurationRegister : public Register
        {
        public:
			ActivationDurationRegister(RegisterManager& regManager) : Register(regManager,0x3f, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

            TempOutRegister tempOut;
            StatusRegister status;
            OutXRegister outX;
            OutYRegister outY;
            OutZRegister outZ;
            WhoAmIRegister whoAmI;
            IntCtrlRegister intCtrl;
            IntSourceRegister intSource;
            IntThresholdRegister intThreshold;
            OffsetXRegister offsetX;
            OffsetYRegister offsetY;
            OffsetZRegister offsetZ;
            ReferenceXRegister referenceX;
            ReferenceYRegister referenceY;
            ReferenceZRegister referenceZ;
            Ctrl0Register ctrl0;
            Ctrl1Register ctrl1;
            Ctrl2Register ctrl2;
            Ctrl3Register ctrl3;
            Ctrl4Register ctrl4;
            Ctrl5Register ctrl5;
            Ctrl6Register ctrl6;
            Ctrl7Register ctrl7;
            StatusARegister statusA;
            OutAccelXRegister outAccelX;
            OutAccelYRegister outAccelY;
            OutAccelZRegister outAccelZ;
            FifoControlRegister fifoControl;
            FifoSourceRegister fifoSource;
            InertialIntGen1ConfigRegister inertialIntGen1Config;
            InertialIntGen1StatusRegister inertialIntGen1Status;
            InertialIntGen1ThresholdRegister inertialIntGen1Threshold;
            InertialIntGen1DurationRegister inertialIntGen1Duration;
            InertialIntGen2ConfigRegister inertialIntGen2Config;
            InertialIntGen2StatusRegister inertialIntGen2Status;
            InertialIntGen2ThresholdRegister inertialIntGen2Threshold;
            InertialIntGen2DurationRegister inertialIntGen2Duration;
            ClickConfigRegister clickConfig;
            ClickSourceRegister clickSource;
            ClickThresholdRegister clickThreshold;
            TimeLimitRegister timeLimit;
            TimeLatencyRegister timeLatency;
            TimeWindowRegister timeWindow;
            ActivationThresholdRegister activationThreshold;
            ActivationDurationRegister activationDuration;

		Lsm303dRegisters(SMBusDevice& device) : RegisterManager(device, true), tempOut(*this), status(*this), outX(*this), outY(*this), outZ(*this), whoAmI(*this), intCtrl(*this), intSource(*this), intThreshold(*this), offsetX(*this), offsetY(*this), offsetZ(*this), referenceX(*this), referenceY(*this), referenceZ(*this), ctrl0(*this), ctrl1(*this), ctrl2(*this), ctrl3(*this), ctrl4(*this), ctrl5(*this), ctrl6(*this), ctrl7(*this), statusA(*this), outAccelX(*this), outAccelY(*this), outAccelZ(*this), fifoControl(*this), fifoSource(*this), inertialIntGen1Config(*this), inertialIntGen1Status(*this), inertialIntGen1Threshold(*this), inertialIntGen1Duration(*this), inertialIntGen2Config(*this), inertialIntGen2Status(*this), inertialIntGen2Threshold(*this), inertialIntGen2Duration(*this), clickConfig(*this), clickSource(*this), clickThreshold(*this), timeLimit(*this), timeLatency(*this), timeWindow(*this), activationThreshold(*this), activationDuration(*this)
		{ 
			registers.push_back(&tempOut);
			registers.push_back(&status);
			registers.push_back(&outX);
			registers.push_back(&outY);
			registers.push_back(&outZ);
			registers.push_back(&whoAmI);
			registers.push_back(&intCtrl);
			registers.push_back(&intSource);
			registers.push_back(&intThreshold);
			registers.push_back(&offsetX);
			registers.push_back(&offsetY);
			registers.push_back(&offsetZ);
			registers.push_back(&referenceX);
			registers.push_back(&referenceY);
			registers.push_back(&referenceZ);
			registers.push_back(&ctrl0);
			registers.push_back(&ctrl1);
			registers.push_back(&ctrl2);
			registers.push_back(&ctrl3);
			registers.push_back(&ctrl4);
			registers.push_back(&ctrl5);
			registers.push_back(&ctrl6);
			registers.push_back(&ctrl7);
			registers.push_back(&statusA);
			registers.push_back(&outAccelX);
			registers.push_back(&outAccelY);
			registers.push_back(&outAccelZ);
			registers.push_back(&fifoControl);
			registers.push_back(&fifoSource);
			registers.push_back(&inertialIntGen1Config);
			registers.push_back(&inertialIntGen1Status);
			registers.push_back(&inertialIntGen1Threshold);
			registers.push_back(&inertialIntGen1Duration);
			registers.push_back(&inertialIntGen2Config);
			registers.push_back(&inertialIntGen2Status);
			registers.push_back(&inertialIntGen2Threshold);
			registers.push_back(&inertialIntGen2Duration);
			registers.push_back(&clickConfig);
			registers.push_back(&clickSource);
			registers.push_back(&clickThreshold);
			registers.push_back(&timeLimit);
			registers.push_back(&timeLatency);
			registers.push_back(&timeWindow);
			registers.push_back(&activationThreshold);
			registers.push_back(&activationDuration);
		}
    };
 }  }  } }