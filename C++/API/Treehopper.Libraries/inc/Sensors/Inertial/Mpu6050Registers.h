/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
#pragma once
#include "SMBusDevice.h"
#include "Treehopper.Libraries.h"
#include "RegisterManager.h"
#include "Register.h"

using namespace Treehopper::Libraries;

namespace Treehopper { namespace Libraries { namespace Sensors { namespace Inertial { 

    enum class ExtSyncSets
    {
        Disabled = 0,
        TempOutL = 1,
        GyroXoutL = 2,
        GyroYoutL = 3,
        GyroZoutL = 4,
        AccelXoutL = 5,
        AccelYoutL = 6,
        AccelZoutL = 7
	};

    enum class GyroScales
    {
        Dps_250 = 0,
        Dps_500 = 1,
        Dps_1000 = 2,
        Dps_2000 = 3
	};

    enum class AccelScales
    {
        Fs_2g = 0,
        Fs_4g = 1,
        Fs_8g = 2,
        Fs_16g = 3
	};

    enum class ClockSels
    {
        InternalOscillator = 0,
        AutoSelect = 1,
        Reset = 7
	};


    class Mpu6050Registers : public RegisterManager
    {
    public:
        class Self_test_x_gyroRegister : public Register
        {
        public:
			Self_test_x_gyroRegister(RegisterManager& regManager) : Register(regManager,0x00, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class Self_test_y_gyroRegister : public Register
        {
        public:
			Self_test_y_gyroRegister(RegisterManager& regManager) : Register(regManager,0x01, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class Self_test_z_gyroRegister : public Register
        {
        public:
			Self_test_z_gyroRegister(RegisterManager& regManager) : Register(regManager,0x02, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class Self_test_x_accelRegister : public Register
        {
        public:
			Self_test_x_accelRegister(RegisterManager& regManager) : Register(regManager,0x0d, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class Self_test_y_accelRegister : public Register
        {
        public:
			Self_test_y_accelRegister(RegisterManager& regManager) : Register(regManager,0x0e, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class Self_test_z_accelRegister : public Register
        {
        public:
			Self_test_z_accelRegister(RegisterManager& regManager) : Register(regManager,0x0f, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class XGyroOffsUsrRegister : public Register
        {
        public:
			XGyroOffsUsrRegister(RegisterManager& regManager) : Register(regManager,0x13, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class YGyroOffsUsrRegister : public Register
        {
        public:
			YGyroOffsUsrRegister(RegisterManager& regManager) : Register(regManager,0x15, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class ZGyroOffsUsrRegister : public Register
        {
        public:
			ZGyroOffsUsrRegister(RegisterManager& regManager) : Register(regManager,0x17, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class SampleRateDividerRegister : public Register
        {
        public:
			SampleRateDividerRegister(RegisterManager& regManager) : Register(regManager,0x19, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class ConfigurationRegister : public Register
        {
        public:
			ConfigurationRegister(RegisterManager& regManager) : Register(regManager,0x1a, 1, false) { }
            int dlpf;
            int extSyncSet;
            int fifoMode;
            ExtSyncSets getExtSyncSet() { return (ExtSyncSets)extSyncSet; }
            void setExtSyncSet(ExtSyncSets enumVal) { extSyncSet = (int)enumVal; }

            long getValue() { return ((dlpf & 0x7) << 0) | ((extSyncSet & 0x7) << 3) | ((fifoMode & 0x1) << 6); }
            void setValue(long val)
            {
                dlpf = (int)((val >> 0) & 0x7);
                extSyncSet = (int)((val >> 3) & 0x7);
                fifoMode = (int)((val >> 6) & 0x1);
            }
        };

        class GyroConfigRegister : public Register
        {
        public:
			GyroConfigRegister(RegisterManager& regManager) : Register(regManager,0x1b, 1, false) { }
            int fChoiceBypass;
            int gyroScale;
            int zGyroCten;
            int yGyroCten;
            GyroScales getGyroScale() { return (GyroScales)gyroScale; }
            void setGyroScale(GyroScales enumVal) { gyroScale = (int)enumVal; }

            long getValue() { return ((fChoiceBypass & 0x3) << 0) | ((gyroScale & 0x3) << 3) | ((zGyroCten & 0x1) << 5) | ((yGyroCten & 0x1) << 6); }
            void setValue(long val)
            {
                fChoiceBypass = (int)((val >> 0) & 0x3);
                gyroScale = (int)((val >> 3) & 0x3);
                zGyroCten = (int)((val >> 5) & 0x1);
                yGyroCten = (int)((val >> 6) & 0x1);
            }
        };

        class AccelConfigRegister : public Register
        {
        public:
			AccelConfigRegister(RegisterManager& regManager) : Register(regManager,0x1c, 1, false) { }
            int accelScale;
            int accelZselfTest;
            int accelYselfTest;
            int accelXselfTest;
            AccelScales getAccelScale() { return (AccelScales)accelScale; }
            void setAccelScale(AccelScales enumVal) { accelScale = (int)enumVal; }

            long getValue() { return ((accelScale & 0x3) << 3) | ((accelZselfTest & 0x1) << 5) | ((accelYselfTest & 0x1) << 6) | ((accelXselfTest & 0x1) << 7); }
            void setValue(long val)
            {
                accelScale = (int)((val >> 3) & 0x3);
                accelZselfTest = (int)((val >> 5) & 0x1);
                accelYselfTest = (int)((val >> 6) & 0x1);
                accelXselfTest = (int)((val >> 7) & 0x1);
            }
        };

        class AccelConfig2Register : public Register
        {
        public:
			AccelConfig2Register(RegisterManager& regManager) : Register(regManager,0x1d, 1, false) { }
            int dlpfCfg;
            int accelFchoice;

            long getValue() { return ((dlpfCfg & 0x7) << 0) | ((accelFchoice & 0x1) << 3); }
            void setValue(long val)
            {
                dlpfCfg = (int)((val >> 0) & 0x7);
                accelFchoice = (int)((val >> 3) & 0x1);
            }
        };

        class LowPowerAccelerometerOdrControlRegister : public Register
        {
        public:
			LowPowerAccelerometerOdrControlRegister(RegisterManager& regManager) : Register(regManager,0x1e, 1, false) { }
            int value;

            long getValue() { return ((value & 0xF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xF);
            }
        };

        class WomThresholdRegister : public Register
        {
        public:
			WomThresholdRegister(RegisterManager& regManager) : Register(regManager,0x1f, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class FifoEnableRegister : public Register
        {
        public:
			FifoEnableRegister(RegisterManager& regManager) : Register(regManager,0x23, 1, false) { }
            int slv0;
            int slv1;
            int slv2;
            int accel;
            int gyroZout;
            int gyroYout;
            int gyroXout;
            int tempOut;

            long getValue() { return ((slv0 & 0x1) << 0) | ((slv1 & 0x1) << 1) | ((slv2 & 0x1) << 2) | ((accel & 0x1) << 3) | ((gyroZout & 0x1) << 4) | ((gyroYout & 0x1) << 5) | ((gyroXout & 0x1) << 6) | ((tempOut & 0x1) << 7); }
            void setValue(long val)
            {
                slv0 = (int)((val >> 0) & 0x1);
                slv1 = (int)((val >> 1) & 0x1);
                slv2 = (int)((val >> 2) & 0x1);
                accel = (int)((val >> 3) & 0x1);
                gyroZout = (int)((val >> 4) & 0x1);
                gyroYout = (int)((val >> 5) & 0x1);
                gyroXout = (int)((val >> 6) & 0x1);
                tempOut = (int)((val >> 7) & 0x1);
            }
        };

        class I2cMasterControlRegister : public Register
        {
        public:
			I2cMasterControlRegister(RegisterManager& regManager) : Register(regManager,0x24, 1, false) { }
            int i2cMasterClock;
            int i2cMstPnsr;
            int slv3FifoEn;
            int waitForEs;
            int multMstEn;

            long getValue() { return ((i2cMasterClock & 0xF) << 0) | ((i2cMstPnsr & 0x1) << 4) | ((slv3FifoEn & 0x1) << 5) | ((waitForEs & 0x1) << 6) | ((multMstEn & 0x1) << 7); }
            void setValue(long val)
            {
                i2cMasterClock = (int)((val >> 0) & 0xF);
                i2cMstPnsr = (int)((val >> 4) & 0x1);
                slv3FifoEn = (int)((val >> 5) & 0x1);
                waitForEs = (int)((val >> 6) & 0x1);
                multMstEn = (int)((val >> 7) & 0x1);
            }
        };

        class I2cSlv0AddrRegister : public Register
        {
        public:
			I2cSlv0AddrRegister(RegisterManager& regManager) : Register(regManager,0x25, 1, false) { }
            int id;
            int rnw;

            long getValue() { return ((id & 0x7F) << 0) | ((rnw & 0x1) << 7); }
            void setValue(long val)
            {
                id = (int)((val >> 0) & 0x7F);
                rnw = (int)((val >> 7) & 0x1);
            }
        };

        class I2cSlv0RegRegister : public Register
        {
        public:
			I2cSlv0RegRegister(RegisterManager& regManager) : Register(regManager,0x26, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class I2cSlv0CtrlRegister : public Register
        {
        public:
			I2cSlv0CtrlRegister(RegisterManager& regManager) : Register(regManager,0x27, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class I2cSlv1AddrRegister : public Register
        {
        public:
			I2cSlv1AddrRegister(RegisterManager& regManager) : Register(regManager,0x28, 1, false) { }
            int id;
            int rnw;

            long getValue() { return ((id & 0x7F) << 0) | ((rnw & 0x1) << 7); }
            void setValue(long val)
            {
                id = (int)((val >> 0) & 0x7F);
                rnw = (int)((val >> 7) & 0x1);
            }
        };

        class I2cSlv1RegRegister : public Register
        {
        public:
			I2cSlv1RegRegister(RegisterManager& regManager) : Register(regManager,0x29, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class I2cSlv1CtrlRegister : public Register
        {
        public:
			I2cSlv1CtrlRegister(RegisterManager& regManager) : Register(regManager,0x2a, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class I2cSlv2AddrRegister : public Register
        {
        public:
			I2cSlv2AddrRegister(RegisterManager& regManager) : Register(regManager,0x2b, 1, false) { }
            int id;
            int rnw;

            long getValue() { return ((id & 0x7F) << 0) | ((rnw & 0x1) << 7); }
            void setValue(long val)
            {
                id = (int)((val >> 0) & 0x7F);
                rnw = (int)((val >> 7) & 0x1);
            }
        };

        class I2cSlv2RegRegister : public Register
        {
        public:
			I2cSlv2RegRegister(RegisterManager& regManager) : Register(regManager,0x2c, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class I2cSlv2CtrlRegister : public Register
        {
        public:
			I2cSlv2CtrlRegister(RegisterManager& regManager) : Register(regManager,0x2d, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class I2cSlv3AddrRegister : public Register
        {
        public:
			I2cSlv3AddrRegister(RegisterManager& regManager) : Register(regManager,0x2e, 1, false) { }
            int id;
            int rnw;

            long getValue() { return ((id & 0x7F) << 0) | ((rnw & 0x1) << 7); }
            void setValue(long val)
            {
                id = (int)((val >> 0) & 0x7F);
                rnw = (int)((val >> 7) & 0x1);
            }
        };

        class I2cSlv3RegRegister : public Register
        {
        public:
			I2cSlv3RegRegister(RegisterManager& regManager) : Register(regManager,0x2f, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class I2cSlv3CtrlRegister : public Register
        {
        public:
			I2cSlv3CtrlRegister(RegisterManager& regManager) : Register(regManager,0x30, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class I2cSlv4AddrRegister : public Register
        {
        public:
			I2cSlv4AddrRegister(RegisterManager& regManager) : Register(regManager,0x31, 1, false) { }
            int id;
            int rnw;

            long getValue() { return ((id & 0x7F) << 0) | ((rnw & 0x1) << 7); }
            void setValue(long val)
            {
                id = (int)((val >> 0) & 0x7F);
                rnw = (int)((val >> 7) & 0x1);
            }
        };

        class I2cSlv4RegRegister : public Register
        {
        public:
			I2cSlv4RegRegister(RegisterManager& regManager) : Register(regManager,0x32, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class I2cSlv4DoRegister : public Register
        {
        public:
			I2cSlv4DoRegister(RegisterManager& regManager) : Register(regManager,0x33, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class I2cSlv4CtrlRegister : public Register
        {
        public:
			I2cSlv4CtrlRegister(RegisterManager& regManager) : Register(regManager,0x34, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class I2cSlv4DiRegister : public Register
        {
        public:
			I2cSlv4DiRegister(RegisterManager& regManager) : Register(regManager,0x35, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class I2cMstStatusRegister : public Register
        {
        public:
			I2cMstStatusRegister(RegisterManager& regManager) : Register(regManager,0x36, 1, false) { }
            int slv0Nack;
            int slv1Nack;
            int slv2Nack;
            int slv3Nack;
            int slv4Nack;
            int lostArb;
            int slv4Done;
            int passThrough;

            long getValue() { return ((slv0Nack & 0x1) << 0) | ((slv1Nack & 0x1) << 1) | ((slv2Nack & 0x1) << 2) | ((slv3Nack & 0x1) << 3) | ((slv4Nack & 0x1) << 4) | ((lostArb & 0x1) << 5) | ((slv4Done & 0x1) << 6) | ((passThrough & 0x1) << 7); }
            void setValue(long val)
            {
                slv0Nack = (int)((val >> 0) & 0x1);
                slv1Nack = (int)((val >> 1) & 0x1);
                slv2Nack = (int)((val >> 2) & 0x1);
                slv3Nack = (int)((val >> 3) & 0x1);
                slv4Nack = (int)((val >> 4) & 0x1);
                lostArb = (int)((val >> 5) & 0x1);
                slv4Done = (int)((val >> 6) & 0x1);
                passThrough = (int)((val >> 7) & 0x1);
            }
        };

        class IntPinCfgRegister : public Register
        {
        public:
			IntPinCfgRegister(RegisterManager& regManager) : Register(regManager,0x37, 1, false) { }
            int bypassEn;
            int fsyncIntModeEnable;
            int actlFsync;
            int intAnyRd2Clear;
            int latchIntEn;
            int open;
            int actl;

            long getValue() { return ((bypassEn & 0x1) << 1) | ((fsyncIntModeEnable & 0x1) << 2) | ((actlFsync & 0x1) << 3) | ((intAnyRd2Clear & 0x1) << 4) | ((latchIntEn & 0x1) << 5) | ((open & 0x1) << 6) | ((actl & 0x1) << 7); }
            void setValue(long val)
            {
                bypassEn = (int)((val >> 1) & 0x1);
                fsyncIntModeEnable = (int)((val >> 2) & 0x1);
                actlFsync = (int)((val >> 3) & 0x1);
                intAnyRd2Clear = (int)((val >> 4) & 0x1);
                latchIntEn = (int)((val >> 5) & 0x1);
                open = (int)((val >> 6) & 0x1);
                actl = (int)((val >> 7) & 0x1);
            }
        };

        class IntEnableRegister : public Register
        {
        public:
			IntEnableRegister(RegisterManager& regManager) : Register(regManager,0x38, 1, false) { }
            int RawReadyEnable;
            int fsyncIntEnable;
            int fifoIntEnable;
            int fifoOverflowEnable;
            int womEnable;

            long getValue() { return ((RawReadyEnable & 0x1) << 0) | ((fsyncIntEnable & 0x1) << 2) | ((fifoIntEnable & 0x1) << 3) | ((fifoOverflowEnable & 0x1) << 4) | ((womEnable & 0x1) << 1); }
            void setValue(long val)
            {
                RawReadyEnable = (int)((val >> 0) & 0x1);
                fsyncIntEnable = (int)((val >> 2) & 0x1);
                fifoIntEnable = (int)((val >> 3) & 0x1);
                fifoOverflowEnable = (int)((val >> 4) & 0x1);
                womEnable = (int)((val >> 1) & 0x1);
            }
        };

        class IntStatusRegister : public Register
        {
        public:
			IntStatusRegister(RegisterManager& regManager) : Register(regManager,0x3a, 1, false) { }
            int rawDataReadyInt;
            int fsyncInt;
            int fifoOverflowInt;
            int womInt;

            long getValue() { return ((rawDataReadyInt & 0x1) << 0) | ((fsyncInt & 0x1) << 2) | ((fifoOverflowInt & 0x1) << 3) | ((womInt & 0x1) << 1); }
            void setValue(long val)
            {
                rawDataReadyInt = (int)((val >> 0) & 0x1);
                fsyncInt = (int)((val >> 2) & 0x1);
                fifoOverflowInt = (int)((val >> 3) & 0x1);
                womInt = (int)((val >> 1) & 0x1);
            }
        };

        class Accel_xRegister : public Register
        {
        public:
			Accel_xRegister(RegisterManager& regManager) : Register(regManager,0x3b, 2, true) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class Accel_yRegister : public Register
        {
        public:
			Accel_yRegister(RegisterManager& regManager) : Register(regManager,0x3d, 2, true) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class Accel_zRegister : public Register
        {
        public:
			Accel_zRegister(RegisterManager& regManager) : Register(regManager,0x3f, 2, true) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class TempRegister : public Register
        {
        public:
			TempRegister(RegisterManager& regManager) : Register(regManager,0x41, 2, true) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class Gyro_xRegister : public Register
        {
        public:
			Gyro_xRegister(RegisterManager& regManager) : Register(regManager,0x43, 2, true) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class Gyro_yRegister : public Register
        {
        public:
			Gyro_yRegister(RegisterManager& regManager) : Register(regManager,0x45, 2, true) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class Gyro_zRegister : public Register
        {
        public:
			Gyro_zRegister(RegisterManager& regManager) : Register(regManager,0x47, 2, true) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)(((val >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
            }
        };

        class ExtSensDataRegister : public Register
        {
        public:
			ExtSensDataRegister(RegisterManager& regManager) : Register(regManager,0x49, 24, false) { }
            int value;

            long getValue() { return ((value & 0x0) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0x0);
            }
        };

        class I2cSlv0doRegister : public Register
        {
        public:
			I2cSlv0doRegister(RegisterManager& regManager) : Register(regManager,0x63, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class I2cSlv1doRegister : public Register
        {
        public:
			I2cSlv1doRegister(RegisterManager& regManager) : Register(regManager,0x64, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class I2cSlv2doRegister : public Register
        {
        public:
			I2cSlv2doRegister(RegisterManager& regManager) : Register(regManager,0x65, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class I2cSlv3doRegister : public Register
        {
        public:
			I2cSlv3doRegister(RegisterManager& regManager) : Register(regManager,0x66, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class I2cMstDelayCtrlRegister : public Register
        {
        public:
			I2cMstDelayCtrlRegister(RegisterManager& regManager) : Register(regManager,0x67, 1, false) { }
            int slv0DelayEn;
            int slv1DelayEn;
            int slv2DelayEn;
            int slv3DelayEn;
            int slv4DelayEn;
            int delayEsShadow;

            long getValue() { return ((slv0DelayEn & 0x1) << 0) | ((slv1DelayEn & 0x1) << 1) | ((slv2DelayEn & 0x1) << 2) | ((slv3DelayEn & 0x1) << 3) | ((slv4DelayEn & 0x1) << 4) | ((delayEsShadow & 0x1) << 2); }
            void setValue(long val)
            {
                slv0DelayEn = (int)((val >> 0) & 0x1);
                slv1DelayEn = (int)((val >> 1) & 0x1);
                slv2DelayEn = (int)((val >> 2) & 0x1);
                slv3DelayEn = (int)((val >> 3) & 0x1);
                slv4DelayEn = (int)((val >> 4) & 0x1);
                delayEsShadow = (int)((val >> 2) & 0x1);
            }
        };

        class SignalPathResetRegister : public Register
        {
        public:
			SignalPathResetRegister(RegisterManager& regManager) : Register(regManager,0x68, 1, false) { }
            int tempReset;
            int accelReset;
            int gyroReset;

            long getValue() { return ((tempReset & 0x1) << 0) | ((accelReset & 0x1) << 1) | ((gyroReset & 0x1) << 2); }
            void setValue(long val)
            {
                tempReset = (int)((val >> 0) & 0x1);
                accelReset = (int)((val >> 1) & 0x1);
                gyroReset = (int)((val >> 2) & 0x1);
            }
        };

        class AccelIntCtrlRegister : public Register
        {
        public:
			AccelIntCtrlRegister(RegisterManager& regManager) : Register(regManager,0x69, 1, false) { }
            int accelIntelMode;
            int accelIntelEnable;

            long getValue() { return ((accelIntelMode & 0x1) << 6) | ((accelIntelEnable & 0x1) << 7); }
            void setValue(long val)
            {
                accelIntelMode = (int)((val >> 6) & 0x1);
                accelIntelEnable = (int)((val >> 7) & 0x1);
            }
        };

        class UserCtrlRegister : public Register
        {
        public:
			UserCtrlRegister(RegisterManager& regManager) : Register(regManager,0x6a, 1, false) { }
            int sigConditionReset;
            int i2cMasterReset;
            int fifoReset;
            int i2cIfDisable;
            int i2cMasterEnable;
            int fifoEnable;

            long getValue() { return ((sigConditionReset & 0x1) << 0) | ((i2cMasterReset & 0x1) << 1) | ((fifoReset & 0x1) << 2) | ((i2cIfDisable & 0x1) << 1) | ((i2cMasterEnable & 0x1) << 2) | ((fifoEnable & 0x1) << 3); }
            void setValue(long val)
            {
                sigConditionReset = (int)((val >> 0) & 0x1);
                i2cMasterReset = (int)((val >> 1) & 0x1);
                fifoReset = (int)((val >> 2) & 0x1);
                i2cIfDisable = (int)((val >> 1) & 0x1);
                i2cMasterEnable = (int)((val >> 2) & 0x1);
                fifoEnable = (int)((val >> 3) & 0x1);
            }
        };

        class PowerMgmt1Register : public Register
        {
        public:
			PowerMgmt1Register(RegisterManager& regManager) : Register(regManager,0x6b, 1, false) { }
            int clockSel;
            int powerDownPtat;
            int gyroStandby;
            int cycle;
            int sleep;
            int reset;
            ClockSels getClockSel() { return (ClockSels)clockSel; }
            void setClockSel(ClockSels enumVal) { clockSel = (int)enumVal; }

            long getValue() { return ((clockSel & 0x7) << 0) | ((powerDownPtat & 0x1) << 3) | ((gyroStandby & 0x1) << 4) | ((cycle & 0x1) << 5) | ((sleep & 0x1) << 6) | ((reset & 0x1) << 7); }
            void setValue(long val)
            {
                clockSel = (int)((val >> 0) & 0x7);
                powerDownPtat = (int)((val >> 3) & 0x1);
                gyroStandby = (int)((val >> 4) & 0x1);
                cycle = (int)((val >> 5) & 0x1);
                sleep = (int)((val >> 6) & 0x1);
                reset = (int)((val >> 7) & 0x1);
            }
        };

        class PowerMgmt2Register : public Register
        {
        public:
			PowerMgmt2Register(RegisterManager& regManager) : Register(regManager,0x6c, 1, false) { }
            int disableZG;
            int disableYG;
            int disableXG;
            int disableZA;
            int disableYA;
            int disableXA;

            long getValue() { return ((disableZG & 0x1) << 0) | ((disableYG & 0x1) << 1) | ((disableXG & 0x1) << 2) | ((disableZA & 0x1) << 3) | ((disableYA & 0x1) << 4) | ((disableXA & 0x1) << 5); }
            void setValue(long val)
            {
                disableZG = (int)((val >> 0) & 0x1);
                disableYG = (int)((val >> 1) & 0x1);
                disableXG = (int)((val >> 2) & 0x1);
                disableZA = (int)((val >> 3) & 0x1);
                disableYA = (int)((val >> 4) & 0x1);
                disableXA = (int)((val >> 5) & 0x1);
            }
        };

        class FifoCountRegister : public Register
        {
        public:
			FifoCountRegister(RegisterManager& regManager) : Register(regManager,0x72, 2, false) { }
            int value;

            long getValue() { return ((value & 0x1FFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0x1FFF);
            }
        };

        class FifoRWRegister : public Register
        {
        public:
			FifoRWRegister(RegisterManager& regManager) : Register(regManager,0x74, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class WhoAmIRegister : public Register
        {
        public:
			WhoAmIRegister(RegisterManager& regManager) : Register(regManager,0x75, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class XAccelOffsetRegister : public Register
        {
        public:
			XAccelOffsetRegister(RegisterManager& regManager) : Register(regManager,0x77, 2, false) { }
            int value;

            long getValue() { return ((value & 0x7FFF) << 1); }
            void setValue(long val)
            {
                value = (int)((val >> 1) & 0x7FFF);
            }
        };

        class YAccelOffsetRegister : public Register
        {
        public:
			YAccelOffsetRegister(RegisterManager& regManager) : Register(regManager,0x7a, 2, false) { }
            int value;

            long getValue() { return ((value & 0x7FFF) << 1); }
            void setValue(long val)
            {
                value = (int)((val >> 1) & 0x7FFF);
            }
        };

        class ZAccelOffsetRegister : public Register
        {
        public:
			ZAccelOffsetRegister(RegisterManager& regManager) : Register(regManager,0x7d, 2, false) { }
            int value;

            long getValue() { return ((value & 0x7FFF) << 1); }
            void setValue(long val)
            {
                value = (int)((val >> 1) & 0x7FFF);
            }
        };

            Self_test_x_gyroRegister self_test_x_gyro;
            Self_test_y_gyroRegister self_test_y_gyro;
            Self_test_z_gyroRegister self_test_z_gyro;
            Self_test_x_accelRegister self_test_x_accel;
            Self_test_y_accelRegister self_test_y_accel;
            Self_test_z_accelRegister self_test_z_accel;
            XGyroOffsUsrRegister xGyroOffsUsr;
            YGyroOffsUsrRegister yGyroOffsUsr;
            ZGyroOffsUsrRegister zGyroOffsUsr;
            SampleRateDividerRegister sampleRateDivider;
            ConfigurationRegister configuration;
            GyroConfigRegister gyroConfig;
            AccelConfigRegister accelConfig;
            AccelConfig2Register accelConfig2;
            LowPowerAccelerometerOdrControlRegister lowPowerAccelerometerOdrControl;
            WomThresholdRegister womThreshold;
            FifoEnableRegister fifoEnable;
            I2cMasterControlRegister i2cMasterControl;
            I2cSlv0AddrRegister i2cSlv0Addr;
            I2cSlv0RegRegister i2cSlv0Reg;
            I2cSlv0CtrlRegister i2cSlv0Ctrl;
            I2cSlv1AddrRegister i2cSlv1Addr;
            I2cSlv1RegRegister i2cSlv1Reg;
            I2cSlv1CtrlRegister i2cSlv1Ctrl;
            I2cSlv2AddrRegister i2cSlv2Addr;
            I2cSlv2RegRegister i2cSlv2Reg;
            I2cSlv2CtrlRegister i2cSlv2Ctrl;
            I2cSlv3AddrRegister i2cSlv3Addr;
            I2cSlv3RegRegister i2cSlv3Reg;
            I2cSlv3CtrlRegister i2cSlv3Ctrl;
            I2cSlv4AddrRegister i2cSlv4Addr;
            I2cSlv4RegRegister i2cSlv4Reg;
            I2cSlv4DoRegister i2cSlv4Do;
            I2cSlv4CtrlRegister i2cSlv4Ctrl;
            I2cSlv4DiRegister i2cSlv4Di;
            I2cMstStatusRegister i2cMstStatus;
            IntPinCfgRegister intPinCfg;
            IntEnableRegister intEnable;
            IntStatusRegister intStatus;
            Accel_xRegister accel_x;
            Accel_yRegister accel_y;
            Accel_zRegister accel_z;
            TempRegister temp;
            Gyro_xRegister gyro_x;
            Gyro_yRegister gyro_y;
            Gyro_zRegister gyro_z;
            ExtSensDataRegister extSensData;
            I2cSlv0doRegister i2cSlv0do;
            I2cSlv1doRegister i2cSlv1do;
            I2cSlv2doRegister i2cSlv2do;
            I2cSlv3doRegister i2cSlv3do;
            I2cMstDelayCtrlRegister i2cMstDelayCtrl;
            SignalPathResetRegister signalPathReset;
            AccelIntCtrlRegister accelIntCtrl;
            UserCtrlRegister userCtrl;
            PowerMgmt1Register powerMgmt1;
            PowerMgmt2Register powerMgmt2;
            FifoCountRegister fifoCount;
            FifoRWRegister fifoRW;
            WhoAmIRegister whoAmI;
            XAccelOffsetRegister xAccelOffset;
            YAccelOffsetRegister yAccelOffset;
            ZAccelOffsetRegister zAccelOffset;

		Mpu6050Registers(SMBusDevice& device) : RegisterManager(device, true), self_test_x_gyro(*this), self_test_y_gyro(*this), self_test_z_gyro(*this), self_test_x_accel(*this), self_test_y_accel(*this), self_test_z_accel(*this), xGyroOffsUsr(*this), yGyroOffsUsr(*this), zGyroOffsUsr(*this), sampleRateDivider(*this), configuration(*this), gyroConfig(*this), accelConfig(*this), accelConfig2(*this), lowPowerAccelerometerOdrControl(*this), womThreshold(*this), fifoEnable(*this), i2cMasterControl(*this), i2cSlv0Addr(*this), i2cSlv0Reg(*this), i2cSlv0Ctrl(*this), i2cSlv1Addr(*this), i2cSlv1Reg(*this), i2cSlv1Ctrl(*this), i2cSlv2Addr(*this), i2cSlv2Reg(*this), i2cSlv2Ctrl(*this), i2cSlv3Addr(*this), i2cSlv3Reg(*this), i2cSlv3Ctrl(*this), i2cSlv4Addr(*this), i2cSlv4Reg(*this), i2cSlv4Do(*this), i2cSlv4Ctrl(*this), i2cSlv4Di(*this), i2cMstStatus(*this), intPinCfg(*this), intEnable(*this), intStatus(*this), accel_x(*this), accel_y(*this), accel_z(*this), temp(*this), gyro_x(*this), gyro_y(*this), gyro_z(*this), extSensData(*this), i2cSlv0do(*this), i2cSlv1do(*this), i2cSlv2do(*this), i2cSlv3do(*this), i2cMstDelayCtrl(*this), signalPathReset(*this), accelIntCtrl(*this), userCtrl(*this), powerMgmt1(*this), powerMgmt2(*this), fifoCount(*this), fifoRW(*this), whoAmI(*this), xAccelOffset(*this), yAccelOffset(*this), zAccelOffset(*this)
		{ 
			registers.push_back(&self_test_x_gyro);
			registers.push_back(&self_test_y_gyro);
			registers.push_back(&self_test_z_gyro);
			registers.push_back(&self_test_x_accel);
			registers.push_back(&self_test_y_accel);
			registers.push_back(&self_test_z_accel);
			registers.push_back(&xGyroOffsUsr);
			registers.push_back(&yGyroOffsUsr);
			registers.push_back(&zGyroOffsUsr);
			registers.push_back(&sampleRateDivider);
			registers.push_back(&configuration);
			registers.push_back(&gyroConfig);
			registers.push_back(&accelConfig);
			registers.push_back(&accelConfig2);
			registers.push_back(&lowPowerAccelerometerOdrControl);
			registers.push_back(&womThreshold);
			registers.push_back(&fifoEnable);
			registers.push_back(&i2cMasterControl);
			registers.push_back(&i2cSlv0Addr);
			registers.push_back(&i2cSlv0Reg);
			registers.push_back(&i2cSlv0Ctrl);
			registers.push_back(&i2cSlv1Addr);
			registers.push_back(&i2cSlv1Reg);
			registers.push_back(&i2cSlv1Ctrl);
			registers.push_back(&i2cSlv2Addr);
			registers.push_back(&i2cSlv2Reg);
			registers.push_back(&i2cSlv2Ctrl);
			registers.push_back(&i2cSlv3Addr);
			registers.push_back(&i2cSlv3Reg);
			registers.push_back(&i2cSlv3Ctrl);
			registers.push_back(&i2cSlv4Addr);
			registers.push_back(&i2cSlv4Reg);
			registers.push_back(&i2cSlv4Do);
			registers.push_back(&i2cSlv4Ctrl);
			registers.push_back(&i2cSlv4Di);
			registers.push_back(&i2cMstStatus);
			registers.push_back(&intPinCfg);
			registers.push_back(&intEnable);
			registers.push_back(&intStatus);
			registers.push_back(&accel_x);
			registers.push_back(&accel_y);
			registers.push_back(&accel_z);
			registers.push_back(&temp);
			registers.push_back(&gyro_x);
			registers.push_back(&gyro_y);
			registers.push_back(&gyro_z);
			registers.push_back(&extSensData);
			registers.push_back(&i2cSlv0do);
			registers.push_back(&i2cSlv1do);
			registers.push_back(&i2cSlv2do);
			registers.push_back(&i2cSlv3do);
			registers.push_back(&i2cMstDelayCtrl);
			registers.push_back(&signalPathReset);
			registers.push_back(&accelIntCtrl);
			registers.push_back(&userCtrl);
			registers.push_back(&powerMgmt1);
			registers.push_back(&powerMgmt2);
			registers.push_back(&fifoCount);
			registers.push_back(&fifoRW);
			registers.push_back(&whoAmI);
			registers.push_back(&xAccelOffset);
			registers.push_back(&yAccelOffset);
			registers.push_back(&zAccelOffset);
		}
    };
 }  }  } }