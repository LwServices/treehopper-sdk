/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Treehopper;
using Treehopper.Libraries.Utilities;

namespace Treehopper.Libraries.Sensors.Optical
{
    public partial class Vcnl4010
    {
        internal enum Rates
        {
            Hz_1_95 = 0,
            Hz_3_90625 = 1,
            Hz_7_8125 = 2,
            Hz_16_625 = 3,
            Hz_31_25 = 4,
            Hz_62_5 = 5,
            Hz_125 = 6,
            Hz_250 = 7
        }

        internal enum AlsRates
        {
            Hz_1 = 0,
            Hz_2 = 1,
            Hz_3 = 2,
            Hz_4 = 3,
            Hz_5 = 4,
            Hz_6 = 5,
            Hz_8 = 6,
            Hz_10 = 7
        }

        internal enum IntCountExceeds
        {
            count_1 = 0,
            count_2 = 1,
            count_4 = 2,
            count_8 = 3,
            count_16 = 4,
            count_32 = 5,
            count_64 = 6,
            count_128 = 7
        }

        protected class Vcnl4010Registers : RegisterManager
        {
            internal Vcnl4010Registers(SMBusDevice dev = null) : base(dev, true)
            {
                Command = new CommandRegister(this);
                _registers.Add(Command);
                ProductId = new ProductIdRegister(this);
                _registers.Add(ProductId);
                ProximityRate = new ProximityRateRegister(this);
                _registers.Add(ProximityRate);
                LedCurrent = new LedCurrentRegister(this);
                _registers.Add(LedCurrent);
                AmbientLightParameters = new AmbientLightParametersRegister(this);
                _registers.Add(AmbientLightParameters);
                AmbientLightResult = new AmbientLightResultRegister(this);
                _registers.Add(AmbientLightResult);
                ProximityResult = new ProximityResultRegister(this);
                _registers.Add(ProximityResult);
                InterruptControl = new InterruptControlRegister(this);
                _registers.Add(InterruptControl);
                LowThreshold = new LowThresholdRegister(this);
                _registers.Add(LowThreshold);
                HighThreshold = new HighThresholdRegister(this);
                _registers.Add(HighThreshold);
                InterruptStatus = new InterruptStatusRegister(this);
                _registers.Add(InterruptStatus);
                ProxModulatorTimingAdustment = new ProxModulatorTimingAdustmentRegister(this);
                _registers.Add(ProxModulatorTimingAdustment);
            }

            internal CommandRegister Command;
            internal ProductIdRegister ProductId;
            internal ProximityRateRegister ProximityRate;
            internal LedCurrentRegister LedCurrent;
            internal AmbientLightParametersRegister AmbientLightParameters;
            internal AmbientLightResultRegister AmbientLightResult;
            internal ProximityResultRegister ProximityResult;
            internal InterruptControlRegister InterruptControl;
            internal LowThresholdRegister LowThreshold;
            internal HighThresholdRegister HighThreshold;
            internal InterruptStatusRegister InterruptStatus;
            internal ProxModulatorTimingAdustmentRegister ProxModulatorTimingAdustment;

            internal class CommandRegister : Register
            {
                internal CommandRegister(RegisterManager regManager) : base(regManager, 0x80, 1, false) { }

                public int SelfTimedEnable { get; set; }
                public int ProxPeriodicEnable { get; set; }
                public int AlsPeriodicEnable { get; set; }
                public int ProxOnDemandStart { get; set; }
                public int AlsOnDemandStart { get; set; }
                public int ProxDataReady { get; set; }
                public int AlsDataReady { get; set; }
                public int ConfigLock { get; set; }

                public async Task<CommandRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((SelfTimedEnable & 0x1) << 0) | ((ProxPeriodicEnable & 0x1) << 1) | ((AlsPeriodicEnable & 0x1) << 2) | ((ProxOnDemandStart & 0x1) << 3) | ((AlsOnDemandStart & 0x1) << 4) | ((ProxDataReady & 0x1) << 5) | ((AlsDataReady & 0x1) << 6) | ((ConfigLock & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    SelfTimedEnable = (int)((value >> 0) & 0x1);
                    ProxPeriodicEnable = (int)((value >> 1) & 0x1);
                    AlsPeriodicEnable = (int)((value >> 2) & 0x1);
                    ProxOnDemandStart = (int)((value >> 3) & 0x1);
                    AlsOnDemandStart = (int)((value >> 4) & 0x1);
                    ProxDataReady = (int)((value >> 5) & 0x1);
                    AlsDataReady = (int)((value >> 6) & 0x1);
                    ConfigLock = (int)((value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"SelfTimedEnable: { SelfTimedEnable } (offset: 0, width: 1)\r\n";
                    retVal += $"ProxPeriodicEnable: { ProxPeriodicEnable } (offset: 1, width: 1)\r\n";
                    retVal += $"AlsPeriodicEnable: { AlsPeriodicEnable } (offset: 2, width: 1)\r\n";
                    retVal += $"ProxOnDemandStart: { ProxOnDemandStart } (offset: 3, width: 1)\r\n";
                    retVal += $"AlsOnDemandStart: { AlsOnDemandStart } (offset: 4, width: 1)\r\n";
                    retVal += $"ProxDataReady: { ProxDataReady } (offset: 5, width: 1)\r\n";
                    retVal += $"AlsDataReady: { AlsDataReady } (offset: 6, width: 1)\r\n";
                    retVal += $"ConfigLock: { ConfigLock } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class ProductIdRegister : Register
            {
                internal ProductIdRegister(RegisterManager regManager) : base(regManager, 0x82, 1, false) { }

                public int RevisionId { get; set; }
                public int ProductId { get; set; }

                public async Task<ProductIdRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((RevisionId & 0xF) << 0) | ((ProductId & 0xF) << 4); }
                internal override void SetValue(long value)
                {
                    RevisionId = (int)((value >> 0) & 0xF);
                    ProductId = (int)((value >> 4) & 0xF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"RevisionId: { RevisionId } (offset: 0, width: 4)\r\n";
                    retVal += $"ProductId: { ProductId } (offset: 4, width: 4)\r\n";
                    return retVal;
                }
            }
            internal class ProximityRateRegister : Register
            {
                internal ProximityRateRegister(RegisterManager regManager) : base(regManager, 0x82, 1, false) { }

                public int Rate { get; set; }
                public Rates GetRate() { return (Rates)Rate; }
                public void SetRate(Rates enumVal) { Rate = (int)enumVal; }

                public async Task<ProximityRateRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Rate & 0xF) << 0); }
                internal override void SetValue(long value)
                {
                    Rate = (int)((value >> 0) & 0xF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Rate: { Rate } (offset: 0, width: 4)\r\n";
                    return retVal;
                }
            }
            internal class LedCurrentRegister : Register
            {
                internal LedCurrentRegister(RegisterManager regManager) : base(regManager, 0x83, 1, false) { }

                public int IrLedCurrentValue { get; set; }
                public int FuseProgId { get; set; }

                public async Task<LedCurrentRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((IrLedCurrentValue & 0x3F) << 0) | ((FuseProgId & 0x3) << 6); }
                internal override void SetValue(long value)
                {
                    IrLedCurrentValue = (int)((value >> 0) & 0x3F);
                    FuseProgId = (int)((value >> 6) & 0x3);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"IrLedCurrentValue: { IrLedCurrentValue } (offset: 0, width: 6)\r\n";
                    retVal += $"FuseProgId: { FuseProgId } (offset: 6, width: 2)\r\n";
                    return retVal;
                }
            }
            internal class AmbientLightParametersRegister : Register
            {
                internal AmbientLightParametersRegister(RegisterManager regManager) : base(regManager, 0x84, 1, false) { }

                public int AveragingSamples { get; set; }
                public int AutoOffsetCompensation { get; set; }
                public int AlsRate { get; set; }
                public int ContinuousConversionMode { get; set; }
                public AlsRates GetAlsRate() { return (AlsRates)AlsRate; }
                public void SetAlsRate(AlsRates enumVal) { AlsRate = (int)enumVal; }

                public async Task<AmbientLightParametersRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((AveragingSamples & 0x7) << 0) | ((AutoOffsetCompensation & 0x1) << 3) | ((AlsRate & 0x7) << 4) | ((ContinuousConversionMode & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    AveragingSamples = (int)((value >> 0) & 0x7);
                    AutoOffsetCompensation = (int)((value >> 3) & 0x1);
                    AlsRate = (int)((value >> 4) & 0x7);
                    ContinuousConversionMode = (int)((value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"AveragingSamples: { AveragingSamples } (offset: 0, width: 3)\r\n";
                    retVal += $"AutoOffsetCompensation: { AutoOffsetCompensation } (offset: 3, width: 1)\r\n";
                    retVal += $"AlsRate: { AlsRate } (offset: 4, width: 3)\r\n";
                    retVal += $"ContinuousConversionMode: { ContinuousConversionMode } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class AmbientLightResultRegister : Register
            {
                internal AmbientLightResultRegister(RegisterManager regManager) : base(regManager, 0x85, 2, false) { }

                public int Value { get; set; }

                public async Task<AmbientLightResultRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFFFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class ProximityResultRegister : Register
            {
                internal ProximityResultRegister(RegisterManager regManager) : base(regManager, 0x87, 2, true) { }

                public int Value { get; set; }

                public async Task<ProximityResultRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFFFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class InterruptControlRegister : Register
            {
                internal InterruptControlRegister(RegisterManager regManager) : base(regManager, 0x89, 1, false) { }

                public int InterruptThresholdSelect { get; set; }
                public int InterruptThresholdEnable { get; set; }
                public int InterruptAlsReadyEnable { get; set; }
                public int IntCountExceed { get; set; }
                public IntCountExceeds GetIntCountExceed() { return (IntCountExceeds)IntCountExceed; }
                public void SetIntCountExceed(IntCountExceeds enumVal) { IntCountExceed = (int)enumVal; }

                public async Task<InterruptControlRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((InterruptThresholdSelect & 0x1) << 0) | ((InterruptThresholdEnable & 0x1) << 1) | ((InterruptAlsReadyEnable & 0x1) << 2) | ((IntCountExceed & 0x7) << 5); }
                internal override void SetValue(long value)
                {
                    InterruptThresholdSelect = (int)((value >> 0) & 0x1);
                    InterruptThresholdEnable = (int)((value >> 1) & 0x1);
                    InterruptAlsReadyEnable = (int)((value >> 2) & 0x1);
                    IntCountExceed = (int)((value >> 5) & 0x7);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"InterruptThresholdSelect: { InterruptThresholdSelect } (offset: 0, width: 1)\r\n";
                    retVal += $"InterruptThresholdEnable: { InterruptThresholdEnable } (offset: 1, width: 1)\r\n";
                    retVal += $"InterruptAlsReadyEnable: { InterruptAlsReadyEnable } (offset: 2, width: 1)\r\n";
                    retVal += $"IntCountExceed: { IntCountExceed } (offset: 5, width: 3)\r\n";
                    return retVal;
                }
            }
            internal class LowThresholdRegister : Register
            {
                internal LowThresholdRegister(RegisterManager regManager) : base(regManager, 0x8A, 2, true) { }

                public int Value { get; set; }

                public async Task<LowThresholdRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFFFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class HighThresholdRegister : Register
            {
                internal HighThresholdRegister(RegisterManager regManager) : base(regManager, 0x8C, 2, true) { }

                public int Value { get; set; }

                public async Task<HighThresholdRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFFFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class InterruptStatusRegister : Register
            {
                internal InterruptStatusRegister(RegisterManager regManager) : base(regManager, 0x8E, 1, false) { }

                public int IntThresholdHighExceeded { get; set; }
                public int IntThresholdLowExceeded { get; set; }
                public int IntAlsReady { get; set; }
                public int IntProxReady { get; set; }

                public async Task<InterruptStatusRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((IntThresholdHighExceeded & 0x1) << 0) | ((IntThresholdLowExceeded & 0x1) << 1) | ((IntAlsReady & 0x1) << 2) | ((IntProxReady & 0x1) << 3); }
                internal override void SetValue(long value)
                {
                    IntThresholdHighExceeded = (int)((value >> 0) & 0x1);
                    IntThresholdLowExceeded = (int)((value >> 1) & 0x1);
                    IntAlsReady = (int)((value >> 2) & 0x1);
                    IntProxReady = (int)((value >> 3) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"IntThresholdHighExceeded: { IntThresholdHighExceeded } (offset: 0, width: 1)\r\n";
                    retVal += $"IntThresholdLowExceeded: { IntThresholdLowExceeded } (offset: 1, width: 1)\r\n";
                    retVal += $"IntAlsReady: { IntAlsReady } (offset: 2, width: 1)\r\n";
                    retVal += $"IntProxReady: { IntProxReady } (offset: 3, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class ProxModulatorTimingAdustmentRegister : Register
            {
                internal ProxModulatorTimingAdustmentRegister(RegisterManager regManager) : base(regManager, 0x8F, 1, false) { }

                public int ModulationDeadTime { get; set; }
                public int ProximityFrequency { get; set; }
                public int ModulationDelayTime { get; set; }

                public async Task<ProxModulatorTimingAdustmentRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((ModulationDeadTime & 0x7) << 0) | ((ProximityFrequency & 0x3) << 3) | ((ModulationDelayTime & 0x7) << 5); }
                internal override void SetValue(long value)
                {
                    ModulationDeadTime = (int)((value >> 0) & 0x7);
                    ProximityFrequency = (int)((value >> 3) & 0x3);
                    ModulationDelayTime = (int)((value >> 5) & 0x7);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"ModulationDeadTime: { ModulationDeadTime } (offset: 0, width: 3)\r\n";
                    retVal += $"ProximityFrequency: { ProximityFrequency } (offset: 3, width: 2)\r\n";
                    retVal += $"ModulationDelayTime: { ModulationDelayTime } (offset: 5, width: 3)\r\n";
                    return retVal;
                }
            }
        }
    }
}