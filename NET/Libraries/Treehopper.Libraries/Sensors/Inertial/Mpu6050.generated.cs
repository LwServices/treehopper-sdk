/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Treehopper;
using Treehopper.Libraries.Utilities;

namespace Treehopper.Libraries.Sensors.Inertial
{
    public partial class Mpu6050
    {
        public enum ExtSyncSets
        {
            Disabled = 0,
            TempOutL = 1,
            GyroXoutL = 2,
            GyroYoutL = 3,
            GyroZoutL = 4,
            AccelXoutL = 5,
            AccelYoutL = 6,
            AccelZoutL = 7
        }

        public enum GyroScales
        {
            Dps_250 = 0,
            Dps_500 = 1,
            Dps_1000 = 2,
            Dps_2000 = 3
        }

        public enum AccelScales
        {
            Fs_2g = 0,
            Fs_4g = 1,
            Fs_8g = 2,
            Fs_16g = 3
        }

        public enum ClockSels
        {
            InternalOscillator = 0,
            AutoSelect = 1,
            Reset = 7
        }

        protected class Mpu6050Registers : RegisterManager
        {
            internal Mpu6050Registers(SMBusDevice dev = null) : base(dev, true)
            {
                Self_test_x_gyro = new Self_test_x_gyroRegister(this);
                _registers.Add(Self_test_x_gyro);
                Self_test_y_gyro = new Self_test_y_gyroRegister(this);
                _registers.Add(Self_test_y_gyro);
                Self_test_z_gyro = new Self_test_z_gyroRegister(this);
                _registers.Add(Self_test_z_gyro);
                Self_test_x_accel = new Self_test_x_accelRegister(this);
                _registers.Add(Self_test_x_accel);
                Self_test_y_accel = new Self_test_y_accelRegister(this);
                _registers.Add(Self_test_y_accel);
                Self_test_z_accel = new Self_test_z_accelRegister(this);
                _registers.Add(Self_test_z_accel);
                XGyroOffsUsr = new XGyroOffsUsrRegister(this);
                _registers.Add(XGyroOffsUsr);
                YGyroOffsUsr = new YGyroOffsUsrRegister(this);
                _registers.Add(YGyroOffsUsr);
                ZGyroOffsUsr = new ZGyroOffsUsrRegister(this);
                _registers.Add(ZGyroOffsUsr);
                SampleRateDivider = new SampleRateDividerRegister(this);
                _registers.Add(SampleRateDivider);
                Configuration = new ConfigurationRegister(this);
                _registers.Add(Configuration);
                GyroConfig = new GyroConfigRegister(this);
                _registers.Add(GyroConfig);
                AccelConfig = new AccelConfigRegister(this);
                _registers.Add(AccelConfig);
                AccelConfig2 = new AccelConfig2Register(this);
                _registers.Add(AccelConfig2);
                LowPowerAccelerometerOdrControl = new LowPowerAccelerometerOdrControlRegister(this);
                _registers.Add(LowPowerAccelerometerOdrControl);
                WomThreshold = new WomThresholdRegister(this);
                _registers.Add(WomThreshold);
                FifoEnable = new FifoEnableRegister(this);
                _registers.Add(FifoEnable);
                I2cMasterControl = new I2cMasterControlRegister(this);
                _registers.Add(I2cMasterControl);
                I2cSlv0Addr = new I2cSlv0AddrRegister(this);
                _registers.Add(I2cSlv0Addr);
                I2cSlv0Reg = new I2cSlv0RegRegister(this);
                _registers.Add(I2cSlv0Reg);
                I2cSlv0Ctrl = new I2cSlv0CtrlRegister(this);
                _registers.Add(I2cSlv0Ctrl);
                I2cSlv1Addr = new I2cSlv1AddrRegister(this);
                _registers.Add(I2cSlv1Addr);
                I2cSlv1Reg = new I2cSlv1RegRegister(this);
                _registers.Add(I2cSlv1Reg);
                I2cSlv1Ctrl = new I2cSlv1CtrlRegister(this);
                _registers.Add(I2cSlv1Ctrl);
                I2cSlv2Addr = new I2cSlv2AddrRegister(this);
                _registers.Add(I2cSlv2Addr);
                I2cSlv2Reg = new I2cSlv2RegRegister(this);
                _registers.Add(I2cSlv2Reg);
                I2cSlv2Ctrl = new I2cSlv2CtrlRegister(this);
                _registers.Add(I2cSlv2Ctrl);
                I2cSlv3Addr = new I2cSlv3AddrRegister(this);
                _registers.Add(I2cSlv3Addr);
                I2cSlv3Reg = new I2cSlv3RegRegister(this);
                _registers.Add(I2cSlv3Reg);
                I2cSlv3Ctrl = new I2cSlv3CtrlRegister(this);
                _registers.Add(I2cSlv3Ctrl);
                I2cSlv4Addr = new I2cSlv4AddrRegister(this);
                _registers.Add(I2cSlv4Addr);
                I2cSlv4Reg = new I2cSlv4RegRegister(this);
                _registers.Add(I2cSlv4Reg);
                I2cSlv4Do = new I2cSlv4DoRegister(this);
                _registers.Add(I2cSlv4Do);
                I2cSlv4Ctrl = new I2cSlv4CtrlRegister(this);
                _registers.Add(I2cSlv4Ctrl);
                I2cSlv4Di = new I2cSlv4DiRegister(this);
                _registers.Add(I2cSlv4Di);
                I2cMstStatus = new I2cMstStatusRegister(this);
                _registers.Add(I2cMstStatus);
                IntPinCfg = new IntPinCfgRegister(this);
                _registers.Add(IntPinCfg);
                IntEnable = new IntEnableRegister(this);
                _registers.Add(IntEnable);
                IntStatus = new IntStatusRegister(this);
                _registers.Add(IntStatus);
                Accel_x = new Accel_xRegister(this);
                _registers.Add(Accel_x);
                Accel_y = new Accel_yRegister(this);
                _registers.Add(Accel_y);
                Accel_z = new Accel_zRegister(this);
                _registers.Add(Accel_z);
                Temp = new TempRegister(this);
                _registers.Add(Temp);
                Gyro_x = new Gyro_xRegister(this);
                _registers.Add(Gyro_x);
                Gyro_y = new Gyro_yRegister(this);
                _registers.Add(Gyro_y);
                Gyro_z = new Gyro_zRegister(this);
                _registers.Add(Gyro_z);
                ExtSensData = new ExtSensDataRegister(this);
                _registers.Add(ExtSensData);
                I2cSlv0do = new I2cSlv0doRegister(this);
                _registers.Add(I2cSlv0do);
                I2cSlv1do = new I2cSlv1doRegister(this);
                _registers.Add(I2cSlv1do);
                I2cSlv2do = new I2cSlv2doRegister(this);
                _registers.Add(I2cSlv2do);
                I2cSlv3do = new I2cSlv3doRegister(this);
                _registers.Add(I2cSlv3do);
                I2cMstDelayCtrl = new I2cMstDelayCtrlRegister(this);
                _registers.Add(I2cMstDelayCtrl);
                SignalPathReset = new SignalPathResetRegister(this);
                _registers.Add(SignalPathReset);
                AccelIntCtrl = new AccelIntCtrlRegister(this);
                _registers.Add(AccelIntCtrl);
                UserCtrl = new UserCtrlRegister(this);
                _registers.Add(UserCtrl);
                PowerMgmt1 = new PowerMgmt1Register(this);
                _registers.Add(PowerMgmt1);
                PowerMgmt2 = new PowerMgmt2Register(this);
                _registers.Add(PowerMgmt2);
                FifoCount = new FifoCountRegister(this);
                _registers.Add(FifoCount);
                FifoRW = new FifoRWRegister(this);
                _registers.Add(FifoRW);
                WhoAmI = new WhoAmIRegister(this);
                _registers.Add(WhoAmI);
                XAccelOffset = new XAccelOffsetRegister(this);
                _registers.Add(XAccelOffset);
                YAccelOffset = new YAccelOffsetRegister(this);
                _registers.Add(YAccelOffset);
                ZAccelOffset = new ZAccelOffsetRegister(this);
                _registers.Add(ZAccelOffset);
            }

            internal Self_test_x_gyroRegister Self_test_x_gyro;
            internal Self_test_y_gyroRegister Self_test_y_gyro;
            internal Self_test_z_gyroRegister Self_test_z_gyro;
            internal Self_test_x_accelRegister Self_test_x_accel;
            internal Self_test_y_accelRegister Self_test_y_accel;
            internal Self_test_z_accelRegister Self_test_z_accel;
            internal XGyroOffsUsrRegister XGyroOffsUsr;
            internal YGyroOffsUsrRegister YGyroOffsUsr;
            internal ZGyroOffsUsrRegister ZGyroOffsUsr;
            internal SampleRateDividerRegister SampleRateDivider;
            internal ConfigurationRegister Configuration;
            internal GyroConfigRegister GyroConfig;
            internal AccelConfigRegister AccelConfig;
            internal AccelConfig2Register AccelConfig2;
            internal LowPowerAccelerometerOdrControlRegister LowPowerAccelerometerOdrControl;
            internal WomThresholdRegister WomThreshold;
            internal FifoEnableRegister FifoEnable;
            internal I2cMasterControlRegister I2cMasterControl;
            internal I2cSlv0AddrRegister I2cSlv0Addr;
            internal I2cSlv0RegRegister I2cSlv0Reg;
            internal I2cSlv0CtrlRegister I2cSlv0Ctrl;
            internal I2cSlv1AddrRegister I2cSlv1Addr;
            internal I2cSlv1RegRegister I2cSlv1Reg;
            internal I2cSlv1CtrlRegister I2cSlv1Ctrl;
            internal I2cSlv2AddrRegister I2cSlv2Addr;
            internal I2cSlv2RegRegister I2cSlv2Reg;
            internal I2cSlv2CtrlRegister I2cSlv2Ctrl;
            internal I2cSlv3AddrRegister I2cSlv3Addr;
            internal I2cSlv3RegRegister I2cSlv3Reg;
            internal I2cSlv3CtrlRegister I2cSlv3Ctrl;
            internal I2cSlv4AddrRegister I2cSlv4Addr;
            internal I2cSlv4RegRegister I2cSlv4Reg;
            internal I2cSlv4DoRegister I2cSlv4Do;
            internal I2cSlv4CtrlRegister I2cSlv4Ctrl;
            internal I2cSlv4DiRegister I2cSlv4Di;
            internal I2cMstStatusRegister I2cMstStatus;
            internal IntPinCfgRegister IntPinCfg;
            internal IntEnableRegister IntEnable;
            internal IntStatusRegister IntStatus;
            internal Accel_xRegister Accel_x;
            internal Accel_yRegister Accel_y;
            internal Accel_zRegister Accel_z;
            internal TempRegister Temp;
            internal Gyro_xRegister Gyro_x;
            internal Gyro_yRegister Gyro_y;
            internal Gyro_zRegister Gyro_z;
            internal ExtSensDataRegister ExtSensData;
            internal I2cSlv0doRegister I2cSlv0do;
            internal I2cSlv1doRegister I2cSlv1do;
            internal I2cSlv2doRegister I2cSlv2do;
            internal I2cSlv3doRegister I2cSlv3do;
            internal I2cMstDelayCtrlRegister I2cMstDelayCtrl;
            internal SignalPathResetRegister SignalPathReset;
            internal AccelIntCtrlRegister AccelIntCtrl;
            internal UserCtrlRegister UserCtrl;
            internal PowerMgmt1Register PowerMgmt1;
            internal PowerMgmt2Register PowerMgmt2;
            internal FifoCountRegister FifoCount;
            internal FifoRWRegister FifoRW;
            internal WhoAmIRegister WhoAmI;
            internal XAccelOffsetRegister XAccelOffset;
            internal YAccelOffsetRegister YAccelOffset;
            internal ZAccelOffsetRegister ZAccelOffset;

            internal class Self_test_x_gyroRegister : Register
            {
                internal Self_test_x_gyroRegister(RegisterManager regManager) : base(regManager, 0x00, 1, false) { }

                public int Value { get; set; }

                public async Task<Self_test_x_gyroRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Self_test_y_gyroRegister : Register
            {
                internal Self_test_y_gyroRegister(RegisterManager regManager) : base(regManager, 0x01, 1, false) { }

                public int Value { get; set; }

                public async Task<Self_test_y_gyroRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Self_test_z_gyroRegister : Register
            {
                internal Self_test_z_gyroRegister(RegisterManager regManager) : base(regManager, 0x02, 1, false) { }

                public int Value { get; set; }

                public async Task<Self_test_z_gyroRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Self_test_x_accelRegister : Register
            {
                internal Self_test_x_accelRegister(RegisterManager regManager) : base(regManager, 0x0d, 1, false) { }

                public int Value { get; set; }

                public async Task<Self_test_x_accelRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Self_test_y_accelRegister : Register
            {
                internal Self_test_y_accelRegister(RegisterManager regManager) : base(regManager, 0x0e, 1, false) { }

                public int Value { get; set; }

                public async Task<Self_test_y_accelRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Self_test_z_accelRegister : Register
            {
                internal Self_test_z_accelRegister(RegisterManager regManager) : base(regManager, 0x0f, 1, false) { }

                public int Value { get; set; }

                public async Task<Self_test_z_accelRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class XGyroOffsUsrRegister : Register
            {
                internal XGyroOffsUsrRegister(RegisterManager regManager) : base(regManager, 0x13, 2, false) { }

                public int Value { get; set; }

                public async Task<XGyroOffsUsrRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFFFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class YGyroOffsUsrRegister : Register
            {
                internal YGyroOffsUsrRegister(RegisterManager regManager) : base(regManager, 0x15, 2, false) { }

                public int Value { get; set; }

                public async Task<YGyroOffsUsrRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFFFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class ZGyroOffsUsrRegister : Register
            {
                internal ZGyroOffsUsrRegister(RegisterManager regManager) : base(regManager, 0x17, 2, false) { }

                public int Value { get; set; }

                public async Task<ZGyroOffsUsrRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFFFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class SampleRateDividerRegister : Register
            {
                internal SampleRateDividerRegister(RegisterManager regManager) : base(regManager, 0x19, 1, false) { }

                public int Value { get; set; }

                public async Task<SampleRateDividerRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class ConfigurationRegister : Register
            {
                internal ConfigurationRegister(RegisterManager regManager) : base(regManager, 0x1a, 1, false) { }

                public int Dlpf { get; set; }
                public int ExtSyncSet { get; set; }
                public int FifoMode { get; set; }
                public ExtSyncSets GetExtSyncSet() { return (ExtSyncSets)ExtSyncSet; }
                public void SetExtSyncSet(ExtSyncSets enumVal) { ExtSyncSet = (int)enumVal; }

                public async Task<ConfigurationRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Dlpf & 0x7) << 0) | ((ExtSyncSet & 0x7) << 3) | ((FifoMode & 0x1) << 6); }
                internal override void SetValue(long value)
                {
                    Dlpf = (int)((value >> 0) & 0x7);
                    ExtSyncSet = (int)((value >> 3) & 0x7);
                    FifoMode = (int)((value >> 6) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Dlpf: { Dlpf } (offset: 0, width: 3)\r\n";
                    retVal += $"ExtSyncSet: { ExtSyncSet } (offset: 3, width: 3)\r\n";
                    retVal += $"FifoMode: { FifoMode } (offset: 6, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class GyroConfigRegister : Register
            {
                internal GyroConfigRegister(RegisterManager regManager) : base(regManager, 0x1b, 1, false) { }

                public int FChoiceBypass { get; set; }
                public int GyroScale { get; set; }
                public int ZGyroCten { get; set; }
                public int YGyroCten { get; set; }
                public GyroScales GetGyroScale() { return (GyroScales)GyroScale; }
                public void SetGyroScale(GyroScales enumVal) { GyroScale = (int)enumVal; }

                public async Task<GyroConfigRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((FChoiceBypass & 0x3) << 0) | ((GyroScale & 0x3) << 3) | ((ZGyroCten & 0x1) << 5) | ((YGyroCten & 0x1) << 6); }
                internal override void SetValue(long value)
                {
                    FChoiceBypass = (int)((value >> 0) & 0x3);
                    GyroScale = (int)((value >> 3) & 0x3);
                    ZGyroCten = (int)((value >> 5) & 0x1);
                    YGyroCten = (int)((value >> 6) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"FChoiceBypass: { FChoiceBypass } (offset: 0, width: 2)\r\n";
                    retVal += $"GyroScale: { GyroScale } (offset: 3, width: 2)\r\n";
                    retVal += $"ZGyroCten: { ZGyroCten } (offset: 5, width: 1)\r\n";
                    retVal += $"YGyroCten: { YGyroCten } (offset: 6, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class AccelConfigRegister : Register
            {
                internal AccelConfigRegister(RegisterManager regManager) : base(regManager, 0x1c, 1, false) { }

                public int AccelScale { get; set; }
                public int AccelZselfTest { get; set; }
                public int AccelYselfTest { get; set; }
                public int AccelXselfTest { get; set; }
                public AccelScales GetAccelScale() { return (AccelScales)AccelScale; }
                public void SetAccelScale(AccelScales enumVal) { AccelScale = (int)enumVal; }

                public async Task<AccelConfigRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((AccelScale & 0x3) << 3) | ((AccelZselfTest & 0x1) << 5) | ((AccelYselfTest & 0x1) << 6) | ((AccelXselfTest & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    AccelScale = (int)((value >> 3) & 0x3);
                    AccelZselfTest = (int)((value >> 5) & 0x1);
                    AccelYselfTest = (int)((value >> 6) & 0x1);
                    AccelXselfTest = (int)((value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"AccelScale: { AccelScale } (offset: 3, width: 2)\r\n";
                    retVal += $"AccelZselfTest: { AccelZselfTest } (offset: 5, width: 1)\r\n";
                    retVal += $"AccelYselfTest: { AccelYselfTest } (offset: 6, width: 1)\r\n";
                    retVal += $"AccelXselfTest: { AccelXselfTest } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class AccelConfig2Register : Register
            {
                internal AccelConfig2Register(RegisterManager regManager) : base(regManager, 0x1d, 1, false) { }

                public int DlpfCfg { get; set; }
                public int AccelFchoice { get; set; }

                public async Task<AccelConfig2Register> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((DlpfCfg & 0x7) << 0) | ((AccelFchoice & 0x1) << 3); }
                internal override void SetValue(long value)
                {
                    DlpfCfg = (int)((value >> 0) & 0x7);
                    AccelFchoice = (int)((value >> 3) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"DlpfCfg: { DlpfCfg } (offset: 0, width: 3)\r\n";
                    retVal += $"AccelFchoice: { AccelFchoice } (offset: 3, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class LowPowerAccelerometerOdrControlRegister : Register
            {
                internal LowPowerAccelerometerOdrControlRegister(RegisterManager regManager) : base(regManager, 0x1e, 1, false) { }

                public int Value { get; set; }

                public async Task<LowPowerAccelerometerOdrControlRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 4)\r\n";
                    return retVal;
                }
            }
            internal class WomThresholdRegister : Register
            {
                internal WomThresholdRegister(RegisterManager regManager) : base(regManager, 0x1f, 1, false) { }

                public int Value { get; set; }

                public async Task<WomThresholdRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class FifoEnableRegister : Register
            {
                internal FifoEnableRegister(RegisterManager regManager) : base(regManager, 0x23, 1, false) { }

                public int Slv0 { get; set; }
                public int Slv1 { get; set; }
                public int Slv2 { get; set; }
                public int Accel { get; set; }
                public int GyroZout { get; set; }
                public int GyroYout { get; set; }
                public int GyroXout { get; set; }
                public int TempOut { get; set; }

                public async Task<FifoEnableRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Slv0 & 0x1) << 0) | ((Slv1 & 0x1) << 1) | ((Slv2 & 0x1) << 2) | ((Accel & 0x1) << 3) | ((GyroZout & 0x1) << 4) | ((GyroYout & 0x1) << 5) | ((GyroXout & 0x1) << 6) | ((TempOut & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    Slv0 = (int)((value >> 0) & 0x1);
                    Slv1 = (int)((value >> 1) & 0x1);
                    Slv2 = (int)((value >> 2) & 0x1);
                    Accel = (int)((value >> 3) & 0x1);
                    GyroZout = (int)((value >> 4) & 0x1);
                    GyroYout = (int)((value >> 5) & 0x1);
                    GyroXout = (int)((value >> 6) & 0x1);
                    TempOut = (int)((value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Slv0: { Slv0 } (offset: 0, width: 1)\r\n";
                    retVal += $"Slv1: { Slv1 } (offset: 1, width: 1)\r\n";
                    retVal += $"Slv2: { Slv2 } (offset: 2, width: 1)\r\n";
                    retVal += $"Accel: { Accel } (offset: 3, width: 1)\r\n";
                    retVal += $"GyroZout: { GyroZout } (offset: 4, width: 1)\r\n";
                    retVal += $"GyroYout: { GyroYout } (offset: 5, width: 1)\r\n";
                    retVal += $"GyroXout: { GyroXout } (offset: 6, width: 1)\r\n";
                    retVal += $"TempOut: { TempOut } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class I2cMasterControlRegister : Register
            {
                internal I2cMasterControlRegister(RegisterManager regManager) : base(regManager, 0x24, 1, false) { }

                public int I2cMasterClock { get; set; }
                public int I2cMstPnsr { get; set; }
                public int Slv3FifoEn { get; set; }
                public int WaitForEs { get; set; }
                public int MultMstEn { get; set; }

                public async Task<I2cMasterControlRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((I2cMasterClock & 0xF) << 0) | ((I2cMstPnsr & 0x1) << 4) | ((Slv3FifoEn & 0x1) << 5) | ((WaitForEs & 0x1) << 6) | ((MultMstEn & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    I2cMasterClock = (int)((value >> 0) & 0xF);
                    I2cMstPnsr = (int)((value >> 4) & 0x1);
                    Slv3FifoEn = (int)((value >> 5) & 0x1);
                    WaitForEs = (int)((value >> 6) & 0x1);
                    MultMstEn = (int)((value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"I2cMasterClock: { I2cMasterClock } (offset: 0, width: 4)\r\n";
                    retVal += $"I2cMstPnsr: { I2cMstPnsr } (offset: 4, width: 1)\r\n";
                    retVal += $"Slv3FifoEn: { Slv3FifoEn } (offset: 5, width: 1)\r\n";
                    retVal += $"WaitForEs: { WaitForEs } (offset: 6, width: 1)\r\n";
                    retVal += $"MultMstEn: { MultMstEn } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv0AddrRegister : Register
            {
                internal I2cSlv0AddrRegister(RegisterManager regManager) : base(regManager, 0x25, 1, false) { }

                public int Id { get; set; }
                public int Rnw { get; set; }

                public async Task<I2cSlv0AddrRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Id & 0x7F) << 0) | ((Rnw & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    Id = (int)((value >> 0) & 0x7F);
                    Rnw = (int)((value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Id: { Id } (offset: 0, width: 7)\r\n";
                    retVal += $"Rnw: { Rnw } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv0RegRegister : Register
            {
                internal I2cSlv0RegRegister(RegisterManager regManager) : base(regManager, 0x26, 1, false) { }

                public int Value { get; set; }

                public async Task<I2cSlv0RegRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv0CtrlRegister : Register
            {
                internal I2cSlv0CtrlRegister(RegisterManager regManager) : base(regManager, 0x27, 1, false) { }

                public int Value { get; set; }

                public async Task<I2cSlv0CtrlRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv1AddrRegister : Register
            {
                internal I2cSlv1AddrRegister(RegisterManager regManager) : base(regManager, 0x28, 1, false) { }

                public int Id { get; set; }
                public int Rnw { get; set; }

                public async Task<I2cSlv1AddrRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Id & 0x7F) << 0) | ((Rnw & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    Id = (int)((value >> 0) & 0x7F);
                    Rnw = (int)((value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Id: { Id } (offset: 0, width: 7)\r\n";
                    retVal += $"Rnw: { Rnw } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv1RegRegister : Register
            {
                internal I2cSlv1RegRegister(RegisterManager regManager) : base(regManager, 0x29, 1, false) { }

                public int Value { get; set; }

                public async Task<I2cSlv1RegRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv1CtrlRegister : Register
            {
                internal I2cSlv1CtrlRegister(RegisterManager regManager) : base(regManager, 0x2a, 1, false) { }

                public int Value { get; set; }

                public async Task<I2cSlv1CtrlRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv2AddrRegister : Register
            {
                internal I2cSlv2AddrRegister(RegisterManager regManager) : base(regManager, 0x2b, 1, false) { }

                public int Id { get; set; }
                public int Rnw { get; set; }

                public async Task<I2cSlv2AddrRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Id & 0x7F) << 0) | ((Rnw & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    Id = (int)((value >> 0) & 0x7F);
                    Rnw = (int)((value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Id: { Id } (offset: 0, width: 7)\r\n";
                    retVal += $"Rnw: { Rnw } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv2RegRegister : Register
            {
                internal I2cSlv2RegRegister(RegisterManager regManager) : base(regManager, 0x2c, 1, false) { }

                public int Value { get; set; }

                public async Task<I2cSlv2RegRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv2CtrlRegister : Register
            {
                internal I2cSlv2CtrlRegister(RegisterManager regManager) : base(regManager, 0x2d, 1, false) { }

                public int Value { get; set; }

                public async Task<I2cSlv2CtrlRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv3AddrRegister : Register
            {
                internal I2cSlv3AddrRegister(RegisterManager regManager) : base(regManager, 0x2e, 1, false) { }

                public int Id { get; set; }
                public int Rnw { get; set; }

                public async Task<I2cSlv3AddrRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Id & 0x7F) << 0) | ((Rnw & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    Id = (int)((value >> 0) & 0x7F);
                    Rnw = (int)((value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Id: { Id } (offset: 0, width: 7)\r\n";
                    retVal += $"Rnw: { Rnw } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv3RegRegister : Register
            {
                internal I2cSlv3RegRegister(RegisterManager regManager) : base(regManager, 0x2f, 1, false) { }

                public int Value { get; set; }

                public async Task<I2cSlv3RegRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv3CtrlRegister : Register
            {
                internal I2cSlv3CtrlRegister(RegisterManager regManager) : base(regManager, 0x30, 1, false) { }

                public int Value { get; set; }

                public async Task<I2cSlv3CtrlRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv4AddrRegister : Register
            {
                internal I2cSlv4AddrRegister(RegisterManager regManager) : base(regManager, 0x31, 1, false) { }

                public int Id { get; set; }
                public int Rnw { get; set; }

                public async Task<I2cSlv4AddrRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Id & 0x7F) << 0) | ((Rnw & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    Id = (int)((value >> 0) & 0x7F);
                    Rnw = (int)((value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Id: { Id } (offset: 0, width: 7)\r\n";
                    retVal += $"Rnw: { Rnw } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv4RegRegister : Register
            {
                internal I2cSlv4RegRegister(RegisterManager regManager) : base(regManager, 0x32, 1, false) { }

                public int Value { get; set; }

                public async Task<I2cSlv4RegRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv4DoRegister : Register
            {
                internal I2cSlv4DoRegister(RegisterManager regManager) : base(regManager, 0x33, 1, false) { }

                public int Value { get; set; }

                public async Task<I2cSlv4DoRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv4CtrlRegister : Register
            {
                internal I2cSlv4CtrlRegister(RegisterManager regManager) : base(regManager, 0x34, 1, false) { }

                public int Value { get; set; }

                public async Task<I2cSlv4CtrlRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv4DiRegister : Register
            {
                internal I2cSlv4DiRegister(RegisterManager regManager) : base(regManager, 0x35, 1, false) { }

                public int Value { get; set; }

                public async Task<I2cSlv4DiRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cMstStatusRegister : Register
            {
                internal I2cMstStatusRegister(RegisterManager regManager) : base(regManager, 0x36, 1, false) { }

                public int Slv0Nack { get; set; }
                public int Slv1Nack { get; set; }
                public int Slv2Nack { get; set; }
                public int Slv3Nack { get; set; }
                public int Slv4Nack { get; set; }
                public int LostArb { get; set; }
                public int Slv4Done { get; set; }
                public int PassThrough { get; set; }

                public async Task<I2cMstStatusRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Slv0Nack & 0x1) << 0) | ((Slv1Nack & 0x1) << 1) | ((Slv2Nack & 0x1) << 2) | ((Slv3Nack & 0x1) << 3) | ((Slv4Nack & 0x1) << 4) | ((LostArb & 0x1) << 5) | ((Slv4Done & 0x1) << 6) | ((PassThrough & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    Slv0Nack = (int)((value >> 0) & 0x1);
                    Slv1Nack = (int)((value >> 1) & 0x1);
                    Slv2Nack = (int)((value >> 2) & 0x1);
                    Slv3Nack = (int)((value >> 3) & 0x1);
                    Slv4Nack = (int)((value >> 4) & 0x1);
                    LostArb = (int)((value >> 5) & 0x1);
                    Slv4Done = (int)((value >> 6) & 0x1);
                    PassThrough = (int)((value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Slv0Nack: { Slv0Nack } (offset: 0, width: 1)\r\n";
                    retVal += $"Slv1Nack: { Slv1Nack } (offset: 1, width: 1)\r\n";
                    retVal += $"Slv2Nack: { Slv2Nack } (offset: 2, width: 1)\r\n";
                    retVal += $"Slv3Nack: { Slv3Nack } (offset: 3, width: 1)\r\n";
                    retVal += $"Slv4Nack: { Slv4Nack } (offset: 4, width: 1)\r\n";
                    retVal += $"LostArb: { LostArb } (offset: 5, width: 1)\r\n";
                    retVal += $"Slv4Done: { Slv4Done } (offset: 6, width: 1)\r\n";
                    retVal += $"PassThrough: { PassThrough } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class IntPinCfgRegister : Register
            {
                internal IntPinCfgRegister(RegisterManager regManager) : base(regManager, 0x37, 1, false) { }

                public int BypassEn { get; set; }
                public int FsyncIntModeEnable { get; set; }
                public int ActlFsync { get; set; }
                public int IntAnyRd2Clear { get; set; }
                public int LatchIntEn { get; set; }
                public int Open { get; set; }
                public int Actl { get; set; }

                public async Task<IntPinCfgRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((BypassEn & 0x1) << 1) | ((FsyncIntModeEnable & 0x1) << 2) | ((ActlFsync & 0x1) << 3) | ((IntAnyRd2Clear & 0x1) << 4) | ((LatchIntEn & 0x1) << 5) | ((Open & 0x1) << 6) | ((Actl & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    BypassEn = (int)((value >> 1) & 0x1);
                    FsyncIntModeEnable = (int)((value >> 2) & 0x1);
                    ActlFsync = (int)((value >> 3) & 0x1);
                    IntAnyRd2Clear = (int)((value >> 4) & 0x1);
                    LatchIntEn = (int)((value >> 5) & 0x1);
                    Open = (int)((value >> 6) & 0x1);
                    Actl = (int)((value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"BypassEn: { BypassEn } (offset: 1, width: 1)\r\n";
                    retVal += $"FsyncIntModeEnable: { FsyncIntModeEnable } (offset: 2, width: 1)\r\n";
                    retVal += $"ActlFsync: { ActlFsync } (offset: 3, width: 1)\r\n";
                    retVal += $"IntAnyRd2Clear: { IntAnyRd2Clear } (offset: 4, width: 1)\r\n";
                    retVal += $"LatchIntEn: { LatchIntEn } (offset: 5, width: 1)\r\n";
                    retVal += $"Open: { Open } (offset: 6, width: 1)\r\n";
                    retVal += $"Actl: { Actl } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class IntEnableRegister : Register
            {
                internal IntEnableRegister(RegisterManager regManager) : base(regManager, 0x38, 1, false) { }

                public int RawReadyEnable { get; set; }
                public int FsyncIntEnable { get; set; }
                public int FifoIntEnable { get; set; }
                public int FifoOverflowEnable { get; set; }
                public int WomEnable { get; set; }

                public async Task<IntEnableRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((RawReadyEnable & 0x1) << 0) | ((FsyncIntEnable & 0x1) << 2) | ((FifoIntEnable & 0x1) << 3) | ((FifoOverflowEnable & 0x1) << 4) | ((WomEnable & 0x1) << 1); }
                internal override void SetValue(long value)
                {
                    RawReadyEnable = (int)((value >> 0) & 0x1);
                    FsyncIntEnable = (int)((value >> 2) & 0x1);
                    FifoIntEnable = (int)((value >> 3) & 0x1);
                    FifoOverflowEnable = (int)((value >> 4) & 0x1);
                    WomEnable = (int)((value >> 1) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"RawReadyEnable: { RawReadyEnable } (offset: 0, width: 1)\r\n";
                    retVal += $"FsyncIntEnable: { FsyncIntEnable } (offset: 2, width: 1)\r\n";
                    retVal += $"FifoIntEnable: { FifoIntEnable } (offset: 3, width: 1)\r\n";
                    retVal += $"FifoOverflowEnable: { FifoOverflowEnable } (offset: 4, width: 1)\r\n";
                    retVal += $"WomEnable: { WomEnable } (offset: 1, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class IntStatusRegister : Register
            {
                internal IntStatusRegister(RegisterManager regManager) : base(regManager, 0x3a, 1, false) { }

                public int RawDataReadyInt { get; set; }
                public int FsyncInt { get; set; }
                public int FifoOverflowInt { get; set; }
                public int WomInt { get; set; }

                public async Task<IntStatusRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((RawDataReadyInt & 0x1) << 0) | ((FsyncInt & 0x1) << 2) | ((FifoOverflowInt & 0x1) << 3) | ((WomInt & 0x1) << 1); }
                internal override void SetValue(long value)
                {
                    RawDataReadyInt = (int)((value >> 0) & 0x1);
                    FsyncInt = (int)((value >> 2) & 0x1);
                    FifoOverflowInt = (int)((value >> 3) & 0x1);
                    WomInt = (int)((value >> 1) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"RawDataReadyInt: { RawDataReadyInt } (offset: 0, width: 1)\r\n";
                    retVal += $"FsyncInt: { FsyncInt } (offset: 2, width: 1)\r\n";
                    retVal += $"FifoOverflowInt: { FifoOverflowInt } (offset: 3, width: 1)\r\n";
                    retVal += $"WomInt: { WomInt } (offset: 1, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Accel_xRegister : Register
            {
                internal Accel_xRegister(RegisterManager regManager) : base(regManager, 0x3b, 2, true) { }

                public int Value { get; set; }

                public async Task<Accel_xRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFFFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)(((value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class Accel_yRegister : Register
            {
                internal Accel_yRegister(RegisterManager regManager) : base(regManager, 0x3d, 2, true) { }

                public int Value { get; set; }

                public async Task<Accel_yRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFFFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)(((value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class Accel_zRegister : Register
            {
                internal Accel_zRegister(RegisterManager regManager) : base(regManager, 0x3f, 2, true) { }

                public int Value { get; set; }

                public async Task<Accel_zRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFFFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)(((value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class TempRegister : Register
            {
                internal TempRegister(RegisterManager regManager) : base(regManager, 0x41, 2, true) { }

                public int Value { get; set; }

                public async Task<TempRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFFFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)(((value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class Gyro_xRegister : Register
            {
                internal Gyro_xRegister(RegisterManager regManager) : base(regManager, 0x43, 2, true) { }

                public int Value { get; set; }

                public async Task<Gyro_xRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFFFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)(((value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class Gyro_yRegister : Register
            {
                internal Gyro_yRegister(RegisterManager regManager) : base(regManager, 0x45, 2, true) { }

                public int Value { get; set; }

                public async Task<Gyro_yRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFFFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)(((value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class Gyro_zRegister : Register
            {
                internal Gyro_zRegister(RegisterManager regManager) : base(regManager, 0x47, 2, true) { }

                public int Value { get; set; }

                public async Task<Gyro_zRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFFFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)(((value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class ExtSensDataRegister : Register
            {
                internal ExtSensDataRegister(RegisterManager regManager) : base(regManager, 0x49, 24, false) { }

                public int Value { get; set; }

                public async Task<ExtSensDataRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0x0) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0x0);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 192)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv0doRegister : Register
            {
                internal I2cSlv0doRegister(RegisterManager regManager) : base(regManager, 0x63, 1, false) { }

                public int Value { get; set; }

                public async Task<I2cSlv0doRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv1doRegister : Register
            {
                internal I2cSlv1doRegister(RegisterManager regManager) : base(regManager, 0x64, 1, false) { }

                public int Value { get; set; }

                public async Task<I2cSlv1doRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv2doRegister : Register
            {
                internal I2cSlv2doRegister(RegisterManager regManager) : base(regManager, 0x65, 1, false) { }

                public int Value { get; set; }

                public async Task<I2cSlv2doRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv3doRegister : Register
            {
                internal I2cSlv3doRegister(RegisterManager regManager) : base(regManager, 0x66, 1, false) { }

                public int Value { get; set; }

                public async Task<I2cSlv3doRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cMstDelayCtrlRegister : Register
            {
                internal I2cMstDelayCtrlRegister(RegisterManager regManager) : base(regManager, 0x67, 1, false) { }

                public int Slv0DelayEn { get; set; }
                public int Slv1DelayEn { get; set; }
                public int Slv2DelayEn { get; set; }
                public int Slv3DelayEn { get; set; }
                public int Slv4DelayEn { get; set; }
                public int DelayEsShadow { get; set; }

                public async Task<I2cMstDelayCtrlRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Slv0DelayEn & 0x1) << 0) | ((Slv1DelayEn & 0x1) << 1) | ((Slv2DelayEn & 0x1) << 2) | ((Slv3DelayEn & 0x1) << 3) | ((Slv4DelayEn & 0x1) << 4) | ((DelayEsShadow & 0x1) << 2); }
                internal override void SetValue(long value)
                {
                    Slv0DelayEn = (int)((value >> 0) & 0x1);
                    Slv1DelayEn = (int)((value >> 1) & 0x1);
                    Slv2DelayEn = (int)((value >> 2) & 0x1);
                    Slv3DelayEn = (int)((value >> 3) & 0x1);
                    Slv4DelayEn = (int)((value >> 4) & 0x1);
                    DelayEsShadow = (int)((value >> 2) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Slv0DelayEn: { Slv0DelayEn } (offset: 0, width: 1)\r\n";
                    retVal += $"Slv1DelayEn: { Slv1DelayEn } (offset: 1, width: 1)\r\n";
                    retVal += $"Slv2DelayEn: { Slv2DelayEn } (offset: 2, width: 1)\r\n";
                    retVal += $"Slv3DelayEn: { Slv3DelayEn } (offset: 3, width: 1)\r\n";
                    retVal += $"Slv4DelayEn: { Slv4DelayEn } (offset: 4, width: 1)\r\n";
                    retVal += $"DelayEsShadow: { DelayEsShadow } (offset: 2, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class SignalPathResetRegister : Register
            {
                internal SignalPathResetRegister(RegisterManager regManager) : base(regManager, 0x68, 1, false) { }

                public int TempReset { get; set; }
                public int AccelReset { get; set; }
                public int GyroReset { get; set; }

                public async Task<SignalPathResetRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((TempReset & 0x1) << 0) | ((AccelReset & 0x1) << 1) | ((GyroReset & 0x1) << 2); }
                internal override void SetValue(long value)
                {
                    TempReset = (int)((value >> 0) & 0x1);
                    AccelReset = (int)((value >> 1) & 0x1);
                    GyroReset = (int)((value >> 2) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"TempReset: { TempReset } (offset: 0, width: 1)\r\n";
                    retVal += $"AccelReset: { AccelReset } (offset: 1, width: 1)\r\n";
                    retVal += $"GyroReset: { GyroReset } (offset: 2, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class AccelIntCtrlRegister : Register
            {
                internal AccelIntCtrlRegister(RegisterManager regManager) : base(regManager, 0x69, 1, false) { }

                public int AccelIntelMode { get; set; }
                public int AccelIntelEnable { get; set; }

                public async Task<AccelIntCtrlRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((AccelIntelMode & 0x1) << 6) | ((AccelIntelEnable & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    AccelIntelMode = (int)((value >> 6) & 0x1);
                    AccelIntelEnable = (int)((value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"AccelIntelMode: { AccelIntelMode } (offset: 6, width: 1)\r\n";
                    retVal += $"AccelIntelEnable: { AccelIntelEnable } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class UserCtrlRegister : Register
            {
                internal UserCtrlRegister(RegisterManager regManager) : base(regManager, 0x6a, 1, false) { }

                public int SigConditionReset { get; set; }
                public int I2cMasterReset { get; set; }
                public int FifoReset { get; set; }
                public int I2cIfDisable { get; set; }
                public int I2cMasterEnable { get; set; }
                public int FifoEnable { get; set; }

                public async Task<UserCtrlRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((SigConditionReset & 0x1) << 0) | ((I2cMasterReset & 0x1) << 1) | ((FifoReset & 0x1) << 2) | ((I2cIfDisable & 0x1) << 1) | ((I2cMasterEnable & 0x1) << 2) | ((FifoEnable & 0x1) << 3); }
                internal override void SetValue(long value)
                {
                    SigConditionReset = (int)((value >> 0) & 0x1);
                    I2cMasterReset = (int)((value >> 1) & 0x1);
                    FifoReset = (int)((value >> 2) & 0x1);
                    I2cIfDisable = (int)((value >> 1) & 0x1);
                    I2cMasterEnable = (int)((value >> 2) & 0x1);
                    FifoEnable = (int)((value >> 3) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"SigConditionReset: { SigConditionReset } (offset: 0, width: 1)\r\n";
                    retVal += $"I2cMasterReset: { I2cMasterReset } (offset: 1, width: 1)\r\n";
                    retVal += $"FifoReset: { FifoReset } (offset: 2, width: 1)\r\n";
                    retVal += $"I2cIfDisable: { I2cIfDisable } (offset: 1, width: 1)\r\n";
                    retVal += $"I2cMasterEnable: { I2cMasterEnable } (offset: 2, width: 1)\r\n";
                    retVal += $"FifoEnable: { FifoEnable } (offset: 3, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class PowerMgmt1Register : Register
            {
                internal PowerMgmt1Register(RegisterManager regManager) : base(regManager, 0x6b, 1, false) { }

                public int ClockSel { get; set; }
                public int PowerDownPtat { get; set; }
                public int GyroStandby { get; set; }
                public int Cycle { get; set; }
                public int Sleep { get; set; }
                public int Reset { get; set; }
                public ClockSels GetClockSel() { return (ClockSels)ClockSel; }
                public void SetClockSel(ClockSels enumVal) { ClockSel = (int)enumVal; }

                public async Task<PowerMgmt1Register> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((ClockSel & 0x7) << 0) | ((PowerDownPtat & 0x1) << 3) | ((GyroStandby & 0x1) << 4) | ((Cycle & 0x1) << 5) | ((Sleep & 0x1) << 6) | ((Reset & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    ClockSel = (int)((value >> 0) & 0x7);
                    PowerDownPtat = (int)((value >> 3) & 0x1);
                    GyroStandby = (int)((value >> 4) & 0x1);
                    Cycle = (int)((value >> 5) & 0x1);
                    Sleep = (int)((value >> 6) & 0x1);
                    Reset = (int)((value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"ClockSel: { ClockSel } (offset: 0, width: 3)\r\n";
                    retVal += $"PowerDownPtat: { PowerDownPtat } (offset: 3, width: 1)\r\n";
                    retVal += $"GyroStandby: { GyroStandby } (offset: 4, width: 1)\r\n";
                    retVal += $"Cycle: { Cycle } (offset: 5, width: 1)\r\n";
                    retVal += $"Sleep: { Sleep } (offset: 6, width: 1)\r\n";
                    retVal += $"Reset: { Reset } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class PowerMgmt2Register : Register
            {
                internal PowerMgmt2Register(RegisterManager regManager) : base(regManager, 0x6c, 1, false) { }

                public int DisableZG { get; set; }
                public int DisableYG { get; set; }
                public int DisableXG { get; set; }
                public int DisableZA { get; set; }
                public int DisableYA { get; set; }
                public int DisableXA { get; set; }

                public async Task<PowerMgmt2Register> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((DisableZG & 0x1) << 0) | ((DisableYG & 0x1) << 1) | ((DisableXG & 0x1) << 2) | ((DisableZA & 0x1) << 3) | ((DisableYA & 0x1) << 4) | ((DisableXA & 0x1) << 5); }
                internal override void SetValue(long value)
                {
                    DisableZG = (int)((value >> 0) & 0x1);
                    DisableYG = (int)((value >> 1) & 0x1);
                    DisableXG = (int)((value >> 2) & 0x1);
                    DisableZA = (int)((value >> 3) & 0x1);
                    DisableYA = (int)((value >> 4) & 0x1);
                    DisableXA = (int)((value >> 5) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"DisableZG: { DisableZG } (offset: 0, width: 1)\r\n";
                    retVal += $"DisableYG: { DisableYG } (offset: 1, width: 1)\r\n";
                    retVal += $"DisableXG: { DisableXG } (offset: 2, width: 1)\r\n";
                    retVal += $"DisableZA: { DisableZA } (offset: 3, width: 1)\r\n";
                    retVal += $"DisableYA: { DisableYA } (offset: 4, width: 1)\r\n";
                    retVal += $"DisableXA: { DisableXA } (offset: 5, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class FifoCountRegister : Register
            {
                internal FifoCountRegister(RegisterManager regManager) : base(regManager, 0x72, 2, false) { }

                public int Value { get; set; }

                public async Task<FifoCountRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0x1FFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0x1FFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 13)\r\n";
                    return retVal;
                }
            }
            internal class FifoRWRegister : Register
            {
                internal FifoRWRegister(RegisterManager regManager) : base(regManager, 0x74, 1, false) { }

                public int Value { get; set; }

                public async Task<FifoRWRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class WhoAmIRegister : Register
            {
                internal WhoAmIRegister(RegisterManager regManager) : base(regManager, 0x75, 1, false) { }

                public int Value { get; set; }

                public async Task<WhoAmIRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class XAccelOffsetRegister : Register
            {
                internal XAccelOffsetRegister(RegisterManager regManager) : base(regManager, 0x77, 2, false) { }

                public int Value { get; set; }

                public async Task<XAccelOffsetRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0x7FFF) << 1); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 1) & 0x7FFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 1, width: 15)\r\n";
                    return retVal;
                }
            }
            internal class YAccelOffsetRegister : Register
            {
                internal YAccelOffsetRegister(RegisterManager regManager) : base(regManager, 0x7a, 2, false) { }

                public int Value { get; set; }

                public async Task<YAccelOffsetRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0x7FFF) << 1); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 1) & 0x7FFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 1, width: 15)\r\n";
                    return retVal;
                }
            }
            internal class ZAccelOffsetRegister : Register
            {
                internal ZAccelOffsetRegister(RegisterManager regManager) : base(regManager, 0x7d, 2, false) { }

                public int Value { get; set; }

                public async Task<ZAccelOffsetRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0x7FFF) << 1); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 1) & 0x7FFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 1, width: 15)\r\n";
                    return retVal;
                }
            }
        }
    }
}