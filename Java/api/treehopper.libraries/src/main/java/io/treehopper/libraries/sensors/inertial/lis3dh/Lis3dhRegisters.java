package io.treehopper.libraries.sensors.inertial.lis3dh;

import io.treehopper.libraries.RegisterManager;
import io.treehopper.libraries.Register;
import io.treehopper.SMBusDevice;
import java.util.Arrays;

/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
class Lis3dhRegisters extends RegisterManager
{
    SMBusDevice _dev;
    Lis3dhRegisters(SMBusDevice dev)
    {
        super(dev);
        statusRegAux = new StatusRegAuxRegister(this);
        _registers.add(statusRegAux);
        outAdc1 = new OutAdc1Register(this);
        _registers.add(outAdc1);
        outAdc2 = new OutAdc2Register(this);
        _registers.add(outAdc2);
        outAdc3 = new OutAdc3Register(this);
        _registers.add(outAdc3);
        whoAmI = new WhoAmIRegister(this);
        _registers.add(whoAmI);
        ctrl0 = new Ctrl0Register(this);
        _registers.add(ctrl0);
        tempCfgReg = new TempCfgRegRegister(this);
        _registers.add(tempCfgReg);
        ctrl2 = new Ctrl2Register(this);
        _registers.add(ctrl2);
        ctrl3 = new Ctrl3Register(this);
        _registers.add(ctrl3);
        ctrl4 = new Ctrl4Register(this);
        _registers.add(ctrl4);
        ctrl5 = new Ctrl5Register(this);
        _registers.add(ctrl5);
        ctrl6 = new Ctrl6Register(this);
        _registers.add(ctrl6);
        reference = new ReferenceRegister(this);
        _registers.add(reference);
        status = new StatusRegister(this);
        _registers.add(status);
        fifoCtrl = new FifoCtrlRegister(this);
        _registers.add(fifoCtrl);
        fifoSrc = new FifoSrcRegister(this);
        _registers.add(fifoSrc);
        int1Cfg = new Int1CfgRegister(this);
        _registers.add(int1Cfg);
        int1Src = new Int1SrcRegister(this);
        _registers.add(int1Src);
        int1Threshold = new Int1ThresholdRegister(this);
        _registers.add(int1Threshold);
        int1Duration = new Int1DurationRegister(this);
        _registers.add(int1Duration);
        int2Cfg = new Int2CfgRegister(this);
        _registers.add(int2Cfg);
        int2Src = new Int2SrcRegister(this);
        _registers.add(int2Src);
        int2Threshold = new Int2ThresholdRegister(this);
        _registers.add(int2Threshold);
        int2Duration = new Int2DurationRegister(this);
        _registers.add(int2Duration);
        clickSource = new ClickSourceRegister(this);
        _registers.add(clickSource);
        clickThreshold = new ClickThresholdRegister(this);
        _registers.add(clickThreshold);
        timeLimit = new TimeLimitRegister(this);
        _registers.add(timeLimit);
        timeLatency = new TimeLatencyRegister(this);
        _registers.add(timeLatency);
        timeWindow = new TimeWindowRegister(this);
        _registers.add(timeWindow);
        activationThreshold = new ActivationThresholdRegister(this);
        _registers.add(activationThreshold);
        activationDuration = new ActivationDurationRegister(this);
        _registers.add(activationDuration);
        ctrl1 = new Ctrl1Register(this);
        _registers.add(ctrl1);
        outX = new OutXRegister(this);
        _registers.add(outX);
        outY = new OutYRegister(this);
        _registers.add(outY);
        outZ = new OutZRegister(this);
        _registers.add(outZ);
    }

    StatusRegAuxRegister statusRegAux;
    OutAdc1Register outAdc1;
    OutAdc2Register outAdc2;
    OutAdc3Register outAdc3;
    WhoAmIRegister whoAmI;
    Ctrl0Register ctrl0;
    TempCfgRegRegister tempCfgReg;
    Ctrl2Register ctrl2;
    Ctrl3Register ctrl3;
    Ctrl4Register ctrl4;
    Ctrl5Register ctrl5;
    Ctrl6Register ctrl6;
    ReferenceRegister reference;
    StatusRegister status;
    FifoCtrlRegister fifoCtrl;
    FifoSrcRegister fifoSrc;
    Int1CfgRegister int1Cfg;
    Int1SrcRegister int1Src;
    Int1ThresholdRegister int1Threshold;
    Int1DurationRegister int1Duration;
    Int2CfgRegister int2Cfg;
    Int2SrcRegister int2Src;
    Int2ThresholdRegister int2Threshold;
    Int2DurationRegister int2Duration;
    ClickSourceRegister clickSource;
    ClickThresholdRegister clickThreshold;
    TimeLimitRegister timeLimit;
    TimeLatencyRegister timeLatency;
    TimeWindowRegister timeWindow;
    ActivationThresholdRegister activationThreshold;
    ActivationDurationRegister activationDuration;
    Ctrl1Register ctrl1;
    OutXRegister outX;
    OutYRegister outY;
    OutZRegister outZ;

    class StatusRegAuxRegister extends Register
    {
        StatusRegAuxRegister(RegisterManager regManager) { super(regManager, 0x07, 1, false); }

        int oneAxisDataAvailable;
        int twoAxisDataAvailable;
        int threeAxisDataAvailable;
        int dataAvailable;
        int oneAxisDataOverrun;
        int twoAxisDataOverrun;
        int dataOverrun;


        public StatusRegAuxRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((OneAxisDataAvailable & 0x1) << 0) | ((TwoAxisDataAvailable & 0x1) << 1) | ((ThreeAxisDataAvailable & 0x1) << 2) | ((DataAvailable & 0x1) << 3) | ((OneAxisDataOverrun & 0x1) << 4) | ((TwoAxisDataOverrun & 0x1) << 5) | ((DataOverrun & 0x1) << 6); }
        public void setValue(long _value)
        {
            OneAxisDataAvailable = (int)((_value >> 0) & 0x1);
            TwoAxisDataAvailable = (int)((_value >> 1) & 0x1);
            ThreeAxisDataAvailable = (int)((_value >> 2) & 0x1);
            DataAvailable = (int)((_value >> 3) & 0x1);
            OneAxisDataOverrun = (int)((_value >> 4) & 0x1);
            TwoAxisDataOverrun = (int)((_value >> 5) & 0x1);
            DataOverrun = (int)((_value >> 6) & 0x1);
        }
    }
    class OutAdc1Register extends Register
    {
        OutAdc1Register(RegisterManager regManager) { super(regManager, 0x08, 2, false); }

        int value;


        public OutAdc1Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0x3FF) << 6); }
        public void setValue(long _value)
        {
            Value = (int)((_value >> 6) & 0x3FF);
        }
    }
    class OutAdc2Register extends Register
    {
        OutAdc2Register(RegisterManager regManager) { super(regManager, 0x0A, 2, false); }

        int value;


        public OutAdc2Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0x3FF) << 6); }
        public void setValue(long _value)
        {
            Value = (int)((_value >> 6) & 0x3FF);
        }
    }
    class OutAdc3Register extends Register
    {
        OutAdc3Register(RegisterManager regManager) { super(regManager, 0x0C, 2, false); }

        int value;


        public OutAdc3Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0x3FF) << 6); }
        public void setValue(long _value)
        {
            Value = (int)((_value >> 6) & 0x3FF);
        }
    }
    class WhoAmIRegister extends Register
    {
        WhoAmIRegister(RegisterManager regManager) { super(regManager, 0x0f, 1, false); }

        int value;


        public WhoAmIRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            Value = (int)((_value >> 0) & 0xFF);
        }
    }
    class Ctrl0Register extends Register
    {
        Ctrl0Register(RegisterManager regManager) { super(regManager, 0x1E, 1, false); }

        int sdoPuDisc;

                public sdoPuDisc getSdoPuDisc() { for (sdoPuDisc b : sdoPuDisc.values()) { if(b.getVal() == SdoPuDisc) return b; } return sdoPuDisc.values()[0]; }
                public void setSdoPuDisc(sdoPuDisc enumVal) { SdoPuDisc = enumVal.getVal(); }

        public Ctrl0Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((SdoPuDisc & 0xFF) << 0); }
        public void setValue(long _value)
        {
            SdoPuDisc = (int)((_value >> 0) & 0xFF);
        }
    }
    class TempCfgRegRegister extends Register
    {
        TempCfgRegRegister(RegisterManager regManager) { super(regManager, 0x1F, 1, false); }

        int adcEn;
        int tempEn;


        public TempCfgRegRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((AdcEn & 0x1) << 7) | ((TempEn & 0x1) << 6); }
        public void setValue(long _value)
        {
            AdcEn = (int)((_value >> 7) & 0x1);
            TempEn = (int)((_value >> 6) & 0x1);
        }
    }
    class Ctrl2Register extends Register
    {
        Ctrl2Register(RegisterManager regManager) { super(regManager, 0x21, 1, false); }

        int highPassAoiInt1Enable;
        int highPassAoiInt2Enable;
        int highPassClickEnable;
        int filterDataPassThru;
        int highPassFilterCutoffFrequency;
        int highPassFilterModeSelection;

                public highPassFilterModeSelection getHighPassFilterModeSelection() { for (highPassFilterModeSelection b : highPassFilterModeSelection.values()) { if(b.getVal() == HighPassFilterModeSelection) return b; } return highPassFilterModeSelection.values()[0]; }
                public void setHighPassFilterModeSelection(highPassFilterModeSelection enumVal) { HighPassFilterModeSelection = enumVal.getVal(); }

        public Ctrl2Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((HighPassAoiInt1Enable & 0x1) << 0) | ((HighPassAoiInt2Enable & 0x1) << 1) | ((HighPassClickEnable & 0x1) << 2) | ((FilterDataPassThru & 0x1) << 3) | ((HighPassFilterCutoffFrequency & 0x3) << 4) | ((HighPassFilterModeSelection & 0x3) << 6); }
        public void setValue(long _value)
        {
            HighPassAoiInt1Enable = (int)((_value >> 0) & 0x1);
            HighPassAoiInt2Enable = (int)((_value >> 1) & 0x1);
            HighPassClickEnable = (int)((_value >> 2) & 0x1);
            FilterDataPassThru = (int)((_value >> 3) & 0x1);
            HighPassFilterCutoffFrequency = (int)((_value >> 4) & 0x3);
            HighPassFilterModeSelection = (int)((_value >> 6) & 0x3);
        }
    }
    class Ctrl3Register extends Register
    {
        Ctrl3Register(RegisterManager regManager) { super(regManager, 0x22, 1, false); }

        int overrun;
        int fifoWatermark;
        int da321;
        int zyxda;
        int ia2;
        int ia1;
        int click;


        public Ctrl3Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Overrun & 0x1) << 1) | ((FifoWatermark & 0x1) << 2) | ((Da321 & 0x1) << 3) | ((Zyxda & 0x1) << 4) | ((Ia2 & 0x1) << 5) | ((Ia1 & 0x1) << 6) | ((Click & 0x1) << 7); }
        public void setValue(long _value)
        {
            Overrun = (int)((_value >> 1) & 0x1);
            FifoWatermark = (int)((_value >> 2) & 0x1);
            Da321 = (int)((_value >> 3) & 0x1);
            Zyxda = (int)((_value >> 4) & 0x1);
            Ia2 = (int)((_value >> 5) & 0x1);
            Ia1 = (int)((_value >> 6) & 0x1);
            Click = (int)((_value >> 7) & 0x1);
        }
    }
    class Ctrl4Register extends Register
    {
        Ctrl4Register(RegisterManager regManager) { super(regManager, 0x23, 1, false); }

        int spiInterfaceMode;
        int selfTestEnable;
        int highResolutionOutput;
        int fullScaleSelection;
        int bigEndian;
        int blockDataUpdate;

                public fullScaleSelection getFullScaleSelection() { for (fullScaleSelection b : fullScaleSelection.values()) { if(b.getVal() == FullScaleSelection) return b; } return fullScaleSelection.values()[0]; }
                public void setFullScaleSelection(fullScaleSelection enumVal) { FullScaleSelection = enumVal.getVal(); }

        public Ctrl4Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((SpiInterfaceMode & 0x1) << 0) | ((SelfTestEnable & 0x3) << 1) | ((HighResolutionOutput & 0x1) << 3) | ((FullScaleSelection & 0x3) << 4) | ((BigEndian & 0x1) << 6) | ((BlockDataUpdate & 0x1) << 7); }
        public void setValue(long _value)
        {
            SpiInterfaceMode = (int)((_value >> 0) & 0x1);
            SelfTestEnable = (int)((_value >> 1) & 0x3);
            HighResolutionOutput = (int)((_value >> 3) & 0x1);
            FullScaleSelection = (int)((_value >> 4) & 0x3);
            BigEndian = (int)((_value >> 6) & 0x1);
            BlockDataUpdate = (int)((_value >> 7) & 0x1);
        }
    }
    class Ctrl5Register extends Register
    {
        Ctrl5Register(RegisterManager regManager) { super(regManager, 0x24, 1, false); }

        int enable4DInt2;
        int latchInt2;
        int enable4DInt1;
        int latchInt1;
        int fifoEnable;
        int rebootMemoryContent;


        public Ctrl5Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Enable4DInt2 & 0x1) << 0) | ((LatchInt2 & 0x1) << 1) | ((Enable4DInt1 & 0x1) << 2) | ((LatchInt1 & 0x1) << 3) | ((FifoEnable & 0x1) << 4) | ((RebootMemoryContent & 0x1) << 5); }
        public void setValue(long _value)
        {
            Enable4DInt2 = (int)((_value >> 0) & 0x1);
            LatchInt2 = (int)((_value >> 1) & 0x1);
            Enable4DInt1 = (int)((_value >> 2) & 0x1);
            LatchInt1 = (int)((_value >> 3) & 0x1);
            FifoEnable = (int)((_value >> 4) & 0x1);
            RebootMemoryContent = (int)((_value >> 5) & 0x1);
        }
    }
    class Ctrl6Register extends Register
    {
        Ctrl6Register(RegisterManager regManager) { super(regManager, 0x25, 1, false); }

        int intPolarity;
        int act;
        int boot;
        int ia2;
        int ia1;
        int click;


        public Ctrl6Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((IntPolarity & 0x1) << 1) | ((Act & 0x1) << 3) | ((Boot & 0x1) << 4) | ((Ia2 & 0x1) << 5) | ((Ia1 & 0x1) << 6) | ((Click & 0x1) << 7); }
        public void setValue(long _value)
        {
            IntPolarity = (int)((_value >> 1) & 0x1);
            Act = (int)((_value >> 3) & 0x1);
            Boot = (int)((_value >> 4) & 0x1);
            Ia2 = (int)((_value >> 5) & 0x1);
            Ia1 = (int)((_value >> 6) & 0x1);
            Click = (int)((_value >> 7) & 0x1);
        }
    }
    class ReferenceRegister extends Register
    {
        ReferenceRegister(RegisterManager regManager) { super(regManager, 0x26, 1, false); }

        int value;


        public ReferenceRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            Value = (int)((_value >> 0) & 0xFF);
        }
    }
    class StatusRegister extends Register
    {
        StatusRegister(RegisterManager regManager) { super(regManager, 0x27, 1, false); }

        int xda;
        int yda;
        int zda;
        int zyxda;
        int xor;
        int yor;
        int zor;
        int zyxor;


        public StatusRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Xda & 0x1) << 0) | ((Yda & 0x1) << 1) | ((Zda & 0x1) << 2) | ((Zyxda & 0x1) << 3) | ((Xor & 0x1) << 4) | ((Yor & 0x1) << 5) | ((Zor & 0x1) << 6) | ((Zyxor & 0x1) << 7); }
        public void setValue(long _value)
        {
            Xda = (int)((_value >> 0) & 0x1);
            Yda = (int)((_value >> 1) & 0x1);
            Zda = (int)((_value >> 2) & 0x1);
            Zyxda = (int)((_value >> 3) & 0x1);
            Xor = (int)((_value >> 4) & 0x1);
            Yor = (int)((_value >> 5) & 0x1);
            Zor = (int)((_value >> 6) & 0x1);
            Zyxor = (int)((_value >> 7) & 0x1);
        }
    }
    class FifoCtrlRegister extends Register
    {
        FifoCtrlRegister(RegisterManager regManager) { super(regManager, 0x2E, 1, false); }

        int fifoThreshold;
        int triggerSelection;
        int fifoMode;

                public fifoMode getFifoMode() { for (fifoMode b : fifoMode.values()) { if(b.getVal() == FifoMode) return b; } return fifoMode.values()[0]; }
                public void setFifoMode(fifoMode enumVal) { FifoMode = enumVal.getVal(); }

        public FifoCtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((FifoThreshold & 0x1F) << 0) | ((TriggerSelection & 0x1) << 5) | ((FifoMode & 0x3) << 6); }
        public void setValue(long _value)
        {
            FifoThreshold = (int)((_value >> 0) & 0x1F);
            TriggerSelection = (int)((_value >> 5) & 0x1);
            FifoMode = (int)((_value >> 6) & 0x3);
        }
    }
    class FifoSrcRegister extends Register
    {
        FifoSrcRegister(RegisterManager regManager) { super(regManager, 0x2F, 1, false); }

        int fss;
        int emtpy;
        int overrunFifo;
        int watermark;


        public FifoSrcRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Fss & 0x1F) << 0) | ((Emtpy & 0x1) << 5) | ((OverrunFifo & 0x1) << 6) | ((Watermark & 0x1) << 7); }
        public void setValue(long _value)
        {
            Fss = (int)((_value >> 0) & 0x1F);
            Emtpy = (int)((_value >> 5) & 0x1);
            OverrunFifo = (int)((_value >> 6) & 0x1);
            Watermark = (int)((_value >> 7) & 0x1);
        }
    }
    class Int1CfgRegister extends Register
    {
        Int1CfgRegister(RegisterManager regManager) { super(regManager, 0x30, 1, false); }

        int enableXLowEvent;
        int enableXHighEvent;
        int enableYLowEvent;
        int enableYHighEvent;
        int enableZLowEvent;
        int enableZHighEvent;
        int enable6D;
        int andOrInterruptEvents;


        public Int1CfgRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((EnableXLowEvent & 0x1) << 0) | ((EnableXHighEvent & 0x1) << 1) | ((EnableYLowEvent & 0x1) << 2) | ((EnableYHighEvent & 0x1) << 3) | ((EnableZLowEvent & 0x1) << 4) | ((EnableZHighEvent & 0x1) << 5) | ((Enable6D & 0x1) << 6) | ((AndOrInterruptEvents & 0x1) << 7); }
        public void setValue(long _value)
        {
            EnableXLowEvent = (int)((_value >> 0) & 0x1);
            EnableXHighEvent = (int)((_value >> 1) & 0x1);
            EnableYLowEvent = (int)((_value >> 2) & 0x1);
            EnableYHighEvent = (int)((_value >> 3) & 0x1);
            EnableZLowEvent = (int)((_value >> 4) & 0x1);
            EnableZHighEvent = (int)((_value >> 5) & 0x1);
            Enable6D = (int)((_value >> 6) & 0x1);
            AndOrInterruptEvents = (int)((_value >> 7) & 0x1);
        }
    }
    class Int1SrcRegister extends Register
    {
        Int1SrcRegister(RegisterManager regManager) { super(regManager, 0x31, 1, false); }

        int xLow;
        int xHigh;
        int yLow;
        int yHigh;
        int zLow;
        int zHigh;
        int interruptActive;


        public Int1SrcRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((XLow & 0x1) << 0) | ((XHigh & 0x1) << 1) | ((YLow & 0x1) << 2) | ((YHigh & 0x1) << 3) | ((ZLow & 0x1) << 4) | ((ZHigh & 0x1) << 5) | ((InterruptActive & 0x1) << 6); }
        public void setValue(long _value)
        {
            XLow = (int)((_value >> 0) & 0x1);
            XHigh = (int)((_value >> 1) & 0x1);
            YLow = (int)((_value >> 2) & 0x1);
            YHigh = (int)((_value >> 3) & 0x1);
            ZLow = (int)((_value >> 4) & 0x1);
            ZHigh = (int)((_value >> 5) & 0x1);
            InterruptActive = (int)((_value >> 6) & 0x1);
        }
    }
    class Int1ThresholdRegister extends Register
    {
        Int1ThresholdRegister(RegisterManager regManager) { super(regManager, 0x32, 1, false); }

        int value;


        public Int1ThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0x7F) << 0); }
        public void setValue(long _value)
        {
            Value = (int)((_value >> 0) & 0x7F);
        }
    }
    class Int1DurationRegister extends Register
    {
        Int1DurationRegister(RegisterManager regManager) { super(regManager, 0x33, 1, false); }

        int value;


        public Int1DurationRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0x7F) << 0); }
        public void setValue(long _value)
        {
            Value = (int)((_value >> 0) & 0x7F);
        }
    }
    class Int2CfgRegister extends Register
    {
        Int2CfgRegister(RegisterManager regManager) { super(regManager, 0x34, 1, false); }

        int enableXLowEvent;
        int enableXHighEvent;
        int enableYLowEvent;
        int enableYHighEvent;
        int enableZLowEvent;
        int enableZHighEvent;
        int enable6D;
        int andOrInterruptEvents;


        public Int2CfgRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((EnableXLowEvent & 0x1) << 0) | ((EnableXHighEvent & 0x1) << 1) | ((EnableYLowEvent & 0x1) << 2) | ((EnableYHighEvent & 0x1) << 3) | ((EnableZLowEvent & 0x1) << 4) | ((EnableZHighEvent & 0x1) << 5) | ((Enable6D & 0x1) << 6) | ((AndOrInterruptEvents & 0x1) << 7); }
        public void setValue(long _value)
        {
            EnableXLowEvent = (int)((_value >> 0) & 0x1);
            EnableXHighEvent = (int)((_value >> 1) & 0x1);
            EnableYLowEvent = (int)((_value >> 2) & 0x1);
            EnableYHighEvent = (int)((_value >> 3) & 0x1);
            EnableZLowEvent = (int)((_value >> 4) & 0x1);
            EnableZHighEvent = (int)((_value >> 5) & 0x1);
            Enable6D = (int)((_value >> 6) & 0x1);
            AndOrInterruptEvents = (int)((_value >> 7) & 0x1);
        }
    }
    class Int2SrcRegister extends Register
    {
        Int2SrcRegister(RegisterManager regManager) { super(regManager, 0x35, 1, false); }

        int xLow;
        int xHigh;
        int yLow;
        int yHigh;
        int zLow;
        int zHigh;
        int interruptActive;


        public Int2SrcRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((XLow & 0x1) << 0) | ((XHigh & 0x1) << 1) | ((YLow & 0x1) << 2) | ((YHigh & 0x1) << 3) | ((ZLow & 0x1) << 4) | ((ZHigh & 0x1) << 5) | ((InterruptActive & 0x1) << 6); }
        public void setValue(long _value)
        {
            XLow = (int)((_value >> 0) & 0x1);
            XHigh = (int)((_value >> 1) & 0x1);
            YLow = (int)((_value >> 2) & 0x1);
            YHigh = (int)((_value >> 3) & 0x1);
            ZLow = (int)((_value >> 4) & 0x1);
            ZHigh = (int)((_value >> 5) & 0x1);
            InterruptActive = (int)((_value >> 6) & 0x1);
        }
    }
    class Int2ThresholdRegister extends Register
    {
        Int2ThresholdRegister(RegisterManager regManager) { super(regManager, 0x36, 1, false); }

        int value;


        public Int2ThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0x7F) << 0); }
        public void setValue(long _value)
        {
            Value = (int)((_value >> 0) & 0x7F);
        }
    }
    class Int2DurationRegister extends Register
    {
        Int2DurationRegister(RegisterManager regManager) { super(regManager, 0x37, 1, false); }

        int value;


        public Int2DurationRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0x7F) << 0); }
        public void setValue(long _value)
        {
            Value = (int)((_value >> 0) & 0x7F);
        }
    }
    class ClickSourceRegister extends Register
    {
        ClickSourceRegister(RegisterManager regManager) { super(regManager, 0x39, 1, false); }

        int x;
        int y;
        int z;
        int sign;
        int singleClickEnable;
        int doubleClickEnable;
        int interruptActive;


        public ClickSourceRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((X & 0x1) << 0) | ((Y & 0x1) << 1) | ((Z & 0x1) << 2) | ((Sign & 0x1) << 3) | ((SingleClickEnable & 0x1) << 4) | ((DoubleClickEnable & 0x1) << 5) | ((InterruptActive & 0x1) << 6); }
        public void setValue(long _value)
        {
            X = (int)((_value >> 0) & 0x1);
            Y = (int)((_value >> 1) & 0x1);
            Z = (int)((_value >> 2) & 0x1);
            Sign = (int)((_value >> 3) & 0x1);
            SingleClickEnable = (int)((_value >> 4) & 0x1);
            DoubleClickEnable = (int)((_value >> 5) & 0x1);
            InterruptActive = (int)((_value >> 6) & 0x1);
        }
    }
    class ClickThresholdRegister extends Register
    {
        ClickThresholdRegister(RegisterManager regManager) { super(regManager, 0x3A, 1, false); }

        int threshold;
        int lirClick;


        public ClickThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Threshold & 0x7F) << 0) | ((LirClick & 0x1) << 7); }
        public void setValue(long _value)
        {
            Threshold = (int)((_value >> 0) & 0x7F);
            LirClick = (int)((_value >> 7) & 0x1);
        }
    }
    class TimeLimitRegister extends Register
    {
        TimeLimitRegister(RegisterManager regManager) { super(regManager, 0x3B, 1, false); }

        int value;


        public TimeLimitRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0x7F) << 0); }
        public void setValue(long _value)
        {
            Value = (int)((_value >> 0) & 0x7F);
        }
    }
    class TimeLatencyRegister extends Register
    {
        TimeLatencyRegister(RegisterManager regManager) { super(regManager, 0x3C, 10, false); }

        int value;


        public TimeLatencyRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0x7FFF) << 0); }
        public void setValue(long _value)
        {
            Value = (int)((_value >> 0) & 0x7FFF);
        }
    }
    class TimeWindowRegister extends Register
    {
        TimeWindowRegister(RegisterManager regManager) { super(regManager, 0x3D, 1, false); }

        int value;


        public TimeWindowRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            Value = (int)((_value >> 0) & 0xFF);
        }
    }
    class ActivationThresholdRegister extends Register
    {
        ActivationThresholdRegister(RegisterManager regManager) { super(regManager, 0x3E, 1, false); }

        int value;


        public ActivationThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0x7F) << 0); }
        public void setValue(long _value)
        {
            Value = (int)((_value >> 0) & 0x7F);
        }
    }
    class ActivationDurationRegister extends Register
    {
        ActivationDurationRegister(RegisterManager regManager) { super(regManager, 0x3F, 1, false); }

        int value;


        public ActivationDurationRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            Value = (int)((_value >> 0) & 0xFF);
        }
    }
    class Ctrl1Register extends Register
    {
        Ctrl1Register(RegisterManager regManager) { super(regManager, 0xA0, 1, false); }

        int xAxisEnable;
        int yAxisEnable;
        int zAxisEnable;
        int lowPowerEnable;
        int outputDataRate;

                public outputDataRate getOutputDataRate() { for (outputDataRate b : outputDataRate.values()) { if(b.getVal() == OutputDataRate) return b; } return outputDataRate.values()[0]; }
                public void setOutputDataRate(outputDataRate enumVal) { OutputDataRate = enumVal.getVal(); }

        public Ctrl1Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((XAxisEnable & 0x1) << 0) | ((YAxisEnable & 0x1) << 1) | ((ZAxisEnable & 0x1) << 2) | ((LowPowerEnable & 0x1) << 3) | ((OutputDataRate & 0xF) << 4); }
        public void setValue(long _value)
        {
            XAxisEnable = (int)((_value >> 0) & 0x1);
            YAxisEnable = (int)((_value >> 1) & 0x1);
            ZAxisEnable = (int)((_value >> 2) & 0x1);
            LowPowerEnable = (int)((_value >> 3) & 0x1);
            OutputDataRate = (int)((_value >> 4) & 0xF);
        }
    }
    class OutXRegister extends Register
    {
        OutXRegister(RegisterManager regManager) { super(regManager, 0xA8, 2, false); }

        int value;


        public OutXRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0x3FF) << 6); }
        public void setValue(long _value)
        {
            Value = (int)(((_value >> 6) & 0x3FF) << (32 - 10)) >> (32 - 10);
        }
    }
    class OutYRegister extends Register
    {
        OutYRegister(RegisterManager regManager) { super(regManager, 0xAA, 2, false); }

        int value;


        public OutYRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0x3FF) << 6); }
        public void setValue(long _value)
        {
            Value = (int)(((_value >> 6) & 0x3FF) << (32 - 10)) >> (32 - 10);
        }
    }
    class OutZRegister extends Register
    {
        OutZRegister(RegisterManager regManager) { super(regManager, 0xAC, 2, false); }

        int value;


        public OutZRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0x3FF) << 6); }
        public void setValue(long _value)
        {
            Value = (int)(((_value >> 6) & 0x3FF) << (32 - 10)) >> (32 - 10);
        }
    }
}
