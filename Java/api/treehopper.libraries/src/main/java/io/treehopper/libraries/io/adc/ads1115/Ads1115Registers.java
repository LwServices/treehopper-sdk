package io.treehopper.libraries.io.adc.ads1115;

import io.treehopper.libraries.RegisterManager;
import io.treehopper.libraries.Register;
import io.treehopper.SMBusDevice;
import java.util.Arrays;

/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
class Ads1115Registers extends RegisterManager
{
    SMBusDevice _dev;
    Ads1115Registers(SMBusDevice dev)
    {
        super(dev);
        conversion = new ConversionRegister(this);
        _registers.add(conversion);
        config = new ConfigRegister(this);
        _registers.add(config);
        lowThreshold = new LowThresholdRegister(this);
        _registers.add(lowThreshold);
        highThreshold = new HighThresholdRegister(this);
        _registers.add(highThreshold);
    }

    ConversionRegister conversion;
    ConfigRegister config;
    LowThresholdRegister lowThreshold;
    HighThresholdRegister highThreshold;

    class ConversionRegister extends Register
    {
        ConversionRegister(RegisterManager regManager) { super(regManager, 0x00, 2, true); }

        int value;


        public ConversionRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            Value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class ConfigRegister extends Register
    {
        ConfigRegister(RegisterManager regManager) { super(regManager, 0x01, 2, false); }

        int comparatorQueue;
        int latchingComparator;
        int comparatorPolarity;
        int comparatorMode;
        int dataRate;
        int operatingMode;
        int pga;
        int mux;
        int operationalStatus;

                public comparatorQueue getComparatorQueue() { for (comparatorQueue b : comparatorQueue.values()) { if(b.getVal() == ComparatorQueue) return b; } return comparatorQueue.values()[0]; }
                public void setComparatorQueue(comparatorQueue enumVal) { ComparatorQueue = enumVal.getVal(); }
                public dataRate getDataRate() { for (dataRate b : dataRate.values()) { if(b.getVal() == DataRate) return b; } return dataRate.values()[0]; }
                public void setDataRate(dataRate enumVal) { DataRate = enumVal.getVal(); }
                public pga getPga() { for (pga b : pga.values()) { if(b.getVal() == Pga) return b; } return pga.values()[0]; }
                public void setPga(pga enumVal) { Pga = enumVal.getVal(); }
                public mux getMux() { for (mux b : mux.values()) { if(b.getVal() == Mux) return b; } return mux.values()[0]; }
                public void setMux(mux enumVal) { Mux = enumVal.getVal(); }

        public ConfigRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((ComparatorQueue & 0x3) << 0) | ((LatchingComparator & 0x1) << 2) | ((ComparatorPolarity & 0x1) << 3) | ((ComparatorMode & 0x1) << 4) | ((DataRate & 0x7) << 5) | ((OperatingMode & 0x1) << 8) | ((Pga & 0x7) << 9) | ((Mux & 0x7) << 12) | ((OperationalStatus & 0x1) << 15); }
        public void setValue(long _value)
        {
            ComparatorQueue = (int)((_value >> 0) & 0x3);
            LatchingComparator = (int)((_value >> 2) & 0x1);
            ComparatorPolarity = (int)((_value >> 3) & 0x1);
            ComparatorMode = (int)((_value >> 4) & 0x1);
            DataRate = (int)((_value >> 5) & 0x7);
            OperatingMode = (int)((_value >> 8) & 0x1);
            Pga = (int)((_value >> 9) & 0x7);
            Mux = (int)((_value >> 12) & 0x7);
            OperationalStatus = (int)((_value >> 15) & 0x1);
        }
    }
    class LowThresholdRegister extends Register
    {
        LowThresholdRegister(RegisterManager regManager) { super(regManager, 0x02, 2, true); }

        int value;


        public LowThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            Value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class HighThresholdRegister extends Register
    {
        HighThresholdRegister(RegisterManager regManager) { super(regManager, 0x03, 2, true); }

        int value;


        public HighThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            Value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
}
