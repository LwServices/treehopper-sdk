package io.treehopper.libraries.sensors.inertial.mpu6050;

import io.treehopper.libraries.RegisterManager;
import io.treehopper.libraries.Register;
import io.treehopper.SMBusDevice;
import java.util.Arrays;

/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
class Mpu6050Registers extends RegisterManager
{
    SMBusDevice _dev;
    Mpu6050Registers(SMBusDevice dev)
    {
        super(dev);
        Self_test_x_gyro = new Self_test_x_gyroRegister(this);
        _registers.add(Self_test_x_gyro);
        Self_test_y_gyro = new Self_test_y_gyroRegister(this);
        _registers.add(Self_test_y_gyro);
        Self_test_z_gyro = new Self_test_z_gyroRegister(this);
        _registers.add(Self_test_z_gyro);
        Self_test_x_accel = new Self_test_x_accelRegister(this);
        _registers.add(Self_test_x_accel);
        Self_test_y_accel = new Self_test_y_accelRegister(this);
        _registers.add(Self_test_y_accel);
        Self_test_z_accel = new Self_test_z_accelRegister(this);
        _registers.add(Self_test_z_accel);
        XGyroOffsUsr = new XGyroOffsUsrRegister(this);
        _registers.add(XGyroOffsUsr);
        YGyroOffsUsr = new YGyroOffsUsrRegister(this);
        _registers.add(YGyroOffsUsr);
        ZGyroOffsUsr = new ZGyroOffsUsrRegister(this);
        _registers.add(ZGyroOffsUsr);
        SampleRateDivider = new SampleRateDividerRegister(this);
        _registers.add(SampleRateDivider);
        Configuration = new ConfigurationRegister(this);
        _registers.add(Configuration);
        GyroConfig = new GyroConfigRegister(this);
        _registers.add(GyroConfig);
        AccelConfig = new AccelConfigRegister(this);
        _registers.add(AccelConfig);
        AccelConfig2 = new AccelConfig2Register(this);
        _registers.add(AccelConfig2);
        LowPowerAccelerometerOdrControl = new LowPowerAccelerometerOdrControlRegister(this);
        _registers.add(LowPowerAccelerometerOdrControl);
        WomThreshold = new WomThresholdRegister(this);
        _registers.add(WomThreshold);
        FifoEnable = new FifoEnableRegister(this);
        _registers.add(FifoEnable);
        I2cMasterControl = new I2cMasterControlRegister(this);
        _registers.add(I2cMasterControl);
        I2cSlv0Addr = new I2cSlv0AddrRegister(this);
        _registers.add(I2cSlv0Addr);
        I2cSlv0Reg = new I2cSlv0RegRegister(this);
        _registers.add(I2cSlv0Reg);
        I2cSlv0Ctrl = new I2cSlv0CtrlRegister(this);
        _registers.add(I2cSlv0Ctrl);
        I2cSlv1Addr = new I2cSlv1AddrRegister(this);
        _registers.add(I2cSlv1Addr);
        I2cSlv1Reg = new I2cSlv1RegRegister(this);
        _registers.add(I2cSlv1Reg);
        I2cSlv1Ctrl = new I2cSlv1CtrlRegister(this);
        _registers.add(I2cSlv1Ctrl);
        I2cSlv2Addr = new I2cSlv2AddrRegister(this);
        _registers.add(I2cSlv2Addr);
        I2cSlv2Reg = new I2cSlv2RegRegister(this);
        _registers.add(I2cSlv2Reg);
        I2cSlv2Ctrl = new I2cSlv2CtrlRegister(this);
        _registers.add(I2cSlv2Ctrl);
        I2cSlv3Addr = new I2cSlv3AddrRegister(this);
        _registers.add(I2cSlv3Addr);
        I2cSlv3Reg = new I2cSlv3RegRegister(this);
        _registers.add(I2cSlv3Reg);
        I2cSlv3Ctrl = new I2cSlv3CtrlRegister(this);
        _registers.add(I2cSlv3Ctrl);
        I2cSlv4Addr = new I2cSlv4AddrRegister(this);
        _registers.add(I2cSlv4Addr);
        I2cSlv4Reg = new I2cSlv4RegRegister(this);
        _registers.add(I2cSlv4Reg);
        I2cSlv4Do = new I2cSlv4DoRegister(this);
        _registers.add(I2cSlv4Do);
        I2cSlv4Ctrl = new I2cSlv4CtrlRegister(this);
        _registers.add(I2cSlv4Ctrl);
        I2cSlv4Di = new I2cSlv4DiRegister(this);
        _registers.add(I2cSlv4Di);
        I2cMstStatus = new I2cMstStatusRegister(this);
        _registers.add(I2cMstStatus);
        IntPinCfg = new IntPinCfgRegister(this);
        _registers.add(IntPinCfg);
        IntEnable = new IntEnableRegister(this);
        _registers.add(IntEnable);
        IntStatus = new IntStatusRegister(this);
        _registers.add(IntStatus);
        Accel_x = new Accel_xRegister(this);
        _registers.add(Accel_x);
        Accel_y = new Accel_yRegister(this);
        _registers.add(Accel_y);
        Accel_z = new Accel_zRegister(this);
        _registers.add(Accel_z);
        Temp = new TempRegister(this);
        _registers.add(Temp);
        Gyro_x = new Gyro_xRegister(this);
        _registers.add(Gyro_x);
        Gyro_y = new Gyro_yRegister(this);
        _registers.add(Gyro_y);
        Gyro_z = new Gyro_zRegister(this);
        _registers.add(Gyro_z);
        ExtSensData = new ExtSensDataRegister(this);
        _registers.add(ExtSensData);
        I2cSlv0do = new I2cSlv0doRegister(this);
        _registers.add(I2cSlv0do);
        I2cSlv1do = new I2cSlv1doRegister(this);
        _registers.add(I2cSlv1do);
        I2cSlv2do = new I2cSlv2doRegister(this);
        _registers.add(I2cSlv2do);
        I2cSlv3do = new I2cSlv3doRegister(this);
        _registers.add(I2cSlv3do);
        I2cMstDelayCtrl = new I2cMstDelayCtrlRegister(this);
        _registers.add(I2cMstDelayCtrl);
        SignalPathReset = new SignalPathResetRegister(this);
        _registers.add(SignalPathReset);
        AccelIntCtrl = new AccelIntCtrlRegister(this);
        _registers.add(AccelIntCtrl);
        UserCtrl = new UserCtrlRegister(this);
        _registers.add(UserCtrl);
        PowerMgmt1 = new PowerMgmt1Register(this);
        _registers.add(PowerMgmt1);
        PowerMgmt2 = new PowerMgmt2Register(this);
        _registers.add(PowerMgmt2);
        FifoCount = new FifoCountRegister(this);
        _registers.add(FifoCount);
        FifoRW = new FifoRWRegister(this);
        _registers.add(FifoRW);
        WhoAmI = new WhoAmIRegister(this);
        _registers.add(WhoAmI);
        XAccelOffset = new XAccelOffsetRegister(this);
        _registers.add(XAccelOffset);
        YAccelOffset = new YAccelOffsetRegister(this);
        _registers.add(YAccelOffset);
        ZAccelOffset = new ZAccelOffsetRegister(this);
        _registers.add(ZAccelOffset);
    }

    Self_test_x_gyroRegister Self_test_x_gyro;
    Self_test_y_gyroRegister Self_test_y_gyro;
    Self_test_z_gyroRegister Self_test_z_gyro;
    Self_test_x_accelRegister Self_test_x_accel;
    Self_test_y_accelRegister Self_test_y_accel;
    Self_test_z_accelRegister Self_test_z_accel;
    XGyroOffsUsrRegister XGyroOffsUsr;
    YGyroOffsUsrRegister YGyroOffsUsr;
    ZGyroOffsUsrRegister ZGyroOffsUsr;
    SampleRateDividerRegister SampleRateDivider;
    ConfigurationRegister Configuration;
    GyroConfigRegister GyroConfig;
    AccelConfigRegister AccelConfig;
    AccelConfig2Register AccelConfig2;
    LowPowerAccelerometerOdrControlRegister LowPowerAccelerometerOdrControl;
    WomThresholdRegister WomThreshold;
    FifoEnableRegister FifoEnable;
    I2cMasterControlRegister I2cMasterControl;
    I2cSlv0AddrRegister I2cSlv0Addr;
    I2cSlv0RegRegister I2cSlv0Reg;
    I2cSlv0CtrlRegister I2cSlv0Ctrl;
    I2cSlv1AddrRegister I2cSlv1Addr;
    I2cSlv1RegRegister I2cSlv1Reg;
    I2cSlv1CtrlRegister I2cSlv1Ctrl;
    I2cSlv2AddrRegister I2cSlv2Addr;
    I2cSlv2RegRegister I2cSlv2Reg;
    I2cSlv2CtrlRegister I2cSlv2Ctrl;
    I2cSlv3AddrRegister I2cSlv3Addr;
    I2cSlv3RegRegister I2cSlv3Reg;
    I2cSlv3CtrlRegister I2cSlv3Ctrl;
    I2cSlv4AddrRegister I2cSlv4Addr;
    I2cSlv4RegRegister I2cSlv4Reg;
    I2cSlv4DoRegister I2cSlv4Do;
    I2cSlv4CtrlRegister I2cSlv4Ctrl;
    I2cSlv4DiRegister I2cSlv4Di;
    I2cMstStatusRegister I2cMstStatus;
    IntPinCfgRegister IntPinCfg;
    IntEnableRegister IntEnable;
    IntStatusRegister IntStatus;
    Accel_xRegister Accel_x;
    Accel_yRegister Accel_y;
    Accel_zRegister Accel_z;
    TempRegister Temp;
    Gyro_xRegister Gyro_x;
    Gyro_yRegister Gyro_y;
    Gyro_zRegister Gyro_z;
    ExtSensDataRegister ExtSensData;
    I2cSlv0doRegister I2cSlv0do;
    I2cSlv1doRegister I2cSlv1do;
    I2cSlv2doRegister I2cSlv2do;
    I2cSlv3doRegister I2cSlv3do;
    I2cMstDelayCtrlRegister I2cMstDelayCtrl;
    SignalPathResetRegister SignalPathReset;
    AccelIntCtrlRegister AccelIntCtrl;
    UserCtrlRegister UserCtrl;
    PowerMgmt1Register PowerMgmt1;
    PowerMgmt2Register PowerMgmt2;
    FifoCountRegister FifoCount;
    FifoRWRegister FifoRW;
    WhoAmIRegister WhoAmI;
    XAccelOffsetRegister XAccelOffset;
    YAccelOffsetRegister YAccelOffset;
    ZAccelOffsetRegister ZAccelOffset;

    class Self_test_x_gyroRegister extends Register
    {
        Self_test_x_gyroRegister(RegisterManager regManager) { super(regManager, 0x00, 1, false); }

        int Value;


        public Self_test_x_gyroRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class Self_test_y_gyroRegister extends Register
    {
        Self_test_y_gyroRegister(RegisterManager regManager) { super(regManager, 0x01, 1, false); }

        int Value;


        public Self_test_y_gyroRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class Self_test_z_gyroRegister extends Register
    {
        Self_test_z_gyroRegister(RegisterManager regManager) { super(regManager, 0x02, 1, false); }

        int Value;


        public Self_test_z_gyroRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class Self_test_x_accelRegister extends Register
    {
        Self_test_x_accelRegister(RegisterManager regManager) { super(regManager, 0x0d, 1, false); }

        int Value;


        public Self_test_x_accelRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class Self_test_y_accelRegister extends Register
    {
        Self_test_y_accelRegister(RegisterManager regManager) { super(regManager, 0x0e, 1, false); }

        int Value;


        public Self_test_y_accelRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class Self_test_z_accelRegister extends Register
    {
        Self_test_z_accelRegister(RegisterManager regManager) { super(regManager, 0x0f, 1, false); }

        int Value;


        public Self_test_z_accelRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class XGyroOffsUsrRegister extends Register
    {
        XGyroOffsUsrRegister(RegisterManager regManager) { super(regManager, 0x13, 2, false); }

        int Value;


        public XGyroOffsUsrRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFFFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFFFF);
        }
    }
    class YGyroOffsUsrRegister extends Register
    {
        YGyroOffsUsrRegister(RegisterManager regManager) { super(regManager, 0x15, 2, false); }

        int Value;


        public YGyroOffsUsrRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFFFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFFFF);
        }
    }
    class ZGyroOffsUsrRegister extends Register
    {
        ZGyroOffsUsrRegister(RegisterManager regManager) { super(regManager, 0x17, 2, false); }

        int Value;


        public ZGyroOffsUsrRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFFFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFFFF);
        }
    }
    class SampleRateDividerRegister extends Register
    {
        SampleRateDividerRegister(RegisterManager regManager) { super(regManager, 0x19, 1, false); }

        int Value;


        public SampleRateDividerRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class ConfigurationRegister extends Register
    {
        ConfigurationRegister(RegisterManager regManager) { super(regManager, 0x1a, 1, false); }

        int Dlpf;
        int ExtSyncSet;
        int FifoMode;

                public ExtSyncSets getExtSyncSet() { for (ExtSyncSets b : ExtSyncSets.values()) { if(b.getVal() == ExtSyncSet) return b; } return ExtSyncSets.values()[0]; }
                public void setExtSyncSet(ExtSyncSets enumVal) { ExtSyncSet = enumVal.getVal(); }

        public ConfigurationRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Dlpf & 0x7) << 0) | ((ExtSyncSet & 0x7) << 3) | ((FifoMode & 0x1) << 6); }
        public void setValue(long value)
        {
            Dlpf = (int)((value >> 0) & 0x7);
            ExtSyncSet = (int)((value >> 3) & 0x7);
            FifoMode = (int)((value >> 6) & 0x1);
        }
    }
    class GyroConfigRegister extends Register
    {
        GyroConfigRegister(RegisterManager regManager) { super(regManager, 0x1b, 1, false); }

        int FChoiceBypass;
        int GyroFsSel;
        int ZGyroCten;
        int YGyroCten;

                public GyroFsSels getGyroFsSel() { for (GyroFsSels b : GyroFsSels.values()) { if(b.getVal() == GyroFsSel) return b; } return GyroFsSels.values()[0]; }
                public void setGyroFsSel(GyroFsSels enumVal) { GyroFsSel = enumVal.getVal(); }

        public GyroConfigRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((FChoiceBypass & 0x3) << 0) | ((GyroFsSel & 0x3) << 3) | ((ZGyroCten & 0x1) << 5) | ((YGyroCten & 0x1) << 6); }
        public void setValue(long value)
        {
            FChoiceBypass = (int)((value >> 0) & 0x3);
            GyroFsSel = (int)((value >> 3) & 0x3);
            ZGyroCten = (int)((value >> 5) & 0x1);
            YGyroCten = (int)((value >> 6) & 0x1);
        }
    }
    class AccelConfigRegister extends Register
    {
        AccelConfigRegister(RegisterManager regManager) { super(regManager, 0x1c, 1, false); }

        int AccelFsSel;
        int AccelZselfTest;
        int AccelYselfTest;
        int AccelXselfTest;

                public AccelFsSels getAccelFsSel() { for (AccelFsSels b : AccelFsSels.values()) { if(b.getVal() == AccelFsSel) return b; } return AccelFsSels.values()[0]; }
                public void setAccelFsSel(AccelFsSels enumVal) { AccelFsSel = enumVal.getVal(); }

        public AccelConfigRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((AccelFsSel & 0x3) << 3) | ((AccelZselfTest & 0x1) << 5) | ((AccelYselfTest & 0x1) << 6) | ((AccelXselfTest & 0x1) << 7); }
        public void setValue(long value)
        {
            AccelFsSel = (int)((value >> 3) & 0x3);
            AccelZselfTest = (int)((value >> 5) & 0x1);
            AccelYselfTest = (int)((value >> 6) & 0x1);
            AccelXselfTest = (int)((value >> 7) & 0x1);
        }
    }
    class AccelConfig2Register extends Register
    {
        AccelConfig2Register(RegisterManager regManager) { super(regManager, 0x1d, 1, false); }

        int DlpfCfg;
        int AccelFchoice;


        public AccelConfig2Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((DlpfCfg & 0x7) << 0) | ((AccelFchoice & 0x1) << 3); }
        public void setValue(long value)
        {
            DlpfCfg = (int)((value >> 0) & 0x7);
            AccelFchoice = (int)((value >> 3) & 0x1);
        }
    }
    class LowPowerAccelerometerOdrControlRegister extends Register
    {
        LowPowerAccelerometerOdrControlRegister(RegisterManager regManager) { super(regManager, 0x1e, 1, false); }

        int Value;


        public LowPowerAccelerometerOdrControlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xF);
        }
    }
    class WomThresholdRegister extends Register
    {
        WomThresholdRegister(RegisterManager regManager) { super(regManager, 0x1f, 1, false); }

        int Value;


        public WomThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class FifoEnableRegister extends Register
    {
        FifoEnableRegister(RegisterManager regManager) { super(regManager, 0x23, 1, false); }

        int Slv0;
        int Slv1;
        int Slv2;
        int Accel;
        int GyroZout;
        int GyroYout;
        int GyroXout;
        int TempOut;


        public FifoEnableRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Slv0 & 0x1) << 0) | ((Slv1 & 0x1) << 1) | ((Slv2 & 0x1) << 2) | ((Accel & 0x1) << 3) | ((GyroZout & 0x1) << 4) | ((GyroYout & 0x1) << 5) | ((GyroXout & 0x1) << 6) | ((TempOut & 0x1) << 7); }
        public void setValue(long value)
        {
            Slv0 = (int)((value >> 0) & 0x1);
            Slv1 = (int)((value >> 1) & 0x1);
            Slv2 = (int)((value >> 2) & 0x1);
            Accel = (int)((value >> 3) & 0x1);
            GyroZout = (int)((value >> 4) & 0x1);
            GyroYout = (int)((value >> 5) & 0x1);
            GyroXout = (int)((value >> 6) & 0x1);
            TempOut = (int)((value >> 7) & 0x1);
        }
    }
    class I2cMasterControlRegister extends Register
    {
        I2cMasterControlRegister(RegisterManager regManager) { super(regManager, 0x24, 1, false); }

        int I2cMasterClock;
        int I2cMstPnsr;
        int Slv3FifoEn;
        int WaitForEs;
        int MultMstEn;


        public I2cMasterControlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((I2cMasterClock & 0xF) << 0) | ((I2cMstPnsr & 0x1) << 4) | ((Slv3FifoEn & 0x1) << 5) | ((WaitForEs & 0x1) << 6) | ((MultMstEn & 0x1) << 7); }
        public void setValue(long value)
        {
            I2cMasterClock = (int)((value >> 0) & 0xF);
            I2cMstPnsr = (int)((value >> 4) & 0x1);
            Slv3FifoEn = (int)((value >> 5) & 0x1);
            WaitForEs = (int)((value >> 6) & 0x1);
            MultMstEn = (int)((value >> 7) & 0x1);
        }
    }
    class I2cSlv0AddrRegister extends Register
    {
        I2cSlv0AddrRegister(RegisterManager regManager) { super(regManager, 0x25, 1, false); }

        int Id;
        int Rnw;


        public I2cSlv0AddrRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Id & 0x7F) << 0) | ((Rnw & 0x1) << 7); }
        public void setValue(long value)
        {
            Id = (int)((value >> 0) & 0x7F);
            Rnw = (int)((value >> 7) & 0x1);
        }
    }
    class I2cSlv0RegRegister extends Register
    {
        I2cSlv0RegRegister(RegisterManager regManager) { super(regManager, 0x26, 1, false); }

        int Value;


        public I2cSlv0RegRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class I2cSlv0CtrlRegister extends Register
    {
        I2cSlv0CtrlRegister(RegisterManager regManager) { super(regManager, 0x27, 1, false); }

        int Value;


        public I2cSlv0CtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class I2cSlv1AddrRegister extends Register
    {
        I2cSlv1AddrRegister(RegisterManager regManager) { super(regManager, 0x28, 1, false); }

        int Id;
        int Rnw;


        public I2cSlv1AddrRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Id & 0x7F) << 0) | ((Rnw & 0x1) << 7); }
        public void setValue(long value)
        {
            Id = (int)((value >> 0) & 0x7F);
            Rnw = (int)((value >> 7) & 0x1);
        }
    }
    class I2cSlv1RegRegister extends Register
    {
        I2cSlv1RegRegister(RegisterManager regManager) { super(regManager, 0x29, 1, false); }

        int Value;


        public I2cSlv1RegRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class I2cSlv1CtrlRegister extends Register
    {
        I2cSlv1CtrlRegister(RegisterManager regManager) { super(regManager, 0x2a, 1, false); }

        int Value;


        public I2cSlv1CtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class I2cSlv2AddrRegister extends Register
    {
        I2cSlv2AddrRegister(RegisterManager regManager) { super(regManager, 0x2b, 1, false); }

        int Id;
        int Rnw;


        public I2cSlv2AddrRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Id & 0x7F) << 0) | ((Rnw & 0x1) << 7); }
        public void setValue(long value)
        {
            Id = (int)((value >> 0) & 0x7F);
            Rnw = (int)((value >> 7) & 0x1);
        }
    }
    class I2cSlv2RegRegister extends Register
    {
        I2cSlv2RegRegister(RegisterManager regManager) { super(regManager, 0x2c, 1, false); }

        int Value;


        public I2cSlv2RegRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class I2cSlv2CtrlRegister extends Register
    {
        I2cSlv2CtrlRegister(RegisterManager regManager) { super(regManager, 0x2d, 1, false); }

        int Value;


        public I2cSlv2CtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class I2cSlv3AddrRegister extends Register
    {
        I2cSlv3AddrRegister(RegisterManager regManager) { super(regManager, 0x2e, 1, false); }

        int Id;
        int Rnw;


        public I2cSlv3AddrRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Id & 0x7F) << 0) | ((Rnw & 0x1) << 7); }
        public void setValue(long value)
        {
            Id = (int)((value >> 0) & 0x7F);
            Rnw = (int)((value >> 7) & 0x1);
        }
    }
    class I2cSlv3RegRegister extends Register
    {
        I2cSlv3RegRegister(RegisterManager regManager) { super(regManager, 0x2f, 1, false); }

        int Value;


        public I2cSlv3RegRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class I2cSlv3CtrlRegister extends Register
    {
        I2cSlv3CtrlRegister(RegisterManager regManager) { super(regManager, 0x30, 1, false); }

        int Value;


        public I2cSlv3CtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class I2cSlv4AddrRegister extends Register
    {
        I2cSlv4AddrRegister(RegisterManager regManager) { super(regManager, 0x31, 1, false); }

        int Id;
        int Rnw;


        public I2cSlv4AddrRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Id & 0x7F) << 0) | ((Rnw & 0x1) << 7); }
        public void setValue(long value)
        {
            Id = (int)((value >> 0) & 0x7F);
            Rnw = (int)((value >> 7) & 0x1);
        }
    }
    class I2cSlv4RegRegister extends Register
    {
        I2cSlv4RegRegister(RegisterManager regManager) { super(regManager, 0x32, 1, false); }

        int Value;


        public I2cSlv4RegRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class I2cSlv4DoRegister extends Register
    {
        I2cSlv4DoRegister(RegisterManager regManager) { super(regManager, 0x33, 1, false); }

        int Value;


        public I2cSlv4DoRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class I2cSlv4CtrlRegister extends Register
    {
        I2cSlv4CtrlRegister(RegisterManager regManager) { super(regManager, 0x34, 1, false); }

        int Value;


        public I2cSlv4CtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class I2cSlv4DiRegister extends Register
    {
        I2cSlv4DiRegister(RegisterManager regManager) { super(regManager, 0x35, 1, false); }

        int Value;


        public I2cSlv4DiRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class I2cMstStatusRegister extends Register
    {
        I2cMstStatusRegister(RegisterManager regManager) { super(regManager, 0x36, 1, false); }

        int Slv0Nack;
        int Slv1Nack;
        int Slv2Nack;
        int Slv3Nack;
        int Slv4Nack;
        int LostArb;
        int Slv4Done;
        int PassThrough;


        public I2cMstStatusRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Slv0Nack & 0x1) << 0) | ((Slv1Nack & 0x1) << 1) | ((Slv2Nack & 0x1) << 2) | ((Slv3Nack & 0x1) << 3) | ((Slv4Nack & 0x1) << 4) | ((LostArb & 0x1) << 5) | ((Slv4Done & 0x1) << 6) | ((PassThrough & 0x1) << 7); }
        public void setValue(long value)
        {
            Slv0Nack = (int)((value >> 0) & 0x1);
            Slv1Nack = (int)((value >> 1) & 0x1);
            Slv2Nack = (int)((value >> 2) & 0x1);
            Slv3Nack = (int)((value >> 3) & 0x1);
            Slv4Nack = (int)((value >> 4) & 0x1);
            LostArb = (int)((value >> 5) & 0x1);
            Slv4Done = (int)((value >> 6) & 0x1);
            PassThrough = (int)((value >> 7) & 0x1);
        }
    }
    class IntPinCfgRegister extends Register
    {
        IntPinCfgRegister(RegisterManager regManager) { super(regManager, 0x37, 1, false); }

        int BypassEn;
        int FsyncIntModeEnable;
        int ActlFsync;
        int IntAnyRd2Clear;
        int LatchIntEn;
        int Open;
        int Actl;


        public IntPinCfgRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((BypassEn & 0x1) << 1) | ((FsyncIntModeEnable & 0x1) << 2) | ((ActlFsync & 0x1) << 3) | ((IntAnyRd2Clear & 0x1) << 4) | ((LatchIntEn & 0x1) << 5) | ((Open & 0x1) << 6) | ((Actl & 0x1) << 7); }
        public void setValue(long value)
        {
            BypassEn = (int)((value >> 1) & 0x1);
            FsyncIntModeEnable = (int)((value >> 2) & 0x1);
            ActlFsync = (int)((value >> 3) & 0x1);
            IntAnyRd2Clear = (int)((value >> 4) & 0x1);
            LatchIntEn = (int)((value >> 5) & 0x1);
            Open = (int)((value >> 6) & 0x1);
            Actl = (int)((value >> 7) & 0x1);
        }
    }
    class IntEnableRegister extends Register
    {
        IntEnableRegister(RegisterManager regManager) { super(regManager, 0x38, 1, false); }

        int RawReadyEnable;
        int FsyncIntEnable;
        int FifoIntEnable;
        int FifoOverflowEnable;
        int WomEnable;


        public IntEnableRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((RawReadyEnable & 0x1) << 0) | ((FsyncIntEnable & 0x1) << 2) | ((FifoIntEnable & 0x1) << 3) | ((FifoOverflowEnable & 0x1) << 4) | ((WomEnable & 0x1) << 1); }
        public void setValue(long value)
        {
            RawReadyEnable = (int)((value >> 0) & 0x1);
            FsyncIntEnable = (int)((value >> 2) & 0x1);
            FifoIntEnable = (int)((value >> 3) & 0x1);
            FifoOverflowEnable = (int)((value >> 4) & 0x1);
            WomEnable = (int)((value >> 1) & 0x1);
        }
    }
    class IntStatusRegister extends Register
    {
        IntStatusRegister(RegisterManager regManager) { super(regManager, 0x3a, 1, false); }

        int RawDataReadyInt;
        int FsyncInt;
        int FifoOverflowInt;
        int WomInt;


        public IntStatusRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((RawDataReadyInt & 0x1) << 0) | ((FsyncInt & 0x1) << 2) | ((FifoOverflowInt & 0x1) << 3) | ((WomInt & 0x1) << 1); }
        public void setValue(long value)
        {
            RawDataReadyInt = (int)((value >> 0) & 0x1);
            FsyncInt = (int)((value >> 2) & 0x1);
            FifoOverflowInt = (int)((value >> 3) & 0x1);
            WomInt = (int)((value >> 1) & 0x1);
        }
    }
    class Accel_xRegister extends Register
    {
        Accel_xRegister(RegisterManager regManager) { super(regManager, 0x3b, 2, true); }

        int Value;


        public Accel_xRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFFFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)(((value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class Accel_yRegister extends Register
    {
        Accel_yRegister(RegisterManager regManager) { super(regManager, 0x3d, 2, true); }

        int Value;


        public Accel_yRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFFFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)(((value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class Accel_zRegister extends Register
    {
        Accel_zRegister(RegisterManager regManager) { super(regManager, 0x3f, 2, true); }

        int Value;


        public Accel_zRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFFFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)(((value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class TempRegister extends Register
    {
        TempRegister(RegisterManager regManager) { super(regManager, 0x41, 2, true); }

        int Value;


        public TempRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFFFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)(((value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class Gyro_xRegister extends Register
    {
        Gyro_xRegister(RegisterManager regManager) { super(regManager, 0x43, 2, true); }

        int Value;


        public Gyro_xRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFFFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)(((value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class Gyro_yRegister extends Register
    {
        Gyro_yRegister(RegisterManager regManager) { super(regManager, 0x45, 2, true); }

        int Value;


        public Gyro_yRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFFFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)(((value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class Gyro_zRegister extends Register
    {
        Gyro_zRegister(RegisterManager regManager) { super(regManager, 0x47, 2, true); }

        int Value;


        public Gyro_zRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFFFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)(((value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class ExtSensDataRegister extends Register
    {
        ExtSensDataRegister(RegisterManager regManager) { super(regManager, 0x49, 24, false); }

        int Value;


        public ExtSensDataRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0x0) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0x0);
        }
    }
    class I2cSlv0doRegister extends Register
    {
        I2cSlv0doRegister(RegisterManager regManager) { super(regManager, 0x63, 1, false); }

        int Value;


        public I2cSlv0doRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class I2cSlv1doRegister extends Register
    {
        I2cSlv1doRegister(RegisterManager regManager) { super(regManager, 0x64, 1, false); }

        int Value;


        public I2cSlv1doRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class I2cSlv2doRegister extends Register
    {
        I2cSlv2doRegister(RegisterManager regManager) { super(regManager, 0x65, 1, false); }

        int Value;


        public I2cSlv2doRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class I2cSlv3doRegister extends Register
    {
        I2cSlv3doRegister(RegisterManager regManager) { super(regManager, 0x66, 1, false); }

        int Value;


        public I2cSlv3doRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class I2cMstDelayCtrlRegister extends Register
    {
        I2cMstDelayCtrlRegister(RegisterManager regManager) { super(regManager, 0x67, 1, false); }

        int Slv0DelayEn;
        int Slv1DelayEn;
        int Slv2DelayEn;
        int Slv3DelayEn;
        int Slv4DelayEn;
        int DelayEsShadow;


        public I2cMstDelayCtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Slv0DelayEn & 0x1) << 0) | ((Slv1DelayEn & 0x1) << 1) | ((Slv2DelayEn & 0x1) << 2) | ((Slv3DelayEn & 0x1) << 3) | ((Slv4DelayEn & 0x1) << 4) | ((DelayEsShadow & 0x1) << 2); }
        public void setValue(long value)
        {
            Slv0DelayEn = (int)((value >> 0) & 0x1);
            Slv1DelayEn = (int)((value >> 1) & 0x1);
            Slv2DelayEn = (int)((value >> 2) & 0x1);
            Slv3DelayEn = (int)((value >> 3) & 0x1);
            Slv4DelayEn = (int)((value >> 4) & 0x1);
            DelayEsShadow = (int)((value >> 2) & 0x1);
        }
    }
    class SignalPathResetRegister extends Register
    {
        SignalPathResetRegister(RegisterManager regManager) { super(regManager, 0x68, 1, false); }

        int TempReset;
        int AccelReset;
        int GyroReset;


        public SignalPathResetRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((TempReset & 0x1) << 0) | ((AccelReset & 0x1) << 1) | ((GyroReset & 0x1) << 2); }
        public void setValue(long value)
        {
            TempReset = (int)((value >> 0) & 0x1);
            AccelReset = (int)((value >> 1) & 0x1);
            GyroReset = (int)((value >> 2) & 0x1);
        }
    }
    class AccelIntCtrlRegister extends Register
    {
        AccelIntCtrlRegister(RegisterManager regManager) { super(regManager, 0x69, 1, false); }

        int AccelIntelMode;
        int AccelIntelEnable;


        public AccelIntCtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((AccelIntelMode & 0x1) << 6) | ((AccelIntelEnable & 0x1) << 7); }
        public void setValue(long value)
        {
            AccelIntelMode = (int)((value >> 6) & 0x1);
            AccelIntelEnable = (int)((value >> 7) & 0x1);
        }
    }
    class UserCtrlRegister extends Register
    {
        UserCtrlRegister(RegisterManager regManager) { super(regManager, 0x6a, 1, false); }

        int SigConditionReset;
        int I2cMasterReset;
        int FifoReset;
        int I2cIfDisable;
        int I2cMasterEnable;
        int FifoEnable;


        public UserCtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((SigConditionReset & 0x1) << 0) | ((I2cMasterReset & 0x1) << 1) | ((FifoReset & 0x1) << 2) | ((I2cIfDisable & 0x1) << 1) | ((I2cMasterEnable & 0x1) << 2) | ((FifoEnable & 0x1) << 3); }
        public void setValue(long value)
        {
            SigConditionReset = (int)((value >> 0) & 0x1);
            I2cMasterReset = (int)((value >> 1) & 0x1);
            FifoReset = (int)((value >> 2) & 0x1);
            I2cIfDisable = (int)((value >> 1) & 0x1);
            I2cMasterEnable = (int)((value >> 2) & 0x1);
            FifoEnable = (int)((value >> 3) & 0x1);
        }
    }
    class PowerMgmt1Register extends Register
    {
        PowerMgmt1Register(RegisterManager regManager) { super(regManager, 0x6b, 1, false); }

        int ClockSel;
        int PowerDownPtat;
        int GyroStandby;
        int Cycle;
        int Sleep;
        int Reset;

                public ClockSels getClockSel() { for (ClockSels b : ClockSels.values()) { if(b.getVal() == ClockSel) return b; } return ClockSels.values()[0]; }
                public void setClockSel(ClockSels enumVal) { ClockSel = enumVal.getVal(); }

        public PowerMgmt1Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((ClockSel & 0x7) << 0) | ((PowerDownPtat & 0x1) << 3) | ((GyroStandby & 0x1) << 4) | ((Cycle & 0x1) << 5) | ((Sleep & 0x1) << 6) | ((Reset & 0x1) << 7); }
        public void setValue(long value)
        {
            ClockSel = (int)((value >> 0) & 0x7);
            PowerDownPtat = (int)((value >> 3) & 0x1);
            GyroStandby = (int)((value >> 4) & 0x1);
            Cycle = (int)((value >> 5) & 0x1);
            Sleep = (int)((value >> 6) & 0x1);
            Reset = (int)((value >> 7) & 0x1);
        }
    }
    class PowerMgmt2Register extends Register
    {
        PowerMgmt2Register(RegisterManager regManager) { super(regManager, 0x6c, 1, false); }

        int DisableZG;
        int DisableYG;
        int DisableXG;
        int DisableZA;
        int DisableYA;
        int DisableXA;


        public PowerMgmt2Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((DisableZG & 0x1) << 0) | ((DisableYG & 0x1) << 1) | ((DisableXG & 0x1) << 2) | ((DisableZA & 0x1) << 3) | ((DisableYA & 0x1) << 4) | ((DisableXA & 0x1) << 5); }
        public void setValue(long value)
        {
            DisableZG = (int)((value >> 0) & 0x1);
            DisableYG = (int)((value >> 1) & 0x1);
            DisableXG = (int)((value >> 2) & 0x1);
            DisableZA = (int)((value >> 3) & 0x1);
            DisableYA = (int)((value >> 4) & 0x1);
            DisableXA = (int)((value >> 5) & 0x1);
        }
    }
    class FifoCountRegister extends Register
    {
        FifoCountRegister(RegisterManager regManager) { super(regManager, 0x72, 2, false); }

        int Value;


        public FifoCountRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0x1FFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0x1FFF);
        }
    }
    class FifoRWRegister extends Register
    {
        FifoRWRegister(RegisterManager regManager) { super(regManager, 0x74, 1, false); }

        int Value;


        public FifoRWRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class WhoAmIRegister extends Register
    {
        WhoAmIRegister(RegisterManager regManager) { super(regManager, 0x75, 1, false); }

        int Value;


        public WhoAmIRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFF);
        }
    }
    class XAccelOffsetRegister extends Register
    {
        XAccelOffsetRegister(RegisterManager regManager) { super(regManager, 0x77, 2, false); }

        int Value;


        public XAccelOffsetRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0x7FFF) << 1); }
        public void setValue(long value)
        {
            Value = (int)((value >> 1) & 0x7FFF);
        }
    }
    class YAccelOffsetRegister extends Register
    {
        YAccelOffsetRegister(RegisterManager regManager) { super(regManager, 0x7a, 2, false); }

        int Value;


        public YAccelOffsetRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0x7FFF) << 1); }
        public void setValue(long value)
        {
            Value = (int)((value >> 1) & 0x7FFF);
        }
    }
    class ZAccelOffsetRegister extends Register
    {
        ZAccelOffsetRegister(RegisterManager regManager) { super(regManager, 0x7d, 2, false); }

        int Value;


        public ZAccelOffsetRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0x7FFF) << 1); }
        public void setValue(long value)
        {
            Value = (int)((value >> 1) & 0x7FFF);
        }
    }
}
