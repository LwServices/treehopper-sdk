package io.treehopper.libraries.sensors.optical.vcnl4010;

import io.treehopper.libraries.RegisterManager;
import io.treehopper.libraries.Register;
import io.treehopper.SMBusDevice;
import java.util.Arrays;

/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
class Vcnl4010Registers extends RegisterManager
{
    SMBusDevice _dev;
    Vcnl4010Registers(SMBusDevice dev)
    {
        super(dev);
        Command = new CommandRegister(this);
        _registers.add(Command);
        ProductId = new ProductIdRegister(this);
        _registers.add(ProductId);
        ProximityRate = new ProximityRateRegister(this);
        _registers.add(ProximityRate);
        LedCurrent = new LedCurrentRegister(this);
        _registers.add(LedCurrent);
        AmbientLightParameters = new AmbientLightParametersRegister(this);
        _registers.add(AmbientLightParameters);
        AmbientLightResult = new AmbientLightResultRegister(this);
        _registers.add(AmbientLightResult);
        ProximityResult = new ProximityResultRegister(this);
        _registers.add(ProximityResult);
        InterruptControl = new InterruptControlRegister(this);
        _registers.add(InterruptControl);
        LowThreshold = new LowThresholdRegister(this);
        _registers.add(LowThreshold);
        HighThreshold = new HighThresholdRegister(this);
        _registers.add(HighThreshold);
        InterruptStatus = new InterruptStatusRegister(this);
        _registers.add(InterruptStatus);
        ProxModulatorTimingAdustment = new ProxModulatorTimingAdustmentRegister(this);
        _registers.add(ProxModulatorTimingAdustment);
    }

    CommandRegister Command;
    ProductIdRegister ProductId;
    ProximityRateRegister ProximityRate;
    LedCurrentRegister LedCurrent;
    AmbientLightParametersRegister AmbientLightParameters;
    AmbientLightResultRegister AmbientLightResult;
    ProximityResultRegister ProximityResult;
    InterruptControlRegister InterruptControl;
    LowThresholdRegister LowThreshold;
    HighThresholdRegister HighThreshold;
    InterruptStatusRegister InterruptStatus;
    ProxModulatorTimingAdustmentRegister ProxModulatorTimingAdustment;

    class CommandRegister extends Register
    {
        CommandRegister(RegisterManager regManager) { super(regManager, 0x80, 1, false); }

        int SelfTimedEnable;
        int ProxPeriodicEnable;
        int AlsPeriodicEnable;
        int ProxOnDemandStart;
        int AlsOnDemandStart;
        int ProxDataReady;
        int AlsDataReady;
        int ConfigLock;


        public CommandRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((SelfTimedEnable & 0x1) << 0) | ((ProxPeriodicEnable & 0x1) << 1) | ((AlsPeriodicEnable & 0x1) << 2) | ((ProxOnDemandStart & 0x1) << 3) | ((AlsOnDemandStart & 0x1) << 4) | ((ProxDataReady & 0x1) << 5) | ((AlsDataReady & 0x1) << 6) | ((ConfigLock & 0x1) << 7); }
        public void setValue(long value)
        {
            SelfTimedEnable = (int)((value >> 0) & 0x1);
            ProxPeriodicEnable = (int)((value >> 1) & 0x1);
            AlsPeriodicEnable = (int)((value >> 2) & 0x1);
            ProxOnDemandStart = (int)((value >> 3) & 0x1);
            AlsOnDemandStart = (int)((value >> 4) & 0x1);
            ProxDataReady = (int)((value >> 5) & 0x1);
            AlsDataReady = (int)((value >> 6) & 0x1);
            ConfigLock = (int)((value >> 7) & 0x1);
        }
    }
    class ProductIdRegister extends Register
    {
        ProductIdRegister(RegisterManager regManager) { super(regManager, 0x82, 1, false); }

        int RevisionId;
        int ProductId;


        public ProductIdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((RevisionId & 0xF) << 0) | ((ProductId & 0xF) << 4); }
        public void setValue(long value)
        {
            RevisionId = (int)((value >> 0) & 0xF);
            ProductId = (int)((value >> 4) & 0xF);
        }
    }
    class ProximityRateRegister extends Register
    {
        ProximityRateRegister(RegisterManager regManager) { super(regManager, 0x82, 1, false); }

        int Rate;

                public Rates getRate() { for (Rates b : Rates.values()) { if(b.getVal() == Rate) return b; } return Rates.values()[0]; }
                public void setRate(Rates enumVal) { Rate = enumVal.getVal(); }

        public ProximityRateRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Rate & 0xF) << 0); }
        public void setValue(long value)
        {
            Rate = (int)((value >> 0) & 0xF);
        }
    }
    class LedCurrentRegister extends Register
    {
        LedCurrentRegister(RegisterManager regManager) { super(regManager, 0x83, 1, false); }

        int IrLedCurrentValue;
        int FuseProgId;


        public LedCurrentRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((IrLedCurrentValue & 0x3F) << 0) | ((FuseProgId & 0x3) << 6); }
        public void setValue(long value)
        {
            IrLedCurrentValue = (int)((value >> 0) & 0x3F);
            FuseProgId = (int)((value >> 6) & 0x3);
        }
    }
    class AmbientLightParametersRegister extends Register
    {
        AmbientLightParametersRegister(RegisterManager regManager) { super(regManager, 0x84, 1, false); }

        int AveragingSamples;
        int AutoOffsetCompensation;
        int AlsRate;
        int ContinuousConversionMode;

                public AlsRates getAlsRate() { for (AlsRates b : AlsRates.values()) { if(b.getVal() == AlsRate) return b; } return AlsRates.values()[0]; }
                public void setAlsRate(AlsRates enumVal) { AlsRate = enumVal.getVal(); }

        public AmbientLightParametersRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((AveragingSamples & 0x7) << 0) | ((AutoOffsetCompensation & 0x1) << 3) | ((AlsRate & 0x7) << 4) | ((ContinuousConversionMode & 0x1) << 7); }
        public void setValue(long value)
        {
            AveragingSamples = (int)((value >> 0) & 0x7);
            AutoOffsetCompensation = (int)((value >> 3) & 0x1);
            AlsRate = (int)((value >> 4) & 0x7);
            ContinuousConversionMode = (int)((value >> 7) & 0x1);
        }
    }
    class AmbientLightResultRegister extends Register
    {
        AmbientLightResultRegister(RegisterManager regManager) { super(regManager, 0x85, 2, false); }

        int Value;


        public AmbientLightResultRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFFFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFFFF);
        }
    }
    class ProximityResultRegister extends Register
    {
        ProximityResultRegister(RegisterManager regManager) { super(regManager, 0x87, 2, true); }

        int Value;


        public ProximityResultRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFFFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFFFF);
        }
    }
    class InterruptControlRegister extends Register
    {
        InterruptControlRegister(RegisterManager regManager) { super(regManager, 0x89, 1, false); }

        int InterruptThresholdSelect;
        int InterruptThresholdEnable;
        int InterruptAlsReadyEnable;
        int IntCountExceed;

                public IntCountExceeds getIntCountExceed() { for (IntCountExceeds b : IntCountExceeds.values()) { if(b.getVal() == IntCountExceed) return b; } return IntCountExceeds.values()[0]; }
                public void setIntCountExceed(IntCountExceeds enumVal) { IntCountExceed = enumVal.getVal(); }

        public InterruptControlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((InterruptThresholdSelect & 0x1) << 0) | ((InterruptThresholdEnable & 0x1) << 1) | ((InterruptAlsReadyEnable & 0x1) << 2) | ((IntCountExceed & 0x7) << 5); }
        public void setValue(long value)
        {
            InterruptThresholdSelect = (int)((value >> 0) & 0x1);
            InterruptThresholdEnable = (int)((value >> 1) & 0x1);
            InterruptAlsReadyEnable = (int)((value >> 2) & 0x1);
            IntCountExceed = (int)((value >> 5) & 0x7);
        }
    }
    class LowThresholdRegister extends Register
    {
        LowThresholdRegister(RegisterManager regManager) { super(regManager, 0x8A, 2, true); }

        int Value;


        public LowThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFFFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFFFF);
        }
    }
    class HighThresholdRegister extends Register
    {
        HighThresholdRegister(RegisterManager regManager) { super(regManager, 0x8C, 2, true); }

        int Value;


        public HighThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFFFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)((value >> 0) & 0xFFFF);
        }
    }
    class InterruptStatusRegister extends Register
    {
        InterruptStatusRegister(RegisterManager regManager) { super(regManager, 0x8E, 1, false); }

        int IntThresholdHighExceeded;
        int IntThresholdLowExceeded;
        int IntAlsReady;
        int IntProxReady;


        public InterruptStatusRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((IntThresholdHighExceeded & 0x1) << 0) | ((IntThresholdLowExceeded & 0x1) << 1) | ((IntAlsReady & 0x1) << 2) | ((IntProxReady & 0x1) << 3); }
        public void setValue(long value)
        {
            IntThresholdHighExceeded = (int)((value >> 0) & 0x1);
            IntThresholdLowExceeded = (int)((value >> 1) & 0x1);
            IntAlsReady = (int)((value >> 2) & 0x1);
            IntProxReady = (int)((value >> 3) & 0x1);
        }
    }
    class ProxModulatorTimingAdustmentRegister extends Register
    {
        ProxModulatorTimingAdustmentRegister(RegisterManager regManager) { super(regManager, 0x8F, 1, false); }

        int ModulationDeadTime;
        int ProximityFrequency;
        int ModulationDelayTime;


        public ProxModulatorTimingAdustmentRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((ModulationDeadTime & 0x7) << 0) | ((ProximityFrequency & 0x3) << 3) | ((ModulationDelayTime & 0x7) << 5); }
        public void setValue(long value)
        {
            ModulationDeadTime = (int)((value >> 0) & 0x7);
            ProximityFrequency = (int)((value >> 3) & 0x3);
            ModulationDelayTime = (int)((value >> 5) & 0x7);
        }
    }
}
